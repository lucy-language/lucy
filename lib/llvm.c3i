
module llvm;

const FALSE = 0;
const TRUE = 1;

const DISASSEMBLER__VARIANT_KIND__NONE = 0;
const DISASSEMBLER__VARIANT_KIND__AR_M__HI_1_6 = 1;
const DISASSEMBLER__VARIANT_KIND__AR_M__LO_1_6 = 2;
const DISASSEMBLER__VARIANT_KIND__ARM_6_4__PAGE = 1;
const DISASSEMBLER__VARIANT_KIND__ARM_6_4__PAGEOFF = 2;
const DISASSEMBLER__VARIANT_KIND__ARM_6_4__GOTPAGE = 3;
const DISASSEMBLER__VARIANT_KIND__ARM_6_4__GOTPAGEOFF = 4;
const DISASSEMBLER__VARIANT_KIND__ARM_6_4__TLVP = 5;
const DISASSEMBLER__VARIANT_KIND__ARM_6_4__TLVOFF = 6;
const DISASSEMBLER__REFERENCE_TYPE__IN_OUT__NONE = 0;
const DISASSEMBLER__REFERENCE_TYPE__IN__BRANCH = 1;
const DISASSEMBLER__REFERENCE_TYPE__IN__P_CREL__LOAD = 2;
const DISASSEMBLER__REFERENCE_TYPE__IN__ARM_6_4__ADRP = 0x100000001;
const DISASSEMBLER__REFERENCE_TYPE__IN__ARM_6_4__ADD_XRI = 0x100000002;
const DISASSEMBLER__REFERENCE_TYPE__IN__ARM_6_4__LDR_XUI = 0x100000003;
const DISASSEMBLER__REFERENCE_TYPE__IN__ARM_6_4__LDR_XL = 0x100000004;
const DISASSEMBLER__REFERENCE_TYPE__IN__ARM_6_4__ADR = 0x100000005;
const DISASSEMBLER__REFERENCE_TYPE__OUT__SYMBOL_STUB = 1;
const DISASSEMBLER__REFERENCE_TYPE__OUT__LIT_POOL__SYM_ADDR = 2;
const DISASSEMBLER__REFERENCE_TYPE__OUT__LIT_POOL__CSTR_ADDR = 3;
const DISASSEMBLER__REFERENCE_TYPE__OUT__OBJC__CF_STRING__REF = 4;
const DISASSEMBLER__REFERENCE_TYPE__OUT__OBJC__MESSAGE = 5;
const DISASSEMBLER__REFERENCE_TYPE__OUT__OBJC__MESSAGE__REF = 6;
const DISASSEMBLER__REFERENCE_TYPE__OUT__OBJC__SELECTOR__REF = 7;
const DISASSEMBLER__REFERENCE_TYPE__OUT__OBJC__CLASS__REF = 8;
const DISASSEMBLER__REFERENCE_TYPE__DE_MANGLED__NAME = 9;
const DISASSEMBLER__OPTION__USE_MARKUP = 1;
const DISASSEMBLER__OPTION__PRINT_IMM_HEX = 2;
const DISASSEMBLER__OPTION__ASM_PRINTER_VARIANT = 4;
const DISASSEMBLER__OPTION__SET_INSTR_COMMENTS = 8;
const DISASSEMBLER__OPTION__PRINT_LATENCY = 16;
const DISASSEMBLER__OPTION__COLOR = 32;
const ERRORSUCCESS = 0;
const DEFAULT_TARGET_TRIPLE = "x86_64-pc-linux-gnu";
const ENABLE_THREADS = 1;
const HAS_AARCH64_TARGET = 1;
const HAS_AMDGPU_TARGET = 1;
const HAS_ARC_TARGET = 0;
const HAS_ARM_TARGET = 1;
const HAS_AVR_TARGET = 1;
const HAS_BPF_TARGET = 1;
const HAS_CSKY_TARGET = 0;
const HAS_DIRECTX_TARGET = 0;
const HAS_HEXAGON_TARGET = 1;
const HAS_LANAI_TARGET = 1;
const HAS_LOONGARCH_TARGET = 1;
const HAS_M68K_TARGET = 0;
const HAS_MIPS_TARGET = 1;
const HAS_MSP430_TARGET = 1;
const HAS_NVPTX_TARGET = 1;
const HAS_POWERPC_TARGET = 1;
const HAS_RISCV_TARGET = 1;
const HAS_SPARC_TARGET = 1;
const HAS_SPIRV_TARGET = 1;
const HAS_SYSTEMZ_TARGET = 1;
const HAS_VE_TARGET = 1;
const HAS_WEBASSEMBLY_TARGET = 1;
const HAS_X86_TARGET = 1;
const HAS_XCORE_TARGET = 1;
const HAS_XTENSA_TARGET = 0;
const ON_UNIX = 1;
const USE_INTEL_JITEVENTS = 0;
const USE_OPROFILE = 0;
const USE_PERF = 1;
const VERSION_MAJOR = 20;
const VERSION_MINOR = 1;
const VERSION_PATCH = 8;
const VERSION_STRING = "20.1.8";
const FORCE_ENABLE_STATS = 0;
const ENABLE_CURL = 1;
const ENABLE_ZLIB = 1;
const ENABLE_ZSTD = 1;
const HAVE_SYSEXITS_H = 1;
const UNREACHABLE_OPTIMIZE = 1;
const ENABLE_DIA_SDK = 0;
const REMARKS_API_VERSION = 1;
const BLAKE3_VERSION_STRING = "1.3.1";
const BLAKE3_KEY_LEN = 32;
const BLAKE3_OUT_LEN = 32;
const BLAKE3_BLOCK_LEN = 64;
const BLAKE3_CHUNK_LEN = 1024;
const BLAKE3_MAX_DEPTH = 54;
const LTO_API_VERSION = 29;

alias LLVMBool = CInt;

alias LLVMMemoryBufferRef = void*;

alias LLVMContextRef = void*;

alias LLVMModuleRef = void*;

alias LLVMTypeRef = void*;

alias LLVMValueRef = void*;

alias LLVMBasicBlockRef = void*;

alias LLVMMetadataRef = void*;

alias LLVMNamedMDNodeRef = void*;

alias LLVMValueMetadataEntry = void;

alias LLVMBuilderRef = void*;

alias LLVMDIBuilderRef = void*;

alias LLVMModuleProviderRef = void*;

alias LLVMPassManagerRef = void*;

alias LLVMUseRef = void*;

alias LLVMOperandBundleRef = void*;

alias LLVMAttributeRef = void*;

alias LLVMDiagnosticInfoRef = void*;

alias LLVMComdatRef = void*;

alias LLVMModuleFlagEntry = void;

alias LLVMJITEventListenerRef = void*;

alias LLVMBinaryRef = void*;

alias LLVMDbgRecordRef = void*;

typedef LLVMVerifierFailureAction = inline CUInt;
const LLVMVerifierFailureAction ABORTPROCESSACTION = 0;
const LLVMVerifierFailureAction PRINTMESSAGEACTION = 1;
const LLVMVerifierFailureAction RETURNSTATUSACTION = 2;

fn LLVMBool verify_module(
  LLVMModuleRef m, 
  LLVMVerifierFailureAction action, 
  CChar** out_message)
@extern("LLVMVerifyModule");

fn LLVMBool verify_function(
  LLVMValueRef fn_, 
  LLVMVerifierFailureAction action)
@extern("LLVMVerifyFunction");

fn void view_function_cfg(
  LLVMValueRef fn_)
@extern("LLVMViewFunctionCFG");

fn void view_function_cfg_only(
  LLVMValueRef fn_)
@extern("LLVMViewFunctionCFGOnly");

fn LLVMBool parse_bitcode(
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_module, 
  CChar** out_message)
@extern("LLVMParseBitcode");

fn LLVMBool parse_bitcode_2(
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_module)
@extern("LLVMParseBitcode2");

fn LLVMBool parse_bitcode_in_context(
  LLVMContextRef context_ref, 
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_module, 
  CChar** out_message)
@extern("LLVMParseBitcodeInContext");

fn LLVMBool parse_bitcode_in_context_2(
  LLVMContextRef context_ref, 
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_module)
@extern("LLVMParseBitcodeInContext2");

fn LLVMBool get_bitcode_module_in_context(
  LLVMContextRef context_ref, 
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_m, 
  CChar** out_message)
@extern("LLVMGetBitcodeModuleInContext");

fn LLVMBool get_bitcode_module_in_context_2(
  LLVMContextRef context_ref, 
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_m)
@extern("LLVMGetBitcodeModuleInContext2");

fn LLVMBool get_bitcode_module(
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_m, 
  CChar** out_message)
@extern("LLVMGetBitcodeModule");

fn LLVMBool get_bitcode_module_2(
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_m)
@extern("LLVMGetBitcodeModule2");

fn CInt write_bitcode_to_file(
  LLVMModuleRef m, 
  CChar* path)
@extern("LLVMWriteBitcodeToFile");

fn CInt write_bitcode_to_fd(
  LLVMModuleRef m, 
  CInt fd, 
  CInt should_close, 
  CInt unbuffered)
@extern("LLVMWriteBitcodeToFD");

fn CInt write_bitcode_to_file_handle(
  LLVMModuleRef m, 
  CInt handle)
@extern("LLVMWriteBitcodeToFileHandle");

fn LLVMMemoryBufferRef write_bitcode_to_memory_buffer(
  LLVMModuleRef m)
@extern("LLVMWriteBitcodeToMemoryBuffer");

typedef LLVMComdatSelectionKind = inline CUInt;
const LLVMComdatSelectionKind ANYCOMDATSELECTIONKIND = 0;
const LLVMComdatSelectionKind EXACTMATCHCOMDATSELECTIONKIND = 1;
const LLVMComdatSelectionKind LARGESTCOMDATSELECTIONKIND = 2;
const LLVMComdatSelectionKind NODEDUPLICATECOMDATSELECTIONKIND = 3;
const LLVMComdatSelectionKind SAMESIZECOMDATSELECTIONKIND = 4;

fn LLVMComdatRef get_or_insert_comdat(
  LLVMModuleRef m, 
  CChar* name)
@extern("LLVMGetOrInsertComdat");

fn LLVMComdatRef get_comdat(
  LLVMValueRef v)
@extern("LLVMGetComdat");

fn void set_comdat(
  LLVMValueRef v, 
  LLVMComdatRef c)
@extern("LLVMSetComdat");

fn LLVMComdatSelectionKind get_comdat_selection_kind(
  LLVMComdatRef c)
@extern("LLVMGetComdatSelectionKind");

fn void set_comdat_selection_kind(
  LLVMComdatRef c, 
  LLVMComdatSelectionKind kind)
@extern("LLVMSetComdatSelectionKind");

alias LLVMFatalErrorHandler = fn void(
  CChar* reason);

fn void install_fatal_error_handler(
  LLVMFatalErrorHandler handler)
@extern("LLVMInstallFatalErrorHandler");

fn void reset_fatal_error_handler()
@extern("LLVMResetFatalErrorHandler");

fn void enable_pretty_stack_trace()
@extern("LLVMEnablePrettyStackTrace");

typedef LLVMOpcode = inline CUInt;
const LLVMOpcode RET = 1;
const LLVMOpcode BR = 2;
const LLVMOpcode SWITCH = 3;
const LLVMOpcode INDIRECTBR = 4;
const LLVMOpcode INVOKE = 5;
const LLVMOpcode UNREACHABLE = 7;
const LLVMOpcode CALLBR = 67;
const LLVMOpcode FNEG = 66;
const LLVMOpcode ADD = 8;
const LLVMOpcode FADD = 9;
const LLVMOpcode SUB = 10;
const LLVMOpcode FSUB = 11;
const LLVMOpcode MUL = 12;
const LLVMOpcode FMUL = 13;
const LLVMOpcode UDIV = 14;
const LLVMOpcode SDIV = 15;
const LLVMOpcode FDIV = 16;
const LLVMOpcode UREM = 17;
const LLVMOpcode SREM = 18;
const LLVMOpcode FREM = 19;
const LLVMOpcode SHL = 20;
const LLVMOpcode LSHR = 21;
const LLVMOpcode ASHR = 22;
const LLVMOpcode AND = 23;
const LLVMOpcode OR = 24;
const LLVMOpcode XOR = 25;
const LLVMOpcode ALLOCA = 26;
const LLVMOpcode LOAD = 27;
const LLVMOpcode STORE = 28;
const LLVMOpcode GETELEMENTPTR = 29;
const LLVMOpcode TRUNC = 30;
const LLVMOpcode ZEXT = 31;
const LLVMOpcode SEXT = 32;
const LLVMOpcode FPTOUI = 33;
const LLVMOpcode FPTOSI = 34;
const LLVMOpcode UITOFP = 35;
const LLVMOpcode SITOFP = 36;
const LLVMOpcode FPTRUNC = 37;
const LLVMOpcode FPEXT = 38;
const LLVMOpcode PTRTOINT = 39;
const LLVMOpcode INTTOPTR = 40;
const LLVMOpcode BITCAST = 41;
const LLVMOpcode ADDRSPACECAST = 60;
const LLVMOpcode ICMP = 42;
const LLVMOpcode FCMP = 43;
const LLVMOpcode PHI = 44;
const LLVMOpcode CALL = 45;
const LLVMOpcode SELECT = 46;
const LLVMOpcode USEROP1 = 47;
const LLVMOpcode USEROP2 = 48;
const LLVMOpcode VAARG = 49;
const LLVMOpcode EXTRACTELEMENT = 50;
const LLVMOpcode INSERTELEMENT = 51;
const LLVMOpcode SHUFFLEVECTOR = 52;
const LLVMOpcode EXTRACTVALUE = 53;
const LLVMOpcode INSERTVALUE = 54;
const LLVMOpcode FREEZE = 68;
const LLVMOpcode FENCE = 55;
const LLVMOpcode ATOMICCMPXCHG = 56;
const LLVMOpcode ATOMICRMW = 57;
const LLVMOpcode RESUME = 58;
const LLVMOpcode LANDINGPAD = 59;
const LLVMOpcode CLEANUPRET = 61;
const LLVMOpcode CATCHRET = 62;
const LLVMOpcode CATCHPAD = 63;
const LLVMOpcode CLEANUPPAD = 64;
const LLVMOpcode CATCHSWITCH = 65;

typedef LLVMTypeKind = inline CUInt;
const LLVMTypeKind VOIDTYPEKIND = 0;
const LLVMTypeKind HALFTYPEKIND = 1;
const LLVMTypeKind FLOATTYPEKIND = 2;
const LLVMTypeKind DOUBLETYPEKIND = 3;
const LLVMTypeKind X86_FP80TYPEKIND = 4;
const LLVMTypeKind FP128TYPEKIND = 5;
const LLVMTypeKind PPC_FP128TYPEKIND = 6;
const LLVMTypeKind LABELTYPEKIND = 7;
const LLVMTypeKind INTEGERTYPEKIND = 8;
const LLVMTypeKind FUNCTIONTYPEKIND = 9;
const LLVMTypeKind STRUCTTYPEKIND = 10;
const LLVMTypeKind ARRAYTYPEKIND = 11;
const LLVMTypeKind POINTERTYPEKIND = 12;
const LLVMTypeKind VECTORTYPEKIND = 13;
const LLVMTypeKind METADATATYPEKIND = 14;
const LLVMTypeKind TOKENTYPEKIND = 16;
const LLVMTypeKind SCALABLEVECTORTYPEKIND = 17;
const LLVMTypeKind BFLOATTYPEKIND = 18;
const LLVMTypeKind X86_AMXTYPEKIND = 19;
const LLVMTypeKind TARGETEXTTYPEKIND = 20;

typedef LLVMLinkage = inline CUInt;
const LLVMLinkage EXTERNALLINKAGE = 0;
const LLVMLinkage AVAILABLEEXTERNALLYLINKAGE = 1;
const LLVMLinkage LINKONCEANYLINKAGE = 2;
const LLVMLinkage LINKONCEODRLINKAGE = 3;
const LLVMLinkage LINKONCEODRAUTOHIDELINKAGE = 4;
const LLVMLinkage WEAKANYLINKAGE = 5;
const LLVMLinkage WEAKODRLINKAGE = 6;
const LLVMLinkage APPENDINGLINKAGE = 7;
const LLVMLinkage INTERNALLINKAGE = 8;
const LLVMLinkage PRIVATELINKAGE = 9;
const LLVMLinkage DLLIMPORTLINKAGE = 10;
const LLVMLinkage DLLEXPORTLINKAGE = 11;
const LLVMLinkage EXTERNALWEAKLINKAGE = 12;
const LLVMLinkage GHOSTLINKAGE = 13;
const LLVMLinkage COMMONLINKAGE = 14;
const LLVMLinkage LINKERPRIVATELINKAGE = 15;
const LLVMLinkage LINKERPRIVATEWEAKLINKAGE = 16;

typedef LLVMVisibility = inline CUInt;
const LLVMVisibility DEFAULTVISIBILITY = 0;
const LLVMVisibility HIDDENVISIBILITY = 1;
const LLVMVisibility PROTECTEDVISIBILITY = 2;

typedef LLVMUnnamedAddr = inline CUInt;
const LLVMUnnamedAddr NOUNNAMEDADDR = 0;
const LLVMUnnamedAddr LOCALUNNAMEDADDR = 1;
const LLVMUnnamedAddr GLOBALUNNAMEDADDR = 2;

typedef LLVMDLLStorageClass = inline CUInt;
const LLVMDLLStorageClass DEFAULTSTORAGECLASS = 0;
const LLVMDLLStorageClass DLLIMPORTSTORAGECLASS = 1;
const LLVMDLLStorageClass DLLEXPORTSTORAGECLASS = 2;

typedef LLVMCallConv = inline CUInt;
const LLVMCallConv CCALLCONV = 0;
const LLVMCallConv FASTCALLCONV = 8;
const LLVMCallConv COLDCALLCONV = 9;
const LLVMCallConv GHCCALLCONV = 10;
const LLVMCallConv HIPECALLCONV = 11;
const LLVMCallConv ANYREGCALLCONV = 13;
const LLVMCallConv PRESERVEMOSTCALLCONV = 14;
const LLVMCallConv PRESERVEALLCALLCONV = 15;
const LLVMCallConv SWIFTCALLCONV = 16;
const LLVMCallConv CXXFASTTLSCALLCONV = 17;
const LLVMCallConv X86STDCALLCALLCONV = 64;
const LLVMCallConv X86FASTCALLCALLCONV = 65;
const LLVMCallConv ARMAPCSCALLCONV = 66;
const LLVMCallConv ARMAAPCSCALLCONV = 67;
const LLVMCallConv ARMAAPCSVFPCALLCONV = 68;
const LLVMCallConv MSP430INTRCALLCONV = 69;
const LLVMCallConv X86THISCALLCALLCONV = 70;
const LLVMCallConv PTXKERNELCALLCONV = 71;
const LLVMCallConv PTXDEVICECALLCONV = 72;
const LLVMCallConv SPIRFUNCCALLCONV = 75;
const LLVMCallConv SPIRKERNELCALLCONV = 76;
const LLVMCallConv INTELOCLBICALLCONV = 77;
const LLVMCallConv X8664SYSVCALLCONV = 78;
const LLVMCallConv WIN64CALLCONV = 79;
const LLVMCallConv X86VECTORCALLCALLCONV = 80;
const LLVMCallConv HHVMCALLCONV = 81;
const LLVMCallConv HHVMCCALLCONV = 82;
const LLVMCallConv X86INTRCALLCONV = 83;
const LLVMCallConv AVRINTRCALLCONV = 84;
const LLVMCallConv AVRSIGNALCALLCONV = 85;
const LLVMCallConv AVRBUILTINCALLCONV = 86;
const LLVMCallConv AMDGPUVSCALLCONV = 87;
const LLVMCallConv AMDGPUGSCALLCONV = 88;
const LLVMCallConv AMDGPUPSCALLCONV = 89;
const LLVMCallConv AMDGPUCSCALLCONV = 90;
const LLVMCallConv AMDGPUKERNELCALLCONV = 91;
const LLVMCallConv X86REGCALLCALLCONV = 92;
const LLVMCallConv AMDGPUHSCALLCONV = 93;
const LLVMCallConv MSP430BUILTINCALLCONV = 94;
const LLVMCallConv AMDGPULSCALLCONV = 95;
const LLVMCallConv AMDGPUESCALLCONV = 96;

typedef LLVMValueKind = inline CUInt;
const LLVMValueKind ARGUMENTVALUEKIND = 0;
const LLVMValueKind BASICBLOCKVALUEKIND = 1;
const LLVMValueKind MEMORYUSEVALUEKIND = 2;
const LLVMValueKind MEMORYDEFVALUEKIND = 3;
const LLVMValueKind MEMORYPHIVALUEKIND = 4;
const LLVMValueKind FUNCTIONVALUEKIND = 5;
const LLVMValueKind GLOBALALIASVALUEKIND = 6;
const LLVMValueKind GLOBALIFUNCVALUEKIND = 7;
const LLVMValueKind GLOBALVARIABLEVALUEKIND = 8;
const LLVMValueKind BLOCKADDRESSVALUEKIND = 9;
const LLVMValueKind CONSTANTEXPRVALUEKIND = 10;
const LLVMValueKind CONSTANTARRAYVALUEKIND = 11;
const LLVMValueKind CONSTANTSTRUCTVALUEKIND = 12;
const LLVMValueKind CONSTANTVECTORVALUEKIND = 13;
const LLVMValueKind UNDEFVALUEVALUEKIND = 14;
const LLVMValueKind CONSTANTAGGREGATEZEROVALUEKIND = 15;
const LLVMValueKind CONSTANTDATAARRAYVALUEKIND = 16;
const LLVMValueKind CONSTANTDATAVECTORVALUEKIND = 17;
const LLVMValueKind CONSTANTINTVALUEKIND = 18;
const LLVMValueKind CONSTANTFPVALUEKIND = 19;
const LLVMValueKind CONSTANTPOINTERNULLVALUEKIND = 20;
const LLVMValueKind CONSTANTTOKENNONEVALUEKIND = 21;
const LLVMValueKind METADATAASVALUEVALUEKIND = 22;
const LLVMValueKind INLINEASMVALUEKIND = 23;
const LLVMValueKind INSTRUCTIONVALUEKIND = 24;
const LLVMValueKind POISONVALUEVALUEKIND = 25;
const LLVMValueKind CONSTANTTARGETNONEVALUEKIND = 26;
const LLVMValueKind CONSTANTPTRAUTHVALUEKIND = 27;

typedef LLVMIntPredicate = inline CUInt;
const LLVMIntPredicate INTEQ = 32;
const LLVMIntPredicate INTNE = 33;
const LLVMIntPredicate INTUGT = 34;
const LLVMIntPredicate INTUGE = 35;
const LLVMIntPredicate INTULT = 36;
const LLVMIntPredicate INTULE = 37;
const LLVMIntPredicate INTSGT = 38;
const LLVMIntPredicate INTSGE = 39;
const LLVMIntPredicate INTSLT = 40;
const LLVMIntPredicate INTSLE = 41;

typedef LLVMRealPredicate = inline CUInt;
const LLVMRealPredicate REALPREDICATEFALSE = 0;
const LLVMRealPredicate REALOEQ = 1;
const LLVMRealPredicate REALOGT = 2;
const LLVMRealPredicate REALOGE = 3;
const LLVMRealPredicate REALOLT = 4;
const LLVMRealPredicate REALOLE = 5;
const LLVMRealPredicate REALONE = 6;
const LLVMRealPredicate REALORD = 7;
const LLVMRealPredicate REALUNO = 8;
const LLVMRealPredicate REALUEQ = 9;
const LLVMRealPredicate REALUGT = 10;
const LLVMRealPredicate REALUGE = 11;
const LLVMRealPredicate REALULT = 12;
const LLVMRealPredicate REALULE = 13;
const LLVMRealPredicate REALUNE = 14;
const LLVMRealPredicate REALPREDICATETRUE = 15;

typedef LLVMLandingPadClauseTy = inline CUInt;
const LLVMLandingPadClauseTy LANDINGPADCATCH = 0;
const LLVMLandingPadClauseTy LANDINGPADFILTER = 1;

typedef LLVMThreadLocalMode = inline CUInt;
const LLVMThreadLocalMode NOTTHREADLOCAL = 0;
const LLVMThreadLocalMode GENERALDYNAMICTLSMODEL = 1;
const LLVMThreadLocalMode LOCALDYNAMICTLSMODEL = 2;
const LLVMThreadLocalMode INITIALEXECTLSMODEL = 3;
const LLVMThreadLocalMode LOCALEXECTLSMODEL = 4;

typedef LLVMAtomicOrdering = inline CUInt;
const LLVMAtomicOrdering ATOMICORDERINGNOTATOMIC = 0;
const LLVMAtomicOrdering ATOMICORDERINGUNORDERED = 1;
const LLVMAtomicOrdering ATOMICORDERINGMONOTONIC = 2;
const LLVMAtomicOrdering ATOMICORDERINGACQUIRE = 4;
const LLVMAtomicOrdering ATOMICORDERINGRELEASE = 5;
const LLVMAtomicOrdering ATOMICORDERINGACQUIRERELEASE = 6;
const LLVMAtomicOrdering ATOMICORDERINGSEQUENTIALLYCONSISTENT = 7;

typedef LLVMAtomicRMWBinOp = inline CUInt;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPXCHG = 0;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPADD = 1;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPSUB = 2;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPAND = 3;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPNAND = 4;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPOR = 5;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPXOR = 6;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPMAX = 7;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPMIN = 8;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPUMAX = 9;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPUMIN = 10;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPFADD = 11;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPFSUB = 12;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPFMAX = 13;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPFMIN = 14;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPUINCWRAP = 15;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPUDECWRAP = 16;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPUSUBCOND = 17;
const LLVMAtomicRMWBinOp ATOMICRMWBINOPUSUBSAT = 18;

typedef LLVMDiagnosticSeverity = inline CUInt;
const LLVMDiagnosticSeverity DSERROR = 0;
const LLVMDiagnosticSeverity DSWARNING = 1;
const LLVMDiagnosticSeverity DSREMARK = 2;
const LLVMDiagnosticSeverity DSNOTE = 3;

typedef LLVMInlineAsmDialect = inline CUInt;
const LLVMInlineAsmDialect INLINEASMDIALECTATT = 0;
const LLVMInlineAsmDialect INLINEASMDIALECTINTEL = 1;

typedef LLVMModuleFlagBehavior = inline CUInt;
const LLVMModuleFlagBehavior MODULEFLAGBEHAVIORERROR = 0;
const LLVMModuleFlagBehavior MODULEFLAGBEHAVIORWARNING = 1;
const LLVMModuleFlagBehavior MODULEFLAGBEHAVIORREQUIRE = 2;
const LLVMModuleFlagBehavior MODULEFLAGBEHAVIOROVERRIDE = 3;
const LLVMModuleFlagBehavior MODULEFLAGBEHAVIORAPPEND = 4;
const LLVMModuleFlagBehavior MODULEFLAGBEHAVIORAPPENDUNIQUE = 5;
const CInt ATTRIBUTERETURNINDEX = 0U;
const CInt ATTRIBUTEFUNCTIONINDEX = -1;

alias LLVMAttributeIndex = CUInt;

typedef LLVMTailCallKind = inline CUInt;
const LLVMTailCallKind TAILCALLKINDNONE = 0;
const LLVMTailCallKind TAILCALLKINDTAIL = 1;
const LLVMTailCallKind TAILCALLKINDMUSTTAIL = 2;
const LLVMTailCallKind TAILCALLKINDNOTAIL = 3;
const CUInt FASTMATHALLOWREASSOC = (1<<0);
const CUInt FASTMATHNONANS = (1<<1);
const CUInt FASTMATHNOINFS = (1<<2);
const CUInt FASTMATHNOSIGNEDZEROS = (1<<3);
const CUInt FASTMATHALLOWRECIPROCAL = (1<<4);
const CUInt FASTMATHALLOWCONTRACT = (1<<5);
const CUInt FASTMATHAPPROXFUNC = (1<<6);
const CUInt FASTMATHNONE = 0;
const CUInt FASTMATHALL = FASTMATHALLOWREASSOC|FASTMATHNONANS|FASTMATHNOINFS|FASTMATHNOSIGNEDZEROS|FASTMATHALLOWRECIPROCAL|FASTMATHALLOWCONTRACT|FASTMATHAPPROXFUNC;

alias LLVMFastMathFlags = CUInt;

const CUInt GEPFLAGINBOUNDS = (1<<0);
const CUInt GEPFLAGNUSW = (1<<1);
const CUInt GEPFLAGNUW = (1<<2);

alias LLVMGEPNoWrapFlags = CUInt;

fn void shutdown()
@extern("LLVMShutdown");

fn void get_version(
  CUInt* major, 
  CUInt* minor, 
  CUInt* patch)
@extern("LLVMGetVersion");

fn CChar* create_message(
  CChar* message)
@extern("LLVMCreateMessage");

fn void dispose_message(
  CChar* message)
@extern("LLVMDisposeMessage");

alias LLVMDiagnosticHandler = fn void(
  LLVMDiagnosticInfoRef, 
  void*);

alias LLVMYieldCallback = fn void(
  LLVMContextRef, 
  void*);

fn LLVMContextRef context_create()
@extern("LLVMContextCreate");

fn LLVMContextRef get_global_context()
@extern("LLVMGetGlobalContext");

fn void context_set_diagnostic_handler(
  LLVMContextRef c, 
  LLVMDiagnosticHandler handler, 
  void* diagnostic_context)
@extern("LLVMContextSetDiagnosticHandler");

fn LLVMDiagnosticHandler context_get_diagnostic_handler(
  LLVMContextRef c)
@extern("LLVMContextGetDiagnosticHandler");

fn void* context_get_diagnostic_context(
  LLVMContextRef c)
@extern("LLVMContextGetDiagnosticContext");

fn void context_set_yield_callback(
  LLVMContextRef c, 
  LLVMYieldCallback callback, 
  void* opaque_handle)
@extern("LLVMContextSetYieldCallback");

fn LLVMBool context_should_discard_value_names(
  LLVMContextRef c)
@extern("LLVMContextShouldDiscardValueNames");

fn void context_set_discard_value_names(
  LLVMContextRef c, 
  LLVMBool discard)
@extern("LLVMContextSetDiscardValueNames");

fn void context_dispose(
  LLVMContextRef c)
@extern("LLVMContextDispose");

fn CChar* get_diag_info_description(
  LLVMDiagnosticInfoRef di)
@extern("LLVMGetDiagInfoDescription");

fn LLVMDiagnosticSeverity get_diag_info_severity(
  LLVMDiagnosticInfoRef di)
@extern("LLVMGetDiagInfoSeverity");

fn CUInt get_md_kind_id_in_context(
  LLVMContextRef c, 
  CChar* name, 
  CUInt s_len)
@extern("LLVMGetMDKindIDInContext");

fn CUInt get_md_kind_id(
  CChar* name, 
  CUInt s_len)
@extern("LLVMGetMDKindID");

fn CUInt get_sync_scope_id(
  LLVMContextRef c, 
  CChar* name, 
  usz s_len)
@extern("LLVMGetSyncScopeID");

fn CUInt get_enum_attribute_kind_for_name(
  CChar* name, 
  usz s_len)
@extern("LLVMGetEnumAttributeKindForName");

fn CUInt get_last_enum_attribute_kind()
@extern("LLVMGetLastEnumAttributeKind");

fn LLVMAttributeRef create_enum_attribute(
  LLVMContextRef c, 
  CUInt kind_id, 
  ulong val)
@extern("LLVMCreateEnumAttribute");

fn CUInt get_enum_attribute_kind(
  LLVMAttributeRef a)
@extern("LLVMGetEnumAttributeKind");

fn ulong get_enum_attribute_value(
  LLVMAttributeRef a)
@extern("LLVMGetEnumAttributeValue");

fn LLVMAttributeRef create_type_attribute(
  LLVMContextRef c, 
  CUInt kind_id, 
  LLVMTypeRef type_ref)
@extern("LLVMCreateTypeAttribute");

fn LLVMTypeRef get_type_attribute_value(
  LLVMAttributeRef a)
@extern("LLVMGetTypeAttributeValue");

fn LLVMAttributeRef create_constant_range_attribute(
  LLVMContextRef c, 
  CUInt kind_id, 
  CUInt num_bits, 
  ulong* lower_words, 
  ulong* upper_words)
@extern("LLVMCreateConstantRangeAttribute");

fn LLVMAttributeRef create_string_attribute(
  LLVMContextRef c, 
  CChar* k, 
  CUInt k_length, 
  CChar* v, 
  CUInt v_length)
@extern("LLVMCreateStringAttribute");

fn CChar* get_string_attribute_kind(
  LLVMAttributeRef a, 
  CUInt* length)
@extern("LLVMGetStringAttributeKind");

fn CChar* get_string_attribute_value(
  LLVMAttributeRef a, 
  CUInt* length)
@extern("LLVMGetStringAttributeValue");

fn LLVMBool is_enum_attribute(
  LLVMAttributeRef a)
@extern("LLVMIsEnumAttribute");

fn LLVMBool is_string_attribute(
  LLVMAttributeRef a)
@extern("LLVMIsStringAttribute");

fn LLVMBool is_type_attribute(
  LLVMAttributeRef a)
@extern("LLVMIsTypeAttribute");

fn LLVMTypeRef get_type_by_name_2(
  LLVMContextRef c, 
  CChar* name)
@extern("LLVMGetTypeByName2");

fn LLVMModuleRef module_create_with_name(
  CChar* module_id)
@extern("LLVMModuleCreateWithName");

fn LLVMModuleRef module_create_with_name_in_context(
  CChar* module_id, 
  LLVMContextRef c)
@extern("LLVMModuleCreateWithNameInContext");

fn LLVMModuleRef clone_module(
  LLVMModuleRef m)
@extern("LLVMCloneModule");

fn void dispose_module(
  LLVMModuleRef m)
@extern("LLVMDisposeModule");

fn LLVMBool is_new_dbg_info_format(
  LLVMModuleRef m)
@extern("LLVMIsNewDbgInfoFormat");

fn void set_is_new_dbg_info_format(
  LLVMModuleRef m, 
  LLVMBool use_new_format)
@extern("LLVMSetIsNewDbgInfoFormat");

fn CChar* get_module_identifier(
  LLVMModuleRef m, 
  usz* len)
@extern("LLVMGetModuleIdentifier");

fn void set_module_identifier(
  LLVMModuleRef m, 
  CChar* ident, 
  usz len)
@extern("LLVMSetModuleIdentifier");

fn CChar* get_source_file_name(
  LLVMModuleRef m, 
  usz* len)
@extern("LLVMGetSourceFileName");

fn void set_source_file_name(
  LLVMModuleRef m, 
  CChar* name, 
  usz len)
@extern("LLVMSetSourceFileName");

fn CChar* get_data_layout_str(
  LLVMModuleRef m)
@extern("LLVMGetDataLayoutStr");

fn CChar* get_data_layout(
  LLVMModuleRef m)
@extern("LLVMGetDataLayout");

fn void set_data_layout(
  LLVMModuleRef m, 
  CChar* data_layout_str)
@extern("LLVMSetDataLayout");

fn CChar* get_target(
  LLVMModuleRef m)
@extern("LLVMGetTarget");

fn void set_target(
  LLVMModuleRef m, 
  CChar* triple)
@extern("LLVMSetTarget");

fn LLVMModuleFlagEntry* copy_module_flags_metadata(
  LLVMModuleRef m, 
  usz* len)
@extern("LLVMCopyModuleFlagsMetadata");

fn void dispose_module_flags_metadata(
  LLVMModuleFlagEntry* entries)
@extern("LLVMDisposeModuleFlagsMetadata");

fn LLVMModuleFlagBehavior module_flag_entries_get_flag_behavior(
  LLVMModuleFlagEntry* entries, 
  CUInt index)
@extern("LLVMModuleFlagEntriesGetFlagBehavior");

fn CChar* module_flag_entries_get_key(
  LLVMModuleFlagEntry* entries, 
  CUInt index, 
  usz* len)
@extern("LLVMModuleFlagEntriesGetKey");

fn LLVMMetadataRef module_flag_entries_get_metadata(
  LLVMModuleFlagEntry* entries, 
  CUInt index)
@extern("LLVMModuleFlagEntriesGetMetadata");

fn LLVMMetadataRef get_module_flag(
  LLVMModuleRef m, 
  CChar* key, 
  usz key_len)
@extern("LLVMGetModuleFlag");

fn void add_module_flag(
  LLVMModuleRef m, 
  LLVMModuleFlagBehavior behavior, 
  CChar* key, 
  usz key_len, 
  LLVMMetadataRef val)
@extern("LLVMAddModuleFlag");

fn void dump_module(
  LLVMModuleRef m)
@extern("LLVMDumpModule");

fn LLVMBool print_module_to_file(
  LLVMModuleRef m, 
  CChar* filename, 
  CChar** error_message)
@extern("LLVMPrintModuleToFile");

fn CChar* print_module_to_string(
  LLVMModuleRef m)
@extern("LLVMPrintModuleToString");

fn CChar* get_module_inline_asm(
  LLVMModuleRef m, 
  usz* len)
@extern("LLVMGetModuleInlineAsm");

fn void set_module_inline_asm_2(
  LLVMModuleRef m, 
  CChar* asm_, 
  usz len)
@extern("LLVMSetModuleInlineAsm2");

fn void append_module_inline_asm(
  LLVMModuleRef m, 
  CChar* asm_, 
  usz len)
@extern("LLVMAppendModuleInlineAsm");

fn LLVMValueRef get_inline_asm(
  LLVMTypeRef ty, 
  CChar* asm_string, 
  usz asm_string_size, 
  CChar* constraints, 
  usz constraints_size, 
  LLVMBool has_side_effects, 
  LLVMBool is_align_stack, 
  LLVMInlineAsmDialect dialect, 
  LLVMBool can_throw)
@extern("LLVMGetInlineAsm");

fn CChar* get_inline_asm_asm_string(
  LLVMValueRef inline_asm_val, 
  usz* len)
@extern("LLVMGetInlineAsmAsmString");

fn CChar* get_inline_asm_constraint_string(
  LLVMValueRef inline_asm_val, 
  usz* len)
@extern("LLVMGetInlineAsmConstraintString");

fn LLVMInlineAsmDialect get_inline_asm_dialect(
  LLVMValueRef inline_asm_val)
@extern("LLVMGetInlineAsmDialect");

fn LLVMTypeRef get_inline_asm_function_type(
  LLVMValueRef inline_asm_val)
@extern("LLVMGetInlineAsmFunctionType");

fn LLVMBool get_inline_asm_has_side_effects(
  LLVMValueRef inline_asm_val)
@extern("LLVMGetInlineAsmHasSideEffects");

fn LLVMBool get_inline_asm_needs_aligned_stack(
  LLVMValueRef inline_asm_val)
@extern("LLVMGetInlineAsmNeedsAlignedStack");

fn LLVMBool get_inline_asm_can_unwind(
  LLVMValueRef inline_asm_val)
@extern("LLVMGetInlineAsmCanUnwind");

fn LLVMContextRef get_module_context(
  LLVMModuleRef m)
@extern("LLVMGetModuleContext");

fn LLVMTypeRef get_type_by_name(
  LLVMModuleRef m, 
  CChar* name)
@extern("LLVMGetTypeByName");

fn LLVMNamedMDNodeRef get_first_named_metadata(
  LLVMModuleRef m)
@extern("LLVMGetFirstNamedMetadata");

fn LLVMNamedMDNodeRef get_last_named_metadata(
  LLVMModuleRef m)
@extern("LLVMGetLastNamedMetadata");

fn LLVMNamedMDNodeRef get_next_named_metadata(
  LLVMNamedMDNodeRef named_md_node)
@extern("LLVMGetNextNamedMetadata");

fn LLVMNamedMDNodeRef get_previous_named_metadata(
  LLVMNamedMDNodeRef named_md_node)
@extern("LLVMGetPreviousNamedMetadata");

fn LLVMNamedMDNodeRef get_named_metadata(
  LLVMModuleRef m, 
  CChar* name, 
  usz name_len)
@extern("LLVMGetNamedMetadata");

fn LLVMNamedMDNodeRef get_or_insert_named_metadata(
  LLVMModuleRef m, 
  CChar* name, 
  usz name_len)
@extern("LLVMGetOrInsertNamedMetadata");

fn CChar* get_named_metadata_name(
  LLVMNamedMDNodeRef named_md, 
  usz* name_len)
@extern("LLVMGetNamedMetadataName");

fn CUInt get_named_metadata_num_operands(
  LLVMModuleRef m, 
  CChar* name)
@extern("LLVMGetNamedMetadataNumOperands");

fn void get_named_metadata_operands(
  LLVMModuleRef m, 
  CChar* name, 
  LLVMValueRef* dest)
@extern("LLVMGetNamedMetadataOperands");

fn void add_named_metadata_operand(
  LLVMModuleRef m, 
  CChar* name, 
  LLVMValueRef val)
@extern("LLVMAddNamedMetadataOperand");

fn CChar* get_debug_loc_directory(
  LLVMValueRef val, 
  CUInt* length)
@extern("LLVMGetDebugLocDirectory");

fn CChar* get_debug_loc_filename(
  LLVMValueRef val, 
  CUInt* length)
@extern("LLVMGetDebugLocFilename");

fn CUInt get_debug_loc_line(
  LLVMValueRef val)
@extern("LLVMGetDebugLocLine");

fn CUInt get_debug_loc_column(
  LLVMValueRef val)
@extern("LLVMGetDebugLocColumn");

fn LLVMValueRef add_function(
  LLVMModuleRef m, 
  CChar* name, 
  LLVMTypeRef function_ty)
@extern("LLVMAddFunction");

fn LLVMValueRef get_named_function(
  LLVMModuleRef m, 
  CChar* name)
@extern("LLVMGetNamedFunction");

fn LLVMValueRef get_named_function_with_length(
  LLVMModuleRef m, 
  CChar* name, 
  usz length)
@extern("LLVMGetNamedFunctionWithLength");

fn LLVMValueRef get_first_function(
  LLVMModuleRef m)
@extern("LLVMGetFirstFunction");

fn LLVMValueRef get_last_function(
  LLVMModuleRef m)
@extern("LLVMGetLastFunction");

fn LLVMValueRef get_next_function(
  LLVMValueRef fn_)
@extern("LLVMGetNextFunction");

fn LLVMValueRef get_previous_function(
  LLVMValueRef fn_)
@extern("LLVMGetPreviousFunction");

fn void set_module_inline_asm(
  LLVMModuleRef m, 
  CChar* asm_)
@extern("LLVMSetModuleInlineAsm");

fn LLVMTypeKind get_type_kind(
  LLVMTypeRef ty)
@extern("LLVMGetTypeKind");

fn LLVMBool type_is_sized(
  LLVMTypeRef ty)
@extern("LLVMTypeIsSized");

fn LLVMContextRef get_type_context(
  LLVMTypeRef ty)
@extern("LLVMGetTypeContext");

fn void dump_type(
  LLVMTypeRef val)
@extern("LLVMDumpType");

fn CChar* print_type_to_string(
  LLVMTypeRef val)
@extern("LLVMPrintTypeToString");

fn LLVMTypeRef int_1_type_in_context(
  LLVMContextRef c)
@extern("LLVMInt1TypeInContext");

fn LLVMTypeRef int_8_type_in_context(
  LLVMContextRef c)
@extern("LLVMInt8TypeInContext");

fn LLVMTypeRef int_16_type_in_context(
  LLVMContextRef c)
@extern("LLVMInt16TypeInContext");

fn LLVMTypeRef int_32_type_in_context(
  LLVMContextRef c)
@extern("LLVMInt32TypeInContext");

fn LLVMTypeRef int_64_type_in_context(
  LLVMContextRef c)
@extern("LLVMInt64TypeInContext");

fn LLVMTypeRef int_128_type_in_context(
  LLVMContextRef c)
@extern("LLVMInt128TypeInContext");

fn LLVMTypeRef int_type_in_context(
  LLVMContextRef c, 
  CUInt num_bits)
@extern("LLVMIntTypeInContext");

fn LLVMTypeRef int_1_type()
@extern("LLVMInt1Type");

fn LLVMTypeRef int_8_type()
@extern("LLVMInt8Type");

fn LLVMTypeRef int_16_type()
@extern("LLVMInt16Type");

fn LLVMTypeRef int_32_type()
@extern("LLVMInt32Type");

fn LLVMTypeRef int_64_type()
@extern("LLVMInt64Type");

fn LLVMTypeRef int_128_type()
@extern("LLVMInt128Type");

fn LLVMTypeRef int_type(
  CUInt num_bits)
@extern("LLVMIntType");

fn CUInt get_int_type_width(
  LLVMTypeRef integer_ty)
@extern("LLVMGetIntTypeWidth");

fn LLVMTypeRef half_type_in_context(
  LLVMContextRef c)
@extern("LLVMHalfTypeInContext");

fn LLVMTypeRef b_float_type_in_context(
  LLVMContextRef c)
@extern("LLVMBFloatTypeInContext");

fn LLVMTypeRef float_type_in_context(
  LLVMContextRef c)
@extern("LLVMFloatTypeInContext");

fn LLVMTypeRef double_type_in_context(
  LLVMContextRef c)
@extern("LLVMDoubleTypeInContext");

fn LLVMTypeRef x86_fp_8_0_type_in_context(
  LLVMContextRef c)
@extern("LLVMX86FP80TypeInContext");

fn LLVMTypeRef fp_1_28_type_in_context(
  LLVMContextRef c)
@extern("LLVMFP128TypeInContext");

fn LLVMTypeRef ppcfp_1_28_type_in_context(
  LLVMContextRef c)
@extern("LLVMPPCFP128TypeInContext");

fn LLVMTypeRef half_type()
@extern("LLVMHalfType");

fn LLVMTypeRef b_float_type()
@extern("LLVMBFloatType");

fn LLVMTypeRef float_type()
@extern("LLVMFloatType");

fn LLVMTypeRef double_type()
@extern("LLVMDoubleType");

fn LLVMTypeRef x86_fp_8_0_type()
@extern("LLVMX86FP80Type");

fn LLVMTypeRef fp_1_28_type()
@extern("LLVMFP128Type");

fn LLVMTypeRef ppcfp_1_28_type()
@extern("LLVMPPCFP128Type");

fn LLVMTypeRef function_type(
  LLVMTypeRef return_type, 
  LLVMTypeRef* param_types, 
  CUInt param_count, 
  LLVMBool is_var_arg)
@extern("LLVMFunctionType");

fn LLVMBool is_function_var_arg(
  LLVMTypeRef function_ty)
@extern("LLVMIsFunctionVarArg");

fn LLVMTypeRef get_return_type(
  LLVMTypeRef function_ty)
@extern("LLVMGetReturnType");

fn CUInt count_param_types(
  LLVMTypeRef function_ty)
@extern("LLVMCountParamTypes");

fn void get_param_types(
  LLVMTypeRef function_ty, 
  LLVMTypeRef* dest)
@extern("LLVMGetParamTypes");

fn LLVMTypeRef struct_type_in_context(
  LLVMContextRef c, 
  LLVMTypeRef* element_types, 
  CUInt element_count, 
  LLVMBool packed)
@extern("LLVMStructTypeInContext");

fn LLVMTypeRef struct_type(
  LLVMTypeRef* element_types, 
  CUInt element_count, 
  LLVMBool packed)
@extern("LLVMStructType");

fn LLVMTypeRef struct_create_named(
  LLVMContextRef c, 
  CChar* name)
@extern("LLVMStructCreateNamed");

fn CChar* get_struct_name(
  LLVMTypeRef ty)
@extern("LLVMGetStructName");

fn void struct_set_body(
  LLVMTypeRef struct_ty, 
  LLVMTypeRef* element_types, 
  CUInt element_count, 
  LLVMBool packed)
@extern("LLVMStructSetBody");

fn CUInt count_struct_element_types(
  LLVMTypeRef struct_ty)
@extern("LLVMCountStructElementTypes");

fn void get_struct_element_types(
  LLVMTypeRef struct_ty, 
  LLVMTypeRef* dest)
@extern("LLVMGetStructElementTypes");

fn LLVMTypeRef struct_get_type_at_index(
  LLVMTypeRef struct_ty, 
  CUInt i)
@extern("LLVMStructGetTypeAtIndex");

fn LLVMBool is_packed_struct(
  LLVMTypeRef struct_ty)
@extern("LLVMIsPackedStruct");

fn LLVMBool is_opaque_struct(
  LLVMTypeRef struct_ty)
@extern("LLVMIsOpaqueStruct");

fn LLVMBool is_literal_struct(
  LLVMTypeRef struct_ty)
@extern("LLVMIsLiteralStruct");

fn LLVMTypeRef get_element_type(
  LLVMTypeRef ty)
@extern("LLVMGetElementType");

fn void get_subtypes(
  LLVMTypeRef tp, 
  LLVMTypeRef* arr)
@extern("LLVMGetSubtypes");

fn CUInt get_num_contained_types(
  LLVMTypeRef tp)
@extern("LLVMGetNumContainedTypes");

fn LLVMTypeRef array_type(
  LLVMTypeRef element_type, 
  CUInt element_count)
@extern("LLVMArrayType");

fn LLVMTypeRef array_type_2(
  LLVMTypeRef element_type, 
  ulong element_count)
@extern("LLVMArrayType2");

fn CUInt get_array_length(
  LLVMTypeRef array_ty)
@extern("LLVMGetArrayLength");

fn ulong get_array_length_2(
  LLVMTypeRef array_ty)
@extern("LLVMGetArrayLength2");

fn LLVMTypeRef pointer_type(
  LLVMTypeRef element_type, 
  CUInt address_space)
@extern("LLVMPointerType");

fn LLVMBool pointer_type_is_opaque(
  LLVMTypeRef ty)
@extern("LLVMPointerTypeIsOpaque");

fn LLVMTypeRef pointer_type_in_context(
  LLVMContextRef c, 
  CUInt address_space)
@extern("LLVMPointerTypeInContext");

fn CUInt get_pointer_address_space(
  LLVMTypeRef pointer_ty)
@extern("LLVMGetPointerAddressSpace");

fn LLVMTypeRef vector_type(
  LLVMTypeRef element_type, 
  CUInt element_count)
@extern("LLVMVectorType");

fn LLVMTypeRef scalable_vector_type(
  LLVMTypeRef element_type, 
  CUInt element_count)
@extern("LLVMScalableVectorType");

fn CUInt get_vector_size(
  LLVMTypeRef vector_ty)
@extern("LLVMGetVectorSize");

fn LLVMValueRef get_constant_ptr_auth_pointer(
  LLVMValueRef ptr_auth)
@extern("LLVMGetConstantPtrAuthPointer");

fn LLVMValueRef get_constant_ptr_auth_key(
  LLVMValueRef ptr_auth)
@extern("LLVMGetConstantPtrAuthKey");

fn LLVMValueRef get_constant_ptr_auth_discriminator(
  LLVMValueRef ptr_auth)
@extern("LLVMGetConstantPtrAuthDiscriminator");

fn LLVMValueRef get_constant_ptr_auth_addr_discriminator(
  LLVMValueRef ptr_auth)
@extern("LLVMGetConstantPtrAuthAddrDiscriminator");

fn LLVMTypeRef void_type_in_context(
  LLVMContextRef c)
@extern("LLVMVoidTypeInContext");

fn LLVMTypeRef label_type_in_context(
  LLVMContextRef c)
@extern("LLVMLabelTypeInContext");

fn LLVMTypeRef x86_amx_type_in_context(
  LLVMContextRef c)
@extern("LLVMX86AMXTypeInContext");

fn LLVMTypeRef token_type_in_context(
  LLVMContextRef c)
@extern("LLVMTokenTypeInContext");

fn LLVMTypeRef metadata_type_in_context(
  LLVMContextRef c)
@extern("LLVMMetadataTypeInContext");

fn LLVMTypeRef void_type()
@extern("LLVMVoidType");

fn LLVMTypeRef label_type()
@extern("LLVMLabelType");

fn LLVMTypeRef x86_amx_type()
@extern("LLVMX86AMXType");

fn LLVMTypeRef target_ext_type_in_context(
  LLVMContextRef c, 
  CChar* name, 
  LLVMTypeRef* type_params, 
  CUInt type_param_count, 
  CUInt* int_params, 
  CUInt int_param_count)
@extern("LLVMTargetExtTypeInContext");

fn CChar* get_target_ext_type_name(
  LLVMTypeRef target_ext_ty)
@extern("LLVMGetTargetExtTypeName");

fn CUInt get_target_ext_type_num_type_params(
  LLVMTypeRef target_ext_ty)
@extern("LLVMGetTargetExtTypeNumTypeParams");

fn LLVMTypeRef get_target_ext_type_type_param(
  LLVMTypeRef target_ext_ty, 
  CUInt idx)
@extern("LLVMGetTargetExtTypeTypeParam");

fn CUInt get_target_ext_type_num_int_params(
  LLVMTypeRef target_ext_ty)
@extern("LLVMGetTargetExtTypeNumIntParams");

fn CUInt get_target_ext_type_int_param(
  LLVMTypeRef target_ext_ty, 
  CUInt idx)
@extern("LLVMGetTargetExtTypeIntParam");

fn LLVMTypeRef type_of(
  LLVMValueRef val)
@extern("LLVMTypeOf");

fn LLVMValueKind get_value_kind(
  LLVMValueRef val)
@extern("LLVMGetValueKind");

fn CChar* get_value_name_2(
  LLVMValueRef val, 
  usz* length)
@extern("LLVMGetValueName2");

fn void set_value_name_2(
  LLVMValueRef val, 
  CChar* name, 
  usz name_len)
@extern("LLVMSetValueName2");

fn void dump_value(
  LLVMValueRef val)
@extern("LLVMDumpValue");

fn CChar* print_value_to_string(
  LLVMValueRef val)
@extern("LLVMPrintValueToString");

fn LLVMContextRef get_value_context(
  LLVMValueRef val)
@extern("LLVMGetValueContext");

fn CChar* print_dbg_record_to_string(
  LLVMDbgRecordRef record)
@extern("LLVMPrintDbgRecordToString");

fn void replace_all_uses_with(
  LLVMValueRef old_val, 
  LLVMValueRef new_val)
@extern("LLVMReplaceAllUsesWith");

fn LLVMBool is_constant(
  LLVMValueRef val)
@extern("LLVMIsConstant");

fn LLVMBool is_undef(
  LLVMValueRef val)
@extern("LLVMIsUndef");

fn LLVMBool is_poison(
  LLVMValueRef val)
@extern("LLVMIsPoison");

fn LLVMValueRef is_a_argument(
  LLVMValueRef val)
@extern("LLVMIsAArgument");

fn LLVMValueRef is_a_basic_block(
  LLVMValueRef val)
@extern("LLVMIsABasicBlock");

fn LLVMValueRef is_a_inline_asm(
  LLVMValueRef val)
@extern("LLVMIsAInlineAsm");

fn LLVMValueRef is_a_user(
  LLVMValueRef val)
@extern("LLVMIsAUser");

fn LLVMValueRef is_a_constant(
  LLVMValueRef val)
@extern("LLVMIsAConstant");

fn LLVMValueRef is_a_block_address(
  LLVMValueRef val)
@extern("LLVMIsABlockAddress");

fn LLVMValueRef is_a_constant_aggregate_zero(
  LLVMValueRef val)
@extern("LLVMIsAConstantAggregateZero");

fn LLVMValueRef is_a_constant_array(
  LLVMValueRef val)
@extern("LLVMIsAConstantArray");

fn LLVMValueRef is_a_constant_data_sequential(
  LLVMValueRef val)
@extern("LLVMIsAConstantDataSequential");

fn LLVMValueRef is_a_constant_data_array(
  LLVMValueRef val)
@extern("LLVMIsAConstantDataArray");

fn LLVMValueRef is_a_constant_data_vector(
  LLVMValueRef val)
@extern("LLVMIsAConstantDataVector");

fn LLVMValueRef is_a_constant_expr(
  LLVMValueRef val)
@extern("LLVMIsAConstantExpr");

fn LLVMValueRef is_a_constant_fp(
  LLVMValueRef val)
@extern("LLVMIsAConstantFP");

fn LLVMValueRef is_a_constant_int(
  LLVMValueRef val)
@extern("LLVMIsAConstantInt");

fn LLVMValueRef is_a_constant_pointer_null(
  LLVMValueRef val)
@extern("LLVMIsAConstantPointerNull");

fn LLVMValueRef is_a_constant_struct(
  LLVMValueRef val)
@extern("LLVMIsAConstantStruct");

fn LLVMValueRef is_a_constant_token_none(
  LLVMValueRef val)
@extern("LLVMIsAConstantTokenNone");

fn LLVMValueRef is_a_constant_vector(
  LLVMValueRef val)
@extern("LLVMIsAConstantVector");

fn LLVMValueRef is_a_constant_ptr_auth(
  LLVMValueRef val)
@extern("LLVMIsAConstantPtrAuth");

fn LLVMValueRef is_a_global_value(
  LLVMValueRef val)
@extern("LLVMIsAGlobalValue");

fn LLVMValueRef is_a_global_alias(
  LLVMValueRef val)
@extern("LLVMIsAGlobalAlias");

fn LLVMValueRef is_a_global_object(
  LLVMValueRef val)
@extern("LLVMIsAGlobalObject");

fn LLVMValueRef is_a_function(
  LLVMValueRef val)
@extern("LLVMIsAFunction");

fn LLVMValueRef is_a_global_variable(
  LLVMValueRef val)
@extern("LLVMIsAGlobalVariable");

fn LLVMValueRef is_a_global_i_func(
  LLVMValueRef val)
@extern("LLVMIsAGlobalIFunc");

fn LLVMValueRef is_a_undef_value(
  LLVMValueRef val)
@extern("LLVMIsAUndefValue");

fn LLVMValueRef is_a_poison_value(
  LLVMValueRef val)
@extern("LLVMIsAPoisonValue");

fn LLVMValueRef is_a_instruction(
  LLVMValueRef val)
@extern("LLVMIsAInstruction");

fn LLVMValueRef is_a_unary_operator(
  LLVMValueRef val)
@extern("LLVMIsAUnaryOperator");

fn LLVMValueRef is_a_binary_operator(
  LLVMValueRef val)
@extern("LLVMIsABinaryOperator");

fn LLVMValueRef is_a_call_inst(
  LLVMValueRef val)
@extern("LLVMIsACallInst");

fn LLVMValueRef is_a_intrinsic_inst(
  LLVMValueRef val)
@extern("LLVMIsAIntrinsicInst");

fn LLVMValueRef is_a_dbg_info_intrinsic(
  LLVMValueRef val)
@extern("LLVMIsADbgInfoIntrinsic");

fn LLVMValueRef is_a_dbg_variable_intrinsic(
  LLVMValueRef val)
@extern("LLVMIsADbgVariableIntrinsic");

fn LLVMValueRef is_a_dbg_declare_inst(
  LLVMValueRef val)
@extern("LLVMIsADbgDeclareInst");

fn LLVMValueRef is_a_dbg_label_inst(
  LLVMValueRef val)
@extern("LLVMIsADbgLabelInst");

fn LLVMValueRef is_a_mem_intrinsic(
  LLVMValueRef val)
@extern("LLVMIsAMemIntrinsic");

fn LLVMValueRef is_a_mem_cpy_inst(
  LLVMValueRef val)
@extern("LLVMIsAMemCpyInst");

fn LLVMValueRef is_a_mem_move_inst(
  LLVMValueRef val)
@extern("LLVMIsAMemMoveInst");

fn LLVMValueRef is_a_mem_set_inst(
  LLVMValueRef val)
@extern("LLVMIsAMemSetInst");

fn LLVMValueRef is_a_cmp_inst(
  LLVMValueRef val)
@extern("LLVMIsACmpInst");

fn LLVMValueRef is_af_cmp_inst(
  LLVMValueRef val)
@extern("LLVMIsAFCmpInst");

fn LLVMValueRef is_ai_cmp_inst(
  LLVMValueRef val)
@extern("LLVMIsAICmpInst");

fn LLVMValueRef is_a_extract_element_inst(
  LLVMValueRef val)
@extern("LLVMIsAExtractElementInst");

fn LLVMValueRef is_a_get_element_ptr_inst(
  LLVMValueRef val)
@extern("LLVMIsAGetElementPtrInst");

fn LLVMValueRef is_a_insert_element_inst(
  LLVMValueRef val)
@extern("LLVMIsAInsertElementInst");

fn LLVMValueRef is_a_insert_value_inst(
  LLVMValueRef val)
@extern("LLVMIsAInsertValueInst");

fn LLVMValueRef is_a_landing_pad_inst(
  LLVMValueRef val)
@extern("LLVMIsALandingPadInst");

fn LLVMValueRef is_aphi_node(
  LLVMValueRef val)
@extern("LLVMIsAPHINode");

fn LLVMValueRef is_a_select_inst(
  LLVMValueRef val)
@extern("LLVMIsASelectInst");

fn LLVMValueRef is_a_shuffle_vector_inst(
  LLVMValueRef val)
@extern("LLVMIsAShuffleVectorInst");

fn LLVMValueRef is_a_store_inst(
  LLVMValueRef val)
@extern("LLVMIsAStoreInst");

fn LLVMValueRef is_a_branch_inst(
  LLVMValueRef val)
@extern("LLVMIsABranchInst");

fn LLVMValueRef is_a_indirect_br_inst(
  LLVMValueRef val)
@extern("LLVMIsAIndirectBrInst");

fn LLVMValueRef is_a_invoke_inst(
  LLVMValueRef val)
@extern("LLVMIsAInvokeInst");

fn LLVMValueRef is_a_return_inst(
  LLVMValueRef val)
@extern("LLVMIsAReturnInst");

fn LLVMValueRef is_a_switch_inst(
  LLVMValueRef val)
@extern("LLVMIsASwitchInst");

fn LLVMValueRef is_a_unreachable_inst(
  LLVMValueRef val)
@extern("LLVMIsAUnreachableInst");

fn LLVMValueRef is_a_resume_inst(
  LLVMValueRef val)
@extern("LLVMIsAResumeInst");

fn LLVMValueRef is_a_cleanup_return_inst(
  LLVMValueRef val)
@extern("LLVMIsACleanupReturnInst");

fn LLVMValueRef is_a_catch_return_inst(
  LLVMValueRef val)
@extern("LLVMIsACatchReturnInst");

fn LLVMValueRef is_a_catch_switch_inst(
  LLVMValueRef val)
@extern("LLVMIsACatchSwitchInst");

fn LLVMValueRef is_a_call_br_inst(
  LLVMValueRef val)
@extern("LLVMIsACallBrInst");

fn LLVMValueRef is_a_funclet_pad_inst(
  LLVMValueRef val)
@extern("LLVMIsAFuncletPadInst");

fn LLVMValueRef is_a_catch_pad_inst(
  LLVMValueRef val)
@extern("LLVMIsACatchPadInst");

fn LLVMValueRef is_a_cleanup_pad_inst(
  LLVMValueRef val)
@extern("LLVMIsACleanupPadInst");

fn LLVMValueRef is_a_unary_instruction(
  LLVMValueRef val)
@extern("LLVMIsAUnaryInstruction");

fn LLVMValueRef is_a_alloca_inst(
  LLVMValueRef val)
@extern("LLVMIsAAllocaInst");

fn LLVMValueRef is_a_cast_inst(
  LLVMValueRef val)
@extern("LLVMIsACastInst");

fn LLVMValueRef is_a_addr_space_cast_inst(
  LLVMValueRef val)
@extern("LLVMIsAAddrSpaceCastInst");

fn LLVMValueRef is_a_bit_cast_inst(
  LLVMValueRef val)
@extern("LLVMIsABitCastInst");

fn LLVMValueRef is_afp_ext_inst(
  LLVMValueRef val)
@extern("LLVMIsAFPExtInst");

fn LLVMValueRef is_afp_to_si_inst(
  LLVMValueRef val)
@extern("LLVMIsAFPToSIInst");

fn LLVMValueRef is_afp_to_ui_inst(
  LLVMValueRef val)
@extern("LLVMIsAFPToUIInst");

fn LLVMValueRef is_afp_trunc_inst(
  LLVMValueRef val)
@extern("LLVMIsAFPTruncInst");

fn LLVMValueRef is_a_int_to_ptr_inst(
  LLVMValueRef val)
@extern("LLVMIsAIntToPtrInst");

fn LLVMValueRef is_a_ptr_to_int_inst(
  LLVMValueRef val)
@extern("LLVMIsAPtrToIntInst");

fn LLVMValueRef is_as_ext_inst(
  LLVMValueRef val)
@extern("LLVMIsASExtInst");

fn LLVMValueRef is_asi_to_fp_inst(
  LLVMValueRef val)
@extern("LLVMIsASIToFPInst");

fn LLVMValueRef is_a_trunc_inst(
  LLVMValueRef val)
@extern("LLVMIsATruncInst");

fn LLVMValueRef is_aui_to_fp_inst(
  LLVMValueRef val)
@extern("LLVMIsAUIToFPInst");

fn LLVMValueRef is_az_ext_inst(
  LLVMValueRef val)
@extern("LLVMIsAZExtInst");

fn LLVMValueRef is_a_extract_value_inst(
  LLVMValueRef val)
@extern("LLVMIsAExtractValueInst");

fn LLVMValueRef is_a_load_inst(
  LLVMValueRef val)
@extern("LLVMIsALoadInst");

fn LLVMValueRef is_ava_arg_inst(
  LLVMValueRef val)
@extern("LLVMIsAVAArgInst");

fn LLVMValueRef is_a_freeze_inst(
  LLVMValueRef val)
@extern("LLVMIsAFreezeInst");

fn LLVMValueRef is_a_atomic_cmp_xchg_inst(
  LLVMValueRef val)
@extern("LLVMIsAAtomicCmpXchgInst");

fn LLVMValueRef is_a_atomic_rmw_inst(
  LLVMValueRef val)
@extern("LLVMIsAAtomicRMWInst");

fn LLVMValueRef is_a_fence_inst(
  LLVMValueRef val)
@extern("LLVMIsAFenceInst");

fn LLVMValueRef is_amd_node(
  LLVMValueRef val)
@extern("LLVMIsAMDNode");

fn LLVMValueRef is_a_value_as_metadata(
  LLVMValueRef val)
@extern("LLVMIsAValueAsMetadata");

fn LLVMValueRef is_amd_string(
  LLVMValueRef val)
@extern("LLVMIsAMDString");

fn CChar* get_value_name(
  LLVMValueRef val)
@extern("LLVMGetValueName");

fn void set_value_name(
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMSetValueName");

fn LLVMUseRef get_first_use(
  LLVMValueRef val)
@extern("LLVMGetFirstUse");

fn LLVMUseRef get_next_use(
  LLVMUseRef u)
@extern("LLVMGetNextUse");

fn LLVMValueRef get_user(
  LLVMUseRef u)
@extern("LLVMGetUser");

fn LLVMValueRef get_used_value(
  LLVMUseRef u)
@extern("LLVMGetUsedValue");

fn LLVMValueRef get_operand(
  LLVMValueRef val, 
  CUInt index)
@extern("LLVMGetOperand");

fn LLVMUseRef get_operand_use(
  LLVMValueRef val, 
  CUInt index)
@extern("LLVMGetOperandUse");

fn void set_operand(
  LLVMValueRef user, 
  CUInt index, 
  LLVMValueRef val)
@extern("LLVMSetOperand");

fn CInt get_num_operands(
  LLVMValueRef val)
@extern("LLVMGetNumOperands");

fn LLVMValueRef const_null(
  LLVMTypeRef ty)
@extern("LLVMConstNull");

fn LLVMValueRef const_all_ones(
  LLVMTypeRef ty)
@extern("LLVMConstAllOnes");

fn LLVMValueRef get_undef(
  LLVMTypeRef ty)
@extern("LLVMGetUndef");

fn LLVMValueRef get_poison(
  LLVMTypeRef ty)
@extern("LLVMGetPoison");

fn LLVMBool is_null(
  LLVMValueRef val)
@extern("LLVMIsNull");

fn LLVMValueRef const_pointer_null(
  LLVMTypeRef ty)
@extern("LLVMConstPointerNull");

fn LLVMValueRef const_int(
  LLVMTypeRef int_ty, 
  CULongLong n, 
  LLVMBool sign_extend)
@extern("LLVMConstInt");

fn LLVMValueRef const_int_of_arbitrary_precision(
  LLVMTypeRef int_ty, 
  CUInt num_words, 
  ulong* words)
@extern("LLVMConstIntOfArbitraryPrecision");

fn LLVMValueRef const_int_of_string(
  LLVMTypeRef int_ty, 
  CChar* text, 
  char radix)
@extern("LLVMConstIntOfString");

fn LLVMValueRef const_int_of_string_and_size(
  LLVMTypeRef int_ty, 
  CChar* text, 
  CUInt s_len, 
  char radix)
@extern("LLVMConstIntOfStringAndSize");

fn LLVMValueRef const_real(
  LLVMTypeRef real_ty, 
  double n)
@extern("LLVMConstReal");

fn LLVMValueRef const_real_of_string(
  LLVMTypeRef real_ty, 
  CChar* text)
@extern("LLVMConstRealOfString");

fn LLVMValueRef const_real_of_string_and_size(
  LLVMTypeRef real_ty, 
  CChar* text, 
  CUInt s_len)
@extern("LLVMConstRealOfStringAndSize");

fn CULongLong const_int_get_z_ext_value(
  LLVMValueRef constant_val)
@extern("LLVMConstIntGetZExtValue");

fn CLongLong const_int_get_s_ext_value(
  LLVMValueRef constant_val)
@extern("LLVMConstIntGetSExtValue");

fn double const_real_get_double(
  LLVMValueRef constant_val, 
  LLVMBool* loses_info)
@extern("LLVMConstRealGetDouble");

fn LLVMValueRef const_string_in_context(
  LLVMContextRef c, 
  CChar* str, 
  CUInt length, 
  LLVMBool dont_null_terminate)
@extern("LLVMConstStringInContext");

fn LLVMValueRef const_string_in_context_2(
  LLVMContextRef c, 
  CChar* str, 
  usz length, 
  LLVMBool dont_null_terminate)
@extern("LLVMConstStringInContext2");

fn LLVMValueRef const_string(
  CChar* str, 
  CUInt length, 
  LLVMBool dont_null_terminate)
@extern("LLVMConstString");

fn LLVMBool is_constant_string(
  LLVMValueRef c)
@extern("LLVMIsConstantString");

fn CChar* get_as_string(
  LLVMValueRef c, 
  usz* length)
@extern("LLVMGetAsString");

fn LLVMValueRef const_struct_in_context(
  LLVMContextRef c, 
  LLVMValueRef* constant_vals, 
  CUInt count, 
  LLVMBool packed)
@extern("LLVMConstStructInContext");

fn LLVMValueRef const_struct(
  LLVMValueRef* constant_vals, 
  CUInt count, 
  LLVMBool packed)
@extern("LLVMConstStruct");

fn LLVMValueRef const_array(
  LLVMTypeRef element_ty, 
  LLVMValueRef* constant_vals, 
  CUInt length)
@extern("LLVMConstArray");

fn LLVMValueRef const_array_2(
  LLVMTypeRef element_ty, 
  LLVMValueRef* constant_vals, 
  ulong length)
@extern("LLVMConstArray2");

fn LLVMValueRef const_named_struct(
  LLVMTypeRef struct_ty, 
  LLVMValueRef* constant_vals, 
  CUInt count)
@extern("LLVMConstNamedStruct");

fn LLVMValueRef get_aggregate_element(
  LLVMValueRef c, 
  CUInt idx)
@extern("LLVMGetAggregateElement");

fn LLVMValueRef get_element_as_constant(
  LLVMValueRef c, 
  CUInt idx)
@extern("LLVMGetElementAsConstant");

fn LLVMValueRef const_vector(
  LLVMValueRef* scalar_constant_vals, 
  CUInt size)
@extern("LLVMConstVector");

fn LLVMValueRef constant_ptr_auth(
  LLVMValueRef ptr, 
  LLVMValueRef key, 
  LLVMValueRef disc, 
  LLVMValueRef addr_disc)
@extern("LLVMConstantPtrAuth");

fn LLVMOpcode get_const_opcode(
  LLVMValueRef constant_val)
@extern("LLVMGetConstOpcode");

fn LLVMValueRef align_of(
  LLVMTypeRef ty)
@extern("LLVMAlignOf");

fn LLVMValueRef size_of(
  LLVMTypeRef ty)
@extern("LLVMSizeOf");

fn LLVMValueRef const_neg(
  LLVMValueRef constant_val)
@extern("LLVMConstNeg");

fn LLVMValueRef const_nsw_neg(
  LLVMValueRef constant_val)
@extern("LLVMConstNSWNeg");

fn LLVMValueRef const_nuw_neg(
  LLVMValueRef constant_val)
@extern("LLVMConstNUWNeg");

fn LLVMValueRef const_not(
  LLVMValueRef constant_val)
@extern("LLVMConstNot");

fn LLVMValueRef const_add(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstAdd");

fn LLVMValueRef const_nsw_add(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNSWAdd");

fn LLVMValueRef const_nuw_add(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNUWAdd");

fn LLVMValueRef const_sub(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstSub");

fn LLVMValueRef const_nsw_sub(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNSWSub");

fn LLVMValueRef const_nuw_sub(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNUWSub");

fn LLVMValueRef const_mul(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstMul");

fn LLVMValueRef const_nsw_mul(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNSWMul");

fn LLVMValueRef const_nuw_mul(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNUWMul");

fn LLVMValueRef const_xor(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstXor");

fn LLVMValueRef const_gep_2(
  LLVMTypeRef ty, 
  LLVMValueRef constant_val, 
  LLVMValueRef* constant_indices, 
  CUInt num_indices)
@extern("LLVMConstGEP2");

fn LLVMValueRef const_in_bounds_gep_2(
  LLVMTypeRef ty, 
  LLVMValueRef constant_val, 
  LLVMValueRef* constant_indices, 
  CUInt num_indices)
@extern("LLVMConstInBoundsGEP2");

fn LLVMValueRef const_gep_with_no_wrap_flags(
  LLVMTypeRef ty, 
  LLVMValueRef constant_val, 
  LLVMValueRef* constant_indices, 
  CUInt num_indices, 
  LLVMGEPNoWrapFlags no_wrap_flags)
@extern("LLVMConstGEPWithNoWrapFlags");

fn LLVMValueRef const_trunc(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstTrunc");

fn LLVMValueRef const_ptr_to_int(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstPtrToInt");

fn LLVMValueRef const_int_to_ptr(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstIntToPtr");

fn LLVMValueRef const_bit_cast(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstBitCast");

fn LLVMValueRef const_addr_space_cast(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstAddrSpaceCast");

fn LLVMValueRef const_trunc_or_bit_cast(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstTruncOrBitCast");

fn LLVMValueRef const_pointer_cast(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstPointerCast");

fn LLVMValueRef const_extract_element(
  LLVMValueRef vector_constant, 
  LLVMValueRef index_constant)
@extern("LLVMConstExtractElement");

fn LLVMValueRef const_insert_element(
  LLVMValueRef vector_constant, 
  LLVMValueRef element_value_constant, 
  LLVMValueRef index_constant)
@extern("LLVMConstInsertElement");

fn LLVMValueRef const_shuffle_vector(
  LLVMValueRef vector_a_constant, 
  LLVMValueRef vector_b_constant, 
  LLVMValueRef mask_constant)
@extern("LLVMConstShuffleVector");

fn LLVMValueRef block_address(
  LLVMValueRef f, 
  LLVMBasicBlockRef bb)
@extern("LLVMBlockAddress");

fn LLVMValueRef get_block_address_function(
  LLVMValueRef block_addr)
@extern("LLVMGetBlockAddressFunction");

fn LLVMBasicBlockRef get_block_address_basic_block(
  LLVMValueRef block_addr)
@extern("LLVMGetBlockAddressBasicBlock");

fn LLVMValueRef const_inline_asm(
  LLVMTypeRef ty, 
  CChar* asm_string, 
  CChar* constraints, 
  LLVMBool has_side_effects, 
  LLVMBool is_align_stack)
@extern("LLVMConstInlineAsm");

fn LLVMModuleRef get_global_parent(
  LLVMValueRef global)
@extern("LLVMGetGlobalParent");

fn LLVMBool is_declaration(
  LLVMValueRef global)
@extern("LLVMIsDeclaration");

fn LLVMLinkage get_linkage(
  LLVMValueRef global)
@extern("LLVMGetLinkage");

fn void set_linkage(
  LLVMValueRef global, 
  LLVMLinkage linkage)
@extern("LLVMSetLinkage");

fn CChar* get_section(
  LLVMValueRef global)
@extern("LLVMGetSection");

fn void set_section(
  LLVMValueRef global, 
  CChar* section)
@extern("LLVMSetSection");

fn LLVMVisibility get_visibility(
  LLVMValueRef global)
@extern("LLVMGetVisibility");

fn void set_visibility(
  LLVMValueRef global, 
  LLVMVisibility viz)
@extern("LLVMSetVisibility");

fn LLVMDLLStorageClass get_dll_storage_class(
  LLVMValueRef global)
@extern("LLVMGetDLLStorageClass");

fn void set_dll_storage_class(
  LLVMValueRef global, 
  LLVMDLLStorageClass class)
@extern("LLVMSetDLLStorageClass");

fn LLVMUnnamedAddr get_unnamed_address(
  LLVMValueRef global)
@extern("LLVMGetUnnamedAddress");

fn void set_unnamed_address(
  LLVMValueRef global, 
  LLVMUnnamedAddr unnamed_addr)
@extern("LLVMSetUnnamedAddress");

fn LLVMTypeRef global_get_value_type(
  LLVMValueRef global)
@extern("LLVMGlobalGetValueType");

fn LLVMBool has_unnamed_addr(
  LLVMValueRef global)
@extern("LLVMHasUnnamedAddr");

fn void set_unnamed_addr(
  LLVMValueRef global, 
  LLVMBool has_unnamed_addr)
@extern("LLVMSetUnnamedAddr");

fn CUInt get_alignment(
  LLVMValueRef v)
@extern("LLVMGetAlignment");

fn void set_alignment(
  LLVMValueRef v, 
  CUInt bytes)
@extern("LLVMSetAlignment");

fn void global_set_metadata(
  LLVMValueRef global, 
  CUInt kind, 
  LLVMMetadataRef md)
@extern("LLVMGlobalSetMetadata");

fn void global_erase_metadata(
  LLVMValueRef global, 
  CUInt kind)
@extern("LLVMGlobalEraseMetadata");

fn void global_clear_metadata(
  LLVMValueRef global)
@extern("LLVMGlobalClearMetadata");

fn LLVMValueMetadataEntry* global_copy_all_metadata(
  LLVMValueRef value, 
  usz* num_entries)
@extern("LLVMGlobalCopyAllMetadata");

fn void dispose_value_metadata_entries(
  LLVMValueMetadataEntry* entries)
@extern("LLVMDisposeValueMetadataEntries");

fn CUInt value_metadata_entries_get_kind(
  LLVMValueMetadataEntry* entries, 
  CUInt index)
@extern("LLVMValueMetadataEntriesGetKind");

fn LLVMMetadataRef value_metadata_entries_get_metadata(
  LLVMValueMetadataEntry* entries, 
  CUInt index)
@extern("LLVMValueMetadataEntriesGetMetadata");

fn LLVMValueRef add_global(
  LLVMModuleRef m, 
  LLVMTypeRef ty, 
  CChar* name)
@extern("LLVMAddGlobal");

fn LLVMValueRef add_global_in_address_space(
  LLVMModuleRef m, 
  LLVMTypeRef ty, 
  CChar* name, 
  CUInt address_space)
@extern("LLVMAddGlobalInAddressSpace");

fn LLVMValueRef get_named_global(
  LLVMModuleRef m, 
  CChar* name)
@extern("LLVMGetNamedGlobal");

fn LLVMValueRef get_named_global_with_length(
  LLVMModuleRef m, 
  CChar* name, 
  usz length)
@extern("LLVMGetNamedGlobalWithLength");

fn LLVMValueRef get_first_global(
  LLVMModuleRef m)
@extern("LLVMGetFirstGlobal");

fn LLVMValueRef get_last_global(
  LLVMModuleRef m)
@extern("LLVMGetLastGlobal");

fn LLVMValueRef get_next_global(
  LLVMValueRef global_var)
@extern("LLVMGetNextGlobal");

fn LLVMValueRef get_previous_global(
  LLVMValueRef global_var)
@extern("LLVMGetPreviousGlobal");

fn void delete_global(
  LLVMValueRef global_var)
@extern("LLVMDeleteGlobal");

fn LLVMValueRef get_initializer(
  LLVMValueRef global_var)
@extern("LLVMGetInitializer");

fn void set_initializer(
  LLVMValueRef global_var, 
  LLVMValueRef constant_val)
@extern("LLVMSetInitializer");

fn LLVMBool is_thread_local(
  LLVMValueRef global_var)
@extern("LLVMIsThreadLocal");

fn void set_thread_local(
  LLVMValueRef global_var, 
  LLVMBool is_thread_local)
@extern("LLVMSetThreadLocal");

fn LLVMBool is_global_constant(
  LLVMValueRef global_var)
@extern("LLVMIsGlobalConstant");

fn void set_global_constant(
  LLVMValueRef global_var, 
  LLVMBool is_constant)
@extern("LLVMSetGlobalConstant");

fn LLVMThreadLocalMode get_thread_local_mode(
  LLVMValueRef global_var)
@extern("LLVMGetThreadLocalMode");

fn void set_thread_local_mode(
  LLVMValueRef global_var, 
  LLVMThreadLocalMode mode)
@extern("LLVMSetThreadLocalMode");

fn LLVMBool is_externally_initialized(
  LLVMValueRef global_var)
@extern("LLVMIsExternallyInitialized");

fn void set_externally_initialized(
  LLVMValueRef global_var, 
  LLVMBool is_ext_init)
@extern("LLVMSetExternallyInitialized");

fn LLVMValueRef add_alias_2(
  LLVMModuleRef m, 
  LLVMTypeRef value_ty, 
  CUInt addr_space, 
  LLVMValueRef aliasee, 
  CChar* name)
@extern("LLVMAddAlias2");

fn LLVMValueRef get_named_global_alias(
  LLVMModuleRef m, 
  CChar* name, 
  usz name_len)
@extern("LLVMGetNamedGlobalAlias");

fn LLVMValueRef get_first_global_alias(
  LLVMModuleRef m)
@extern("LLVMGetFirstGlobalAlias");

fn LLVMValueRef get_last_global_alias(
  LLVMModuleRef m)
@extern("LLVMGetLastGlobalAlias");

fn LLVMValueRef get_next_global_alias(
  LLVMValueRef ga)
@extern("LLVMGetNextGlobalAlias");

fn LLVMValueRef get_previous_global_alias(
  LLVMValueRef ga)
@extern("LLVMGetPreviousGlobalAlias");

fn LLVMValueRef alias_get_aliasee(
  LLVMValueRef alias_)
@extern("LLVMAliasGetAliasee");

fn void alias_set_aliasee(
  LLVMValueRef alias_, 
  LLVMValueRef aliasee)
@extern("LLVMAliasSetAliasee");

fn void delete_function(
  LLVMValueRef fn_)
@extern("LLVMDeleteFunction");

fn LLVMBool has_personality_fn(
  LLVMValueRef fn_)
@extern("LLVMHasPersonalityFn");

fn LLVMValueRef get_personality_fn(
  LLVMValueRef fn_)
@extern("LLVMGetPersonalityFn");

fn void set_personality_fn(
  LLVMValueRef fn_, 
  LLVMValueRef personality_fn)
@extern("LLVMSetPersonalityFn");

fn CUInt lookup_intrinsic_id(
  CChar* name, 
  usz name_len)
@extern("LLVMLookupIntrinsicID");

fn CUInt get_intrinsic_id(
  LLVMValueRef fn_)
@extern("LLVMGetIntrinsicID");

fn LLVMValueRef get_intrinsic_declaration(
  LLVMModuleRef mod, 
  CUInt id, 
  LLVMTypeRef* param_types, 
  usz param_count)
@extern("LLVMGetIntrinsicDeclaration");

fn LLVMTypeRef intrinsic_get_type(
  LLVMContextRef ctx, 
  CUInt id, 
  LLVMTypeRef* param_types, 
  usz param_count)
@extern("LLVMIntrinsicGetType");

fn CChar* intrinsic_get_name(
  CUInt id, 
  usz* name_length)
@extern("LLVMIntrinsicGetName");

fn CChar* intrinsic_copy_overloaded_name(
  CUInt id, 
  LLVMTypeRef* param_types, 
  usz param_count, 
  usz* name_length)
@extern("LLVMIntrinsicCopyOverloadedName");

fn CChar* intrinsic_copy_overloaded_name_2(
  LLVMModuleRef mod, 
  CUInt id, 
  LLVMTypeRef* param_types, 
  usz param_count, 
  usz* name_length)
@extern("LLVMIntrinsicCopyOverloadedName2");

fn LLVMBool intrinsic_is_overloaded(
  CUInt id)
@extern("LLVMIntrinsicIsOverloaded");

fn CUInt get_function_call_conv(
  LLVMValueRef fn_)
@extern("LLVMGetFunctionCallConv");

fn void set_function_call_conv(
  LLVMValueRef fn_, 
  CUInt cc)
@extern("LLVMSetFunctionCallConv");

fn CChar* get_gc(
  LLVMValueRef fn_)
@extern("LLVMGetGC");

fn void set_gc(
  LLVMValueRef fn_, 
  CChar* name)
@extern("LLVMSetGC");

fn LLVMValueRef get_prefix_data(
  LLVMValueRef fn_)
@extern("LLVMGetPrefixData");

fn LLVMBool has_prefix_data(
  LLVMValueRef fn_)
@extern("LLVMHasPrefixData");

fn void set_prefix_data(
  LLVMValueRef fn_, 
  LLVMValueRef prefix_data)
@extern("LLVMSetPrefixData");

fn LLVMValueRef get_prologue_data(
  LLVMValueRef fn_)
@extern("LLVMGetPrologueData");

fn LLVMBool has_prologue_data(
  LLVMValueRef fn_)
@extern("LLVMHasPrologueData");

fn void set_prologue_data(
  LLVMValueRef fn_, 
  LLVMValueRef prologue_data)
@extern("LLVMSetPrologueData");

fn void add_attribute_at_index(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  LLVMAttributeRef a)
@extern("LLVMAddAttributeAtIndex");

fn CUInt get_attribute_count_at_index(
  LLVMValueRef f, 
  LLVMAttributeIndex idx)
@extern("LLVMGetAttributeCountAtIndex");

fn void get_attributes_at_index(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  LLVMAttributeRef* attrs)
@extern("LLVMGetAttributesAtIndex");

fn LLVMAttributeRef get_enum_attribute_at_index(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  CUInt kind_id)
@extern("LLVMGetEnumAttributeAtIndex");

fn LLVMAttributeRef get_string_attribute_at_index(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  CChar* k, 
  CUInt k_len)
@extern("LLVMGetStringAttributeAtIndex");

fn void remove_enum_attribute_at_index(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  CUInt kind_id)
@extern("LLVMRemoveEnumAttributeAtIndex");

fn void remove_string_attribute_at_index(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  CChar* k, 
  CUInt k_len)
@extern("LLVMRemoveStringAttributeAtIndex");

fn void add_target_dependent_function_attr(
  LLVMValueRef fn_, 
  CChar* a, 
  CChar* v)
@extern("LLVMAddTargetDependentFunctionAttr");

fn CUInt count_params(
  LLVMValueRef fn_)
@extern("LLVMCountParams");

fn void get_params(
  LLVMValueRef fn_, 
  LLVMValueRef* params)
@extern("LLVMGetParams");

fn LLVMValueRef get_param(
  LLVMValueRef fn_, 
  CUInt index)
@extern("LLVMGetParam");

fn LLVMValueRef get_param_parent(
  LLVMValueRef inst)
@extern("LLVMGetParamParent");

fn LLVMValueRef get_first_param(
  LLVMValueRef fn_)
@extern("LLVMGetFirstParam");

fn LLVMValueRef get_last_param(
  LLVMValueRef fn_)
@extern("LLVMGetLastParam");

fn LLVMValueRef get_next_param(
  LLVMValueRef arg)
@extern("LLVMGetNextParam");

fn LLVMValueRef get_previous_param(
  LLVMValueRef arg)
@extern("LLVMGetPreviousParam");

fn void set_param_alignment(
  LLVMValueRef arg, 
  CUInt align)
@extern("LLVMSetParamAlignment");

fn LLVMValueRef add_global_i_func(
  LLVMModuleRef m, 
  CChar* name, 
  usz name_len, 
  LLVMTypeRef ty, 
  CUInt addr_space, 
  LLVMValueRef resolver)
@extern("LLVMAddGlobalIFunc");

fn LLVMValueRef get_named_global_i_func(
  LLVMModuleRef m, 
  CChar* name, 
  usz name_len)
@extern("LLVMGetNamedGlobalIFunc");

fn LLVMValueRef get_first_global_i_func(
  LLVMModuleRef m)
@extern("LLVMGetFirstGlobalIFunc");

fn LLVMValueRef get_last_global_i_func(
  LLVMModuleRef m)
@extern("LLVMGetLastGlobalIFunc");

fn LLVMValueRef get_next_global_i_func(
  LLVMValueRef i_func)
@extern("LLVMGetNextGlobalIFunc");

fn LLVMValueRef get_previous_global_i_func(
  LLVMValueRef i_func)
@extern("LLVMGetPreviousGlobalIFunc");

fn LLVMValueRef get_global_i_func_resolver(
  LLVMValueRef i_func)
@extern("LLVMGetGlobalIFuncResolver");

fn void set_global_i_func_resolver(
  LLVMValueRef i_func, 
  LLVMValueRef resolver)
@extern("LLVMSetGlobalIFuncResolver");

fn void erase_global_i_func(
  LLVMValueRef i_func)
@extern("LLVMEraseGlobalIFunc");

fn void remove_global_i_func(
  LLVMValueRef i_func)
@extern("LLVMRemoveGlobalIFunc");

fn LLVMMetadataRef md_string_in_context_2(
  LLVMContextRef c, 
  CChar* str, 
  usz s_len)
@extern("LLVMMDStringInContext2");

fn LLVMMetadataRef md_node_in_context_2(
  LLVMContextRef c, 
  LLVMMetadataRef* m_ds, 
  usz count)
@extern("LLVMMDNodeInContext2");

fn LLVMValueRef metadata_as_value(
  LLVMContextRef c, 
  LLVMMetadataRef md)
@extern("LLVMMetadataAsValue");

fn LLVMMetadataRef value_as_metadata(
  LLVMValueRef val)
@extern("LLVMValueAsMetadata");

fn CChar* get_md_string(
  LLVMValueRef v, 
  CUInt* length)
@extern("LLVMGetMDString");

fn CUInt get_md_node_num_operands(
  LLVMValueRef v)
@extern("LLVMGetMDNodeNumOperands");

fn void get_md_node_operands(
  LLVMValueRef v, 
  LLVMValueRef* dest)
@extern("LLVMGetMDNodeOperands");

fn void replace_md_node_operand_with(
  LLVMValueRef v, 
  CUInt index, 
  LLVMMetadataRef replacement)
@extern("LLVMReplaceMDNodeOperandWith");

fn LLVMValueRef md_string_in_context(
  LLVMContextRef c, 
  CChar* str, 
  CUInt s_len)
@extern("LLVMMDStringInContext");

fn LLVMValueRef md_string(
  CChar* str, 
  CUInt s_len)
@extern("LLVMMDString");

fn LLVMValueRef md_node_in_context(
  LLVMContextRef c, 
  LLVMValueRef* vals, 
  CUInt count)
@extern("LLVMMDNodeInContext");

fn LLVMValueRef md_node(
  LLVMValueRef* vals, 
  CUInt count)
@extern("LLVMMDNode");

fn LLVMOperandBundleRef create_operand_bundle(
  CChar* tag, 
  usz tag_len, 
  LLVMValueRef* args, 
  CUInt num_args)
@extern("LLVMCreateOperandBundle");

fn void dispose_operand_bundle(
  LLVMOperandBundleRef bundle)
@extern("LLVMDisposeOperandBundle");

fn CChar* get_operand_bundle_tag(
  LLVMOperandBundleRef bundle, 
  usz* len)
@extern("LLVMGetOperandBundleTag");

fn CUInt get_num_operand_bundle_args(
  LLVMOperandBundleRef bundle)
@extern("LLVMGetNumOperandBundleArgs");

fn LLVMValueRef get_operand_bundle_arg_at_index(
  LLVMOperandBundleRef bundle, 
  CUInt index)
@extern("LLVMGetOperandBundleArgAtIndex");

fn LLVMValueRef basic_block_as_value(
  LLVMBasicBlockRef bb)
@extern("LLVMBasicBlockAsValue");

fn LLVMBool value_is_basic_block(
  LLVMValueRef val)
@extern("LLVMValueIsBasicBlock");

fn LLVMBasicBlockRef value_as_basic_block(
  LLVMValueRef val)
@extern("LLVMValueAsBasicBlock");

fn CChar* get_basic_block_name(
  LLVMBasicBlockRef bb)
@extern("LLVMGetBasicBlockName");

fn LLVMValueRef get_basic_block_parent(
  LLVMBasicBlockRef bb)
@extern("LLVMGetBasicBlockParent");

fn LLVMValueRef get_basic_block_terminator(
  LLVMBasicBlockRef bb)
@extern("LLVMGetBasicBlockTerminator");

fn CUInt count_basic_blocks(
  LLVMValueRef fn_)
@extern("LLVMCountBasicBlocks");

fn void get_basic_blocks(
  LLVMValueRef fn_, 
  LLVMBasicBlockRef* basic_blocks)
@extern("LLVMGetBasicBlocks");

fn LLVMBasicBlockRef get_first_basic_block(
  LLVMValueRef fn_)
@extern("LLVMGetFirstBasicBlock");

fn LLVMBasicBlockRef get_last_basic_block(
  LLVMValueRef fn_)
@extern("LLVMGetLastBasicBlock");

fn LLVMBasicBlockRef get_next_basic_block(
  LLVMBasicBlockRef bb)
@extern("LLVMGetNextBasicBlock");

fn LLVMBasicBlockRef get_previous_basic_block(
  LLVMBasicBlockRef bb)
@extern("LLVMGetPreviousBasicBlock");

fn LLVMBasicBlockRef get_entry_basic_block(
  LLVMValueRef fn_)
@extern("LLVMGetEntryBasicBlock");

fn void insert_existing_basic_block_after_insert_block(
  LLVMBuilderRef builder, 
  LLVMBasicBlockRef bb)
@extern("LLVMInsertExistingBasicBlockAfterInsertBlock");

fn void append_existing_basic_block(
  LLVMValueRef fn_, 
  LLVMBasicBlockRef bb)
@extern("LLVMAppendExistingBasicBlock");

fn LLVMBasicBlockRef create_basic_block_in_context(
  LLVMContextRef c, 
  CChar* name)
@extern("LLVMCreateBasicBlockInContext");

fn LLVMBasicBlockRef append_basic_block_in_context(
  LLVMContextRef c, 
  LLVMValueRef fn_, 
  CChar* name)
@extern("LLVMAppendBasicBlockInContext");

fn LLVMBasicBlockRef append_basic_block(
  LLVMValueRef fn_, 
  CChar* name)
@extern("LLVMAppendBasicBlock");

fn LLVMBasicBlockRef insert_basic_block_in_context(
  LLVMContextRef c, 
  LLVMBasicBlockRef bb, 
  CChar* name)
@extern("LLVMInsertBasicBlockInContext");

fn LLVMBasicBlockRef insert_basic_block(
  LLVMBasicBlockRef insert_before_bb, 
  CChar* name)
@extern("LLVMInsertBasicBlock");

fn void delete_basic_block(
  LLVMBasicBlockRef bb)
@extern("LLVMDeleteBasicBlock");

fn void remove_basic_block_from_parent(
  LLVMBasicBlockRef bb)
@extern("LLVMRemoveBasicBlockFromParent");

fn void move_basic_block_before(
  LLVMBasicBlockRef bb, 
  LLVMBasicBlockRef move_pos)
@extern("LLVMMoveBasicBlockBefore");

fn void move_basic_block_after(
  LLVMBasicBlockRef bb, 
  LLVMBasicBlockRef move_pos)
@extern("LLVMMoveBasicBlockAfter");

fn LLVMValueRef get_first_instruction(
  LLVMBasicBlockRef bb)
@extern("LLVMGetFirstInstruction");

fn LLVMValueRef get_last_instruction(
  LLVMBasicBlockRef bb)
@extern("LLVMGetLastInstruction");

fn CInt has_metadata(
  LLVMValueRef val)
@extern("LLVMHasMetadata");

fn LLVMValueRef get_metadata(
  LLVMValueRef val, 
  CUInt kind_id)
@extern("LLVMGetMetadata");

fn void set_metadata(
  LLVMValueRef val, 
  CUInt kind_id, 
  LLVMValueRef node)
@extern("LLVMSetMetadata");

fn LLVMValueMetadataEntry* instruction_get_all_metadata_other_than_debug_loc(
  LLVMValueRef instr, 
  usz* num_entries)
@extern("LLVMInstructionGetAllMetadataOtherThanDebugLoc");

fn LLVMBasicBlockRef get_instruction_parent(
  LLVMValueRef inst)
@extern("LLVMGetInstructionParent");

fn LLVMValueRef get_next_instruction(
  LLVMValueRef inst)
@extern("LLVMGetNextInstruction");

fn LLVMValueRef get_previous_instruction(
  LLVMValueRef inst)
@extern("LLVMGetPreviousInstruction");

fn void instruction_remove_from_parent(
  LLVMValueRef inst)
@extern("LLVMInstructionRemoveFromParent");

fn void instruction_erase_from_parent(
  LLVMValueRef inst)
@extern("LLVMInstructionEraseFromParent");

fn void delete_instruction(
  LLVMValueRef inst)
@extern("LLVMDeleteInstruction");

fn LLVMOpcode get_instruction_opcode(
  LLVMValueRef inst)
@extern("LLVMGetInstructionOpcode");

fn LLVMIntPredicate get_i_cmp_predicate(
  LLVMValueRef inst)
@extern("LLVMGetICmpPredicate");

fn LLVMRealPredicate get_f_cmp_predicate(
  LLVMValueRef inst)
@extern("LLVMGetFCmpPredicate");

fn LLVMValueRef instruction_clone(
  LLVMValueRef inst)
@extern("LLVMInstructionClone");

fn LLVMValueRef is_a_terminator_inst(
  LLVMValueRef inst)
@extern("LLVMIsATerminatorInst");

fn LLVMDbgRecordRef get_first_dbg_record(
  LLVMValueRef inst)
@extern("LLVMGetFirstDbgRecord");

fn LLVMDbgRecordRef get_last_dbg_record(
  LLVMValueRef inst)
@extern("LLVMGetLastDbgRecord");

fn LLVMDbgRecordRef get_next_dbg_record(
  LLVMDbgRecordRef dbg_record)
@extern("LLVMGetNextDbgRecord");

fn LLVMDbgRecordRef get_previous_dbg_record(
  LLVMDbgRecordRef dbg_record)
@extern("LLVMGetPreviousDbgRecord");

fn CUInt get_num_arg_operands(
  LLVMValueRef instr)
@extern("LLVMGetNumArgOperands");

fn void set_instruction_call_conv(
  LLVMValueRef instr, 
  CUInt cc)
@extern("LLVMSetInstructionCallConv");

fn CUInt get_instruction_call_conv(
  LLVMValueRef instr)
@extern("LLVMGetInstructionCallConv");

fn void set_instr_param_alignment(
  LLVMValueRef instr, 
  LLVMAttributeIndex idx, 
  CUInt align)
@extern("LLVMSetInstrParamAlignment");

fn void add_call_site_attribute(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  LLVMAttributeRef a)
@extern("LLVMAddCallSiteAttribute");

fn CUInt get_call_site_attribute_count(
  LLVMValueRef c, 
  LLVMAttributeIndex idx)
@extern("LLVMGetCallSiteAttributeCount");

fn void get_call_site_attributes(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  LLVMAttributeRef* attrs)
@extern("LLVMGetCallSiteAttributes");

fn LLVMAttributeRef get_call_site_enum_attribute(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  CUInt kind_id)
@extern("LLVMGetCallSiteEnumAttribute");

fn LLVMAttributeRef get_call_site_string_attribute(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  CChar* k, 
  CUInt k_len)
@extern("LLVMGetCallSiteStringAttribute");

fn void remove_call_site_enum_attribute(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  CUInt kind_id)
@extern("LLVMRemoveCallSiteEnumAttribute");

fn void remove_call_site_string_attribute(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  CChar* k, 
  CUInt k_len)
@extern("LLVMRemoveCallSiteStringAttribute");

fn LLVMTypeRef get_called_function_type(
  LLVMValueRef c)
@extern("LLVMGetCalledFunctionType");

fn LLVMValueRef get_called_value(
  LLVMValueRef instr)
@extern("LLVMGetCalledValue");

fn CUInt get_num_operand_bundles(
  LLVMValueRef c)
@extern("LLVMGetNumOperandBundles");

fn LLVMOperandBundleRef get_operand_bundle_at_index(
  LLVMValueRef c, 
  CUInt index)
@extern("LLVMGetOperandBundleAtIndex");

fn LLVMBool is_tail_call(
  LLVMValueRef call_inst)
@extern("LLVMIsTailCall");

fn void set_tail_call(
  LLVMValueRef call_inst, 
  LLVMBool is_tail_call)
@extern("LLVMSetTailCall");

fn LLVMTailCallKind get_tail_call_kind(
  LLVMValueRef call_inst)
@extern("LLVMGetTailCallKind");

fn void set_tail_call_kind(
  LLVMValueRef call_inst, 
  LLVMTailCallKind kind)
@extern("LLVMSetTailCallKind");

fn LLVMBasicBlockRef get_normal_dest(
  LLVMValueRef invoke_inst)
@extern("LLVMGetNormalDest");

fn LLVMBasicBlockRef get_unwind_dest(
  LLVMValueRef invoke_inst)
@extern("LLVMGetUnwindDest");

fn void set_normal_dest(
  LLVMValueRef invoke_inst, 
  LLVMBasicBlockRef b)
@extern("LLVMSetNormalDest");

fn void set_unwind_dest(
  LLVMValueRef invoke_inst, 
  LLVMBasicBlockRef b)
@extern("LLVMSetUnwindDest");

fn LLVMBasicBlockRef get_call_br_default_dest(
  LLVMValueRef call_br)
@extern("LLVMGetCallBrDefaultDest");

fn CUInt get_call_br_num_indirect_dests(
  LLVMValueRef call_br)
@extern("LLVMGetCallBrNumIndirectDests");

fn LLVMBasicBlockRef get_call_br_indirect_dest(
  LLVMValueRef call_br, 
  CUInt idx)
@extern("LLVMGetCallBrIndirectDest");

fn CUInt get_num_successors(
  LLVMValueRef term)
@extern("LLVMGetNumSuccessors");

fn LLVMBasicBlockRef get_successor(
  LLVMValueRef term, 
  CUInt i)
@extern("LLVMGetSuccessor");

fn void set_successor(
  LLVMValueRef term, 
  CUInt i, 
  LLVMBasicBlockRef block)
@extern("LLVMSetSuccessor");

fn LLVMBool is_conditional(
  LLVMValueRef branch)
@extern("LLVMIsConditional");

fn LLVMValueRef get_condition(
  LLVMValueRef branch)
@extern("LLVMGetCondition");

fn void set_condition(
  LLVMValueRef branch, 
  LLVMValueRef cond)
@extern("LLVMSetCondition");

fn LLVMBasicBlockRef get_switch_default_dest(
  LLVMValueRef switch_instr)
@extern("LLVMGetSwitchDefaultDest");

fn LLVMTypeRef get_allocated_type(
  LLVMValueRef alloca)
@extern("LLVMGetAllocatedType");

fn LLVMBool is_in_bounds(
  LLVMValueRef gep)
@extern("LLVMIsInBounds");

fn void set_is_in_bounds(
  LLVMValueRef gep, 
  LLVMBool in_bounds)
@extern("LLVMSetIsInBounds");

fn LLVMTypeRef get_gep_source_element_type(
  LLVMValueRef gep)
@extern("LLVMGetGEPSourceElementType");

fn LLVMGEPNoWrapFlags gep_get_no_wrap_flags(
  LLVMValueRef gep)
@extern("LLVMGEPGetNoWrapFlags");

fn void gep_set_no_wrap_flags(
  LLVMValueRef gep, 
  LLVMGEPNoWrapFlags no_wrap_flags)
@extern("LLVMGEPSetNoWrapFlags");

fn void add_incoming(
  LLVMValueRef phi_node, 
  LLVMValueRef* incoming_values, 
  LLVMBasicBlockRef* incoming_blocks, 
  CUInt count)
@extern("LLVMAddIncoming");

fn CUInt count_incoming(
  LLVMValueRef phi_node)
@extern("LLVMCountIncoming");

fn LLVMValueRef get_incoming_value(
  LLVMValueRef phi_node, 
  CUInt index)
@extern("LLVMGetIncomingValue");

fn LLVMBasicBlockRef get_incoming_block(
  LLVMValueRef phi_node, 
  CUInt index)
@extern("LLVMGetIncomingBlock");

fn CUInt get_num_indices(
  LLVMValueRef inst)
@extern("LLVMGetNumIndices");

fn CUInt* get_indices(
  LLVMValueRef inst)
@extern("LLVMGetIndices");

fn LLVMBuilderRef create_builder_in_context(
  LLVMContextRef c)
@extern("LLVMCreateBuilderInContext");

fn LLVMBuilderRef create_builder()
@extern("LLVMCreateBuilder");

fn void position_builder(
  LLVMBuilderRef builder, 
  LLVMBasicBlockRef block, 
  LLVMValueRef instr)
@extern("LLVMPositionBuilder");

fn void position_builder_before_dbg_records(
  LLVMBuilderRef builder, 
  LLVMBasicBlockRef block, 
  LLVMValueRef inst)
@extern("LLVMPositionBuilderBeforeDbgRecords");

fn void position_builder_before(
  LLVMBuilderRef builder, 
  LLVMValueRef instr)
@extern("LLVMPositionBuilderBefore");

fn void position_builder_before_instr_and_dbg_records(
  LLVMBuilderRef builder, 
  LLVMValueRef instr)
@extern("LLVMPositionBuilderBeforeInstrAndDbgRecords");

fn void position_builder_at_end(
  LLVMBuilderRef builder, 
  LLVMBasicBlockRef block)
@extern("LLVMPositionBuilderAtEnd");

fn LLVMBasicBlockRef get_insert_block(
  LLVMBuilderRef builder)
@extern("LLVMGetInsertBlock");

fn void clear_insertion_position(
  LLVMBuilderRef builder)
@extern("LLVMClearInsertionPosition");

fn void insert_into_builder(
  LLVMBuilderRef builder, 
  LLVMValueRef instr)
@extern("LLVMInsertIntoBuilder");

fn void insert_into_builder_with_name(
  LLVMBuilderRef builder, 
  LLVMValueRef instr, 
  CChar* name)
@extern("LLVMInsertIntoBuilderWithName");

fn void dispose_builder(
  LLVMBuilderRef builder)
@extern("LLVMDisposeBuilder");

fn LLVMMetadataRef get_current_debug_location_2(
  LLVMBuilderRef builder)
@extern("LLVMGetCurrentDebugLocation2");

fn void set_current_debug_location_2(
  LLVMBuilderRef builder, 
  LLVMMetadataRef loc)
@extern("LLVMSetCurrentDebugLocation2");

fn void set_inst_debug_location(
  LLVMBuilderRef builder, 
  LLVMValueRef inst)
@extern("LLVMSetInstDebugLocation");

fn void add_metadata_to_inst(
  LLVMBuilderRef builder, 
  LLVMValueRef inst)
@extern("LLVMAddMetadataToInst");

fn LLVMMetadataRef builder_get_default_fp_math_tag(
  LLVMBuilderRef builder)
@extern("LLVMBuilderGetDefaultFPMathTag");

fn void builder_set_default_fp_math_tag(
  LLVMBuilderRef builder, 
  LLVMMetadataRef fp_math_tag)
@extern("LLVMBuilderSetDefaultFPMathTag");

fn LLVMContextRef get_builder_context(
  LLVMBuilderRef builder)
@extern("LLVMGetBuilderContext");

fn void set_current_debug_location(
  LLVMBuilderRef builder, 
  LLVMValueRef l)
@extern("LLVMSetCurrentDebugLocation");

fn LLVMValueRef get_current_debug_location(
  LLVMBuilderRef builder)
@extern("LLVMGetCurrentDebugLocation");

fn LLVMValueRef build_ret_void(
  LLVMBuilderRef)
@extern("LLVMBuildRetVoid");

fn LLVMValueRef build_ret(
  LLVMBuilderRef, 
  LLVMValueRef v)
@extern("LLVMBuildRet");

fn LLVMValueRef build_aggregate_ret(
  LLVMBuilderRef, 
  LLVMValueRef* ret_vals, 
  CUInt n)
@extern("LLVMBuildAggregateRet");

fn LLVMValueRef build_br(
  LLVMBuilderRef, 
  LLVMBasicBlockRef dest)
@extern("LLVMBuildBr");

fn LLVMValueRef build_cond_br(
  LLVMBuilderRef, 
  LLVMValueRef if_, 
  LLVMBasicBlockRef then, 
  LLVMBasicBlockRef else_)
@extern("LLVMBuildCondBr");

fn LLVMValueRef build_switch(
  LLVMBuilderRef, 
  LLVMValueRef v, 
  LLVMBasicBlockRef else_, 
  CUInt num_cases)
@extern("LLVMBuildSwitch");

fn LLVMValueRef build_indirect_br(
  LLVMBuilderRef b, 
  LLVMValueRef addr, 
  CUInt num_dests)
@extern("LLVMBuildIndirectBr");

fn LLVMValueRef build_call_br(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef fn_, 
  LLVMBasicBlockRef default_dest, 
  LLVMBasicBlockRef* indirect_dests, 
  CUInt num_indirect_dests, 
  LLVMValueRef* args, 
  CUInt num_args, 
  LLVMOperandBundleRef* bundles, 
  CUInt num_bundles, 
  CChar* name)
@extern("LLVMBuildCallBr");

fn LLVMValueRef build_invoke_2(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  LLVMValueRef fn_, 
  LLVMValueRef* args, 
  CUInt num_args, 
  LLVMBasicBlockRef then, 
  LLVMBasicBlockRef catch_, 
  CChar* name)
@extern("LLVMBuildInvoke2");

fn LLVMValueRef build_invoke_with_operand_bundles(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  LLVMValueRef fn_, 
  LLVMValueRef* args, 
  CUInt num_args, 
  LLVMBasicBlockRef then, 
  LLVMBasicBlockRef catch_, 
  LLVMOperandBundleRef* bundles, 
  CUInt num_bundles, 
  CChar* name)
@extern("LLVMBuildInvokeWithOperandBundles");

fn LLVMValueRef build_unreachable(
  LLVMBuilderRef)
@extern("LLVMBuildUnreachable");

fn LLVMValueRef build_resume(
  LLVMBuilderRef b, 
  LLVMValueRef exn)
@extern("LLVMBuildResume");

fn LLVMValueRef build_landing_pad(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef pers_fn, 
  CUInt num_clauses, 
  CChar* name)
@extern("LLVMBuildLandingPad");

fn LLVMValueRef build_cleanup_ret(
  LLVMBuilderRef b, 
  LLVMValueRef catch_pad, 
  LLVMBasicBlockRef bb)
@extern("LLVMBuildCleanupRet");

fn LLVMValueRef build_catch_ret(
  LLVMBuilderRef b, 
  LLVMValueRef catch_pad, 
  LLVMBasicBlockRef bb)
@extern("LLVMBuildCatchRet");

fn LLVMValueRef build_catch_pad(
  LLVMBuilderRef b, 
  LLVMValueRef parent_pad, 
  LLVMValueRef* args, 
  CUInt num_args, 
  CChar* name)
@extern("LLVMBuildCatchPad");

fn LLVMValueRef build_cleanup_pad(
  LLVMBuilderRef b, 
  LLVMValueRef parent_pad, 
  LLVMValueRef* args, 
  CUInt num_args, 
  CChar* name)
@extern("LLVMBuildCleanupPad");

fn LLVMValueRef build_catch_switch(
  LLVMBuilderRef b, 
  LLVMValueRef parent_pad, 
  LLVMBasicBlockRef unwind_bb, 
  CUInt num_handlers, 
  CChar* name)
@extern("LLVMBuildCatchSwitch");

fn void add_case(
  LLVMValueRef switch_, 
  LLVMValueRef on_val, 
  LLVMBasicBlockRef dest)
@extern("LLVMAddCase");

fn void add_destination(
  LLVMValueRef indirect_br, 
  LLVMBasicBlockRef dest)
@extern("LLVMAddDestination");

fn CUInt get_num_clauses(
  LLVMValueRef landing_pad)
@extern("LLVMGetNumClauses");

fn LLVMValueRef get_clause(
  LLVMValueRef landing_pad, 
  CUInt idx)
@extern("LLVMGetClause");

fn void add_clause(
  LLVMValueRef landing_pad, 
  LLVMValueRef clause_val)
@extern("LLVMAddClause");

fn LLVMBool is_cleanup(
  LLVMValueRef landing_pad)
@extern("LLVMIsCleanup");

fn void set_cleanup(
  LLVMValueRef landing_pad, 
  LLVMBool val)
@extern("LLVMSetCleanup");

fn void add_handler(
  LLVMValueRef catch_switch, 
  LLVMBasicBlockRef dest)
@extern("LLVMAddHandler");

fn CUInt get_num_handlers(
  LLVMValueRef catch_switch)
@extern("LLVMGetNumHandlers");

fn void get_handlers(
  LLVMValueRef catch_switch, 
  LLVMBasicBlockRef* handlers)
@extern("LLVMGetHandlers");

fn LLVMValueRef get_arg_operand(
  LLVMValueRef funclet, 
  CUInt i)
@extern("LLVMGetArgOperand");

fn void set_arg_operand(
  LLVMValueRef funclet, 
  CUInt i, 
  LLVMValueRef value)
@extern("LLVMSetArgOperand");

fn LLVMValueRef get_parent_catch_switch(
  LLVMValueRef catch_pad)
@extern("LLVMGetParentCatchSwitch");

fn void set_parent_catch_switch(
  LLVMValueRef catch_pad, 
  LLVMValueRef catch_switch)
@extern("LLVMSetParentCatchSwitch");

fn LLVMValueRef build_add(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildAdd");

fn LLVMValueRef build_nsw_add(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNSWAdd");

fn LLVMValueRef build_nuw_add(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNUWAdd");

fn LLVMValueRef build_f_add(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFAdd");

fn LLVMValueRef build_sub(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildSub");

fn LLVMValueRef build_nsw_sub(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNSWSub");

fn LLVMValueRef build_nuw_sub(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNUWSub");

fn LLVMValueRef build_f_sub(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFSub");

fn LLVMValueRef build_mul(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildMul");

fn LLVMValueRef build_nsw_mul(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNSWMul");

fn LLVMValueRef build_nuw_mul(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNUWMul");

fn LLVMValueRef build_f_mul(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFMul");

fn LLVMValueRef build_u_div(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildUDiv");

fn LLVMValueRef build_exact_u_div(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildExactUDiv");

fn LLVMValueRef build_s_div(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildSDiv");

fn LLVMValueRef build_exact_s_div(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildExactSDiv");

fn LLVMValueRef build_f_div(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFDiv");

fn LLVMValueRef build_u_rem(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildURem");

fn LLVMValueRef build_s_rem(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildSRem");

fn LLVMValueRef build_f_rem(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFRem");

fn LLVMValueRef build_shl(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildShl");

fn LLVMValueRef build_l_shr(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildLShr");

fn LLVMValueRef build_a_shr(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildAShr");

fn LLVMValueRef build_and(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildAnd");

fn LLVMValueRef build_or(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildOr");

fn LLVMValueRef build_xor(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildXor");

fn LLVMValueRef build_bin_op(
  LLVMBuilderRef b, 
  LLVMOpcode op, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildBinOp");

fn LLVMValueRef build_neg(
  LLVMBuilderRef, 
  LLVMValueRef v, 
  CChar* name)
@extern("LLVMBuildNeg");

fn LLVMValueRef build_nsw_neg(
  LLVMBuilderRef b, 
  LLVMValueRef v, 
  CChar* name)
@extern("LLVMBuildNSWNeg");

fn LLVMValueRef build_nuw_neg(
  LLVMBuilderRef b, 
  LLVMValueRef v, 
  CChar* name)
@extern("LLVMBuildNUWNeg");

fn LLVMValueRef build_f_neg(
  LLVMBuilderRef, 
  LLVMValueRef v, 
  CChar* name)
@extern("LLVMBuildFNeg");

fn LLVMValueRef build_not(
  LLVMBuilderRef, 
  LLVMValueRef v, 
  CChar* name)
@extern("LLVMBuildNot");

fn LLVMBool get_nuw(
  LLVMValueRef arith_inst)
@extern("LLVMGetNUW");

fn void set_nuw(
  LLVMValueRef arith_inst, 
  LLVMBool has_nuw)
@extern("LLVMSetNUW");

fn LLVMBool get_nsw(
  LLVMValueRef arith_inst)
@extern("LLVMGetNSW");

fn void set_nsw(
  LLVMValueRef arith_inst, 
  LLVMBool has_nsw)
@extern("LLVMSetNSW");

fn LLVMBool get_exact(
  LLVMValueRef div_or_shr_inst)
@extern("LLVMGetExact");

fn void set_exact(
  LLVMValueRef div_or_shr_inst, 
  LLVMBool is_exact)
@extern("LLVMSetExact");

fn LLVMBool get_n_neg(
  LLVMValueRef non_neg_inst)
@extern("LLVMGetNNeg");

fn void set_n_neg(
  LLVMValueRef non_neg_inst, 
  LLVMBool is_non_neg)
@extern("LLVMSetNNeg");

fn LLVMFastMathFlags get_fast_math_flags(
  LLVMValueRef fp_math_inst)
@extern("LLVMGetFastMathFlags");

fn void set_fast_math_flags(
  LLVMValueRef fp_math_inst, 
  LLVMFastMathFlags fmf)
@extern("LLVMSetFastMathFlags");

fn LLVMBool can_value_use_fast_math_flags(
  LLVMValueRef inst)
@extern("LLVMCanValueUseFastMathFlags");

fn LLVMBool get_is_disjoint(
  LLVMValueRef inst)
@extern("LLVMGetIsDisjoint");

fn void set_is_disjoint(
  LLVMValueRef inst, 
  LLVMBool is_disjoint)
@extern("LLVMSetIsDisjoint");

fn LLVMValueRef build_malloc(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  CChar* name)
@extern("LLVMBuildMalloc");

fn LLVMValueRef build_array_malloc(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMBuildArrayMalloc");

fn LLVMValueRef build_mem_set(
  LLVMBuilderRef b, 
  LLVMValueRef ptr, 
  LLVMValueRef val, 
  LLVMValueRef len, 
  CUInt align)
@extern("LLVMBuildMemSet");

fn LLVMValueRef build_mem_cpy(
  LLVMBuilderRef b, 
  LLVMValueRef dst, 
  CUInt dst_align, 
  LLVMValueRef src, 
  CUInt src_align, 
  LLVMValueRef size)
@extern("LLVMBuildMemCpy");

fn LLVMValueRef build_mem_move(
  LLVMBuilderRef b, 
  LLVMValueRef dst, 
  CUInt dst_align, 
  LLVMValueRef src, 
  CUInt src_align, 
  LLVMValueRef size)
@extern("LLVMBuildMemMove");

fn LLVMValueRef build_alloca(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  CChar* name)
@extern("LLVMBuildAlloca");

fn LLVMValueRef build_array_alloca(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMBuildArrayAlloca");

fn LLVMValueRef build_free(
  LLVMBuilderRef, 
  LLVMValueRef pointer_val)
@extern("LLVMBuildFree");

fn LLVMValueRef build_load_2(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  LLVMValueRef pointer_val, 
  CChar* name)
@extern("LLVMBuildLoad2");

fn LLVMValueRef build_store(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMValueRef ptr)
@extern("LLVMBuildStore");

fn LLVMValueRef build_gep_2(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef pointer, 
  LLVMValueRef* indices, 
  CUInt num_indices, 
  CChar* name)
@extern("LLVMBuildGEP2");

fn LLVMValueRef build_in_bounds_gep_2(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef pointer, 
  LLVMValueRef* indices, 
  CUInt num_indices, 
  CChar* name)
@extern("LLVMBuildInBoundsGEP2");

fn LLVMValueRef build_gep_with_no_wrap_flags(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef pointer, 
  LLVMValueRef* indices, 
  CUInt num_indices, 
  CChar* name, 
  LLVMGEPNoWrapFlags no_wrap_flags)
@extern("LLVMBuildGEPWithNoWrapFlags");

fn LLVMValueRef build_struct_gep_2(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef pointer, 
  CUInt idx, 
  CChar* name)
@extern("LLVMBuildStructGEP2");

fn LLVMValueRef build_global_string(
  LLVMBuilderRef b, 
  CChar* str, 
  CChar* name)
@extern("LLVMBuildGlobalString");

fn LLVMValueRef build_global_string_ptr(
  LLVMBuilderRef b, 
  CChar* str, 
  CChar* name)
@extern("LLVMBuildGlobalStringPtr");

fn LLVMBool get_volatile(
  LLVMValueRef memory_access_inst)
@extern("LLVMGetVolatile");

fn void set_volatile(
  LLVMValueRef memory_access_inst, 
  LLVMBool is_volatile)
@extern("LLVMSetVolatile");

fn LLVMBool get_weak(
  LLVMValueRef cmp_xchg_inst)
@extern("LLVMGetWeak");

fn void set_weak(
  LLVMValueRef cmp_xchg_inst, 
  LLVMBool is_weak)
@extern("LLVMSetWeak");

fn LLVMAtomicOrdering get_ordering(
  LLVMValueRef memory_access_inst)
@extern("LLVMGetOrdering");

fn void set_ordering(
  LLVMValueRef memory_access_inst, 
  LLVMAtomicOrdering ordering)
@extern("LLVMSetOrdering");

fn LLVMAtomicRMWBinOp get_atomic_rmw_bin_op(
  LLVMValueRef atomic_rmw_inst)
@extern("LLVMGetAtomicRMWBinOp");

fn void set_atomic_rmw_bin_op(
  LLVMValueRef atomic_rmw_inst, 
  LLVMAtomicRMWBinOp bin_op)
@extern("LLVMSetAtomicRMWBinOp");

fn LLVMValueRef build_trunc(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildTrunc");

fn LLVMValueRef build_z_ext(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildZExt");

fn LLVMValueRef build_s_ext(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildSExt");

fn LLVMValueRef build_fp_to_ui(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildFPToUI");

fn LLVMValueRef build_fp_to_si(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildFPToSI");

fn LLVMValueRef build_ui_to_fp(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildUIToFP");

fn LLVMValueRef build_si_to_fp(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildSIToFP");

fn LLVMValueRef build_fp_trunc(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildFPTrunc");

fn LLVMValueRef build_fp_ext(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildFPExt");

fn LLVMValueRef build_ptr_to_int(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildPtrToInt");

fn LLVMValueRef build_int_to_ptr(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildIntToPtr");

fn LLVMValueRef build_bit_cast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildBitCast");

fn LLVMValueRef build_addr_space_cast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildAddrSpaceCast");

fn LLVMValueRef build_z_ext_or_bit_cast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildZExtOrBitCast");

fn LLVMValueRef build_s_ext_or_bit_cast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildSExtOrBitCast");

fn LLVMValueRef build_trunc_or_bit_cast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildTruncOrBitCast");

fn LLVMValueRef build_cast(
  LLVMBuilderRef b, 
  LLVMOpcode op, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildCast");

fn LLVMValueRef build_pointer_cast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildPointerCast");

fn LLVMValueRef build_int_cast_2(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  LLVMBool is_signed, 
  CChar* name)
@extern("LLVMBuildIntCast2");

fn LLVMValueRef build_fp_cast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildFPCast");

fn LLVMValueRef build_int_cast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildIntCast");

fn LLVMOpcode get_cast_opcode(
  LLVMValueRef src, 
  LLVMBool src_is_signed, 
  LLVMTypeRef dest_ty, 
  LLVMBool dest_is_signed)
@extern("LLVMGetCastOpcode");

fn LLVMValueRef build_i_cmp(
  LLVMBuilderRef, 
  LLVMIntPredicate op, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildICmp");

fn LLVMValueRef build_f_cmp(
  LLVMBuilderRef, 
  LLVMRealPredicate op, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFCmp");

fn LLVMValueRef build_phi(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  CChar* name)
@extern("LLVMBuildPhi");

fn LLVMValueRef build_call_2(
  LLVMBuilderRef, 
  LLVMTypeRef, 
  LLVMValueRef fn_, 
  LLVMValueRef* args, 
  CUInt num_args, 
  CChar* name)
@extern("LLVMBuildCall2");

fn LLVMValueRef build_call_with_operand_bundles(
  LLVMBuilderRef, 
  LLVMTypeRef, 
  LLVMValueRef fn_, 
  LLVMValueRef* args, 
  CUInt num_args, 
  LLVMOperandBundleRef* bundles, 
  CUInt num_bundles, 
  CChar* name)
@extern("LLVMBuildCallWithOperandBundles");

fn LLVMValueRef build_select(
  LLVMBuilderRef, 
  LLVMValueRef if_, 
  LLVMValueRef then, 
  LLVMValueRef else_, 
  CChar* name)
@extern("LLVMBuildSelect");

fn LLVMValueRef build_va_arg(
  LLVMBuilderRef, 
  LLVMValueRef list, 
  LLVMTypeRef ty, 
  CChar* name)
@extern("LLVMBuildVAArg");

fn LLVMValueRef build_extract_element(
  LLVMBuilderRef, 
  LLVMValueRef vec_val, 
  LLVMValueRef index, 
  CChar* name)
@extern("LLVMBuildExtractElement");

fn LLVMValueRef build_insert_element(
  LLVMBuilderRef, 
  LLVMValueRef vec_val, 
  LLVMValueRef elt_val, 
  LLVMValueRef index, 
  CChar* name)
@extern("LLVMBuildInsertElement");

fn LLVMValueRef build_shuffle_vector(
  LLVMBuilderRef, 
  LLVMValueRef v_1, 
  LLVMValueRef v_2, 
  LLVMValueRef mask, 
  CChar* name)
@extern("LLVMBuildShuffleVector");

fn LLVMValueRef build_extract_value(
  LLVMBuilderRef, 
  LLVMValueRef agg_val, 
  CUInt index, 
  CChar* name)
@extern("LLVMBuildExtractValue");

fn LLVMValueRef build_insert_value(
  LLVMBuilderRef, 
  LLVMValueRef agg_val, 
  LLVMValueRef elt_val, 
  CUInt index, 
  CChar* name)
@extern("LLVMBuildInsertValue");

fn LLVMValueRef build_freeze(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMBuildFreeze");

fn LLVMValueRef build_is_null(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMBuildIsNull");

fn LLVMValueRef build_is_not_null(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMBuildIsNotNull");

fn LLVMValueRef build_ptr_diff_2(
  LLVMBuilderRef, 
  LLVMTypeRef elem_ty, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildPtrDiff2");

fn LLVMValueRef build_fence(
  LLVMBuilderRef b, 
  LLVMAtomicOrdering ordering, 
  LLVMBool single_thread, 
  CChar* name)
@extern("LLVMBuildFence");

fn LLVMValueRef build_fence_sync_scope(
  LLVMBuilderRef b, 
  LLVMAtomicOrdering ordering, 
  CUInt ssid, 
  CChar* name)
@extern("LLVMBuildFenceSyncScope");

fn LLVMValueRef build_atomic_rmw(
  LLVMBuilderRef b, 
  LLVMAtomicRMWBinOp op, 
  LLVMValueRef ptr, 
  LLVMValueRef val, 
  LLVMAtomicOrdering ordering, 
  LLVMBool single_thread)
@extern("LLVMBuildAtomicRMW");

fn LLVMValueRef build_atomic_rmw_sync_scope(
  LLVMBuilderRef b, 
  LLVMAtomicRMWBinOp op, 
  LLVMValueRef ptr, 
  LLVMValueRef val, 
  LLVMAtomicOrdering ordering, 
  CUInt ssid)
@extern("LLVMBuildAtomicRMWSyncScope");

fn LLVMValueRef build_atomic_cmp_xchg(
  LLVMBuilderRef b, 
  LLVMValueRef ptr, 
  LLVMValueRef cmp, 
  LLVMValueRef new, 
  LLVMAtomicOrdering success_ordering, 
  LLVMAtomicOrdering failure_ordering, 
  LLVMBool single_thread)
@extern("LLVMBuildAtomicCmpXchg");

fn LLVMValueRef build_atomic_cmp_xchg_sync_scope(
  LLVMBuilderRef b, 
  LLVMValueRef ptr, 
  LLVMValueRef cmp, 
  LLVMValueRef new, 
  LLVMAtomicOrdering success_ordering, 
  LLVMAtomicOrdering failure_ordering, 
  CUInt ssid)
@extern("LLVMBuildAtomicCmpXchgSyncScope");

fn CUInt get_num_mask_elements(
  LLVMValueRef shuffle_vector_inst)
@extern("LLVMGetNumMaskElements");

fn CInt get_undef_mask_elem()
@extern("LLVMGetUndefMaskElem");

fn CInt get_mask_value(
  LLVMValueRef shuffle_vector_inst, 
  CUInt elt)
@extern("LLVMGetMaskValue");

fn LLVMBool is_atomic_single_thread(
  LLVMValueRef atomic_inst)
@extern("LLVMIsAtomicSingleThread");

fn void set_atomic_single_thread(
  LLVMValueRef atomic_inst, 
  LLVMBool single_thread)
@extern("LLVMSetAtomicSingleThread");

fn LLVMBool is_atomic(
  LLVMValueRef inst)
@extern("LLVMIsAtomic");

fn CUInt get_atomic_sync_scope_id(
  LLVMValueRef atomic_inst)
@extern("LLVMGetAtomicSyncScopeID");

fn void set_atomic_sync_scope_id(
  LLVMValueRef atomic_inst, 
  CUInt ssid)
@extern("LLVMSetAtomicSyncScopeID");

fn LLVMAtomicOrdering get_cmp_xchg_success_ordering(
  LLVMValueRef cmp_xchg_inst)
@extern("LLVMGetCmpXchgSuccessOrdering");

fn void set_cmp_xchg_success_ordering(
  LLVMValueRef cmp_xchg_inst, 
  LLVMAtomicOrdering ordering)
@extern("LLVMSetCmpXchgSuccessOrdering");

fn LLVMAtomicOrdering get_cmp_xchg_failure_ordering(
  LLVMValueRef cmp_xchg_inst)
@extern("LLVMGetCmpXchgFailureOrdering");

fn void set_cmp_xchg_failure_ordering(
  LLVMValueRef cmp_xchg_inst, 
  LLVMAtomicOrdering ordering)
@extern("LLVMSetCmpXchgFailureOrdering");

fn LLVMModuleProviderRef create_module_provider_for_existing_module(
  LLVMModuleRef m)
@extern("LLVMCreateModuleProviderForExistingModule");

fn void dispose_module_provider(
  LLVMModuleProviderRef m)
@extern("LLVMDisposeModuleProvider");

fn LLVMBool create_memory_buffer_with_contents_of_file(
  CChar* path, 
  LLVMMemoryBufferRef* out_mem_buf, 
  CChar** out_message)
@extern("LLVMCreateMemoryBufferWithContentsOfFile");

fn LLVMBool create_memory_buffer_with_stdin(
  LLVMMemoryBufferRef* out_mem_buf, 
  CChar** out_message)
@extern("LLVMCreateMemoryBufferWithSTDIN");

fn LLVMMemoryBufferRef create_memory_buffer_with_memory_range(
  CChar* input_data, 
  usz input_data_length, 
  CChar* buffer_name, 
  LLVMBool requires_null_terminator)
@extern("LLVMCreateMemoryBufferWithMemoryRange");

fn LLVMMemoryBufferRef create_memory_buffer_with_memory_range_copy(
  CChar* input_data, 
  usz input_data_length, 
  CChar* buffer_name)
@extern("LLVMCreateMemoryBufferWithMemoryRangeCopy");

fn CChar* get_buffer_start(
  LLVMMemoryBufferRef mem_buf)
@extern("LLVMGetBufferStart");

fn usz get_buffer_size(
  LLVMMemoryBufferRef mem_buf)
@extern("LLVMGetBufferSize");

fn void dispose_memory_buffer(
  LLVMMemoryBufferRef mem_buf)
@extern("LLVMDisposeMemoryBuffer");

fn LLVMPassManagerRef create_pass_manager()
@extern("LLVMCreatePassManager");

fn LLVMPassManagerRef create_function_pass_manager_for_module(
  LLVMModuleRef m)
@extern("LLVMCreateFunctionPassManagerForModule");

fn LLVMPassManagerRef create_function_pass_manager(
  LLVMModuleProviderRef mp)
@extern("LLVMCreateFunctionPassManager");

fn LLVMBool run_pass_manager(
  LLVMPassManagerRef pm, 
  LLVMModuleRef m)
@extern("LLVMRunPassManager");

fn LLVMBool initialize_function_pass_manager(
  LLVMPassManagerRef fpm)
@extern("LLVMInitializeFunctionPassManager");

fn LLVMBool run_function_pass_manager(
  LLVMPassManagerRef fpm, 
  LLVMValueRef f)
@extern("LLVMRunFunctionPassManager");

fn LLVMBool finalize_function_pass_manager(
  LLVMPassManagerRef fpm)
@extern("LLVMFinalizeFunctionPassManager");

fn void dispose_pass_manager(
  LLVMPassManagerRef pm)
@extern("LLVMDisposePassManager");

fn LLVMBool start_multithreaded()
@extern("LLVMStartMultithreaded");

fn void stop_multithreaded()
@extern("LLVMStopMultithreaded");

fn LLVMBool is_multithreaded()
@extern("LLVMIsMultithreaded");

typedef LLVMDIFlags = inline CUInt;
const LLVMDIFlags DIFLAGZERO = 0;
const LLVMDIFlags DIFLAGPRIVATE = 1;
const LLVMDIFlags DIFLAGPROTECTED = 2;
const LLVMDIFlags DIFLAGPUBLIC = 3;
const LLVMDIFlags DIFLAGFWDDECL = 1<<2;
const LLVMDIFlags DIFLAGAPPLEBLOCK = 1<<3;
const LLVMDIFlags DIFLAGRESERVEDBIT4 = 1<<4;
const LLVMDIFlags DIFLAGVIRTUAL = 1<<5;
const LLVMDIFlags DIFLAGARTIFICIAL = 1<<6;
const LLVMDIFlags DIFLAGEXPLICIT = 1<<7;
const LLVMDIFlags DIFLAGPROTOTYPED = 1<<8;
const LLVMDIFlags DIFLAGOBJCCLASSCOMPLETE = 1<<9;
const LLVMDIFlags DIFLAGOBJECTPOINTER = 1<<10;
const LLVMDIFlags DIFLAGVECTOR = 1<<11;
const LLVMDIFlags DIFLAGSTATICMEMBER = 1<<12;
const LLVMDIFlags DIFLAGLVALUEREFERENCE = 1<<13;
const LLVMDIFlags DIFLAGRVALUEREFERENCE = 1<<14;
const LLVMDIFlags DIFLAGRESERVED = 1<<15;
const LLVMDIFlags DIFLAGSINGLEINHERITANCE = 1<<16;
const LLVMDIFlags DIFLAGMULTIPLEINHERITANCE = 2<<16;
const LLVMDIFlags DIFLAGVIRTUALINHERITANCE = 3<<16;
const LLVMDIFlags DIFLAGINTRODUCEDVIRTUAL = 1<<18;
const LLVMDIFlags DIFLAGBITFIELD = 1<<19;
const LLVMDIFlags DIFLAGNORETURN = 1<<20;
const LLVMDIFlags DIFLAGTYPEPASSBYVALUE = 1<<22;
const LLVMDIFlags DIFLAGTYPEPASSBYREFERENCE = 1<<23;
const LLVMDIFlags DIFLAGENUMCLASS = 1<<24;
const LLVMDIFlags DIFLAGFIXEDENUM = DIFLAGENUMCLASS;
const LLVMDIFlags DIFLAGTHUNK = 1<<25;
const LLVMDIFlags DIFLAGNONTRIVIAL = 1<<26;
const LLVMDIFlags DIFLAGBIGENDIAN = 1<<27;
const LLVMDIFlags DIFLAGLITTLEENDIAN = 1<<28;
const LLVMDIFlags DIFLAGINDIRECTVIRTUALBASE = (1<<2)|(1<<5);
const LLVMDIFlags DIFLAGACCESSIBILITY = DIFLAGPRIVATE|DIFLAGPROTECTED|DIFLAGPUBLIC;
const LLVMDIFlags DIFLAGPTRTOMEMBERREP = DIFLAGSINGLEINHERITANCE|DIFLAGMULTIPLEINHERITANCE|DIFLAGVIRTUALINHERITANCE;

typedef LLVMDWARFSourceLanguage = inline CUInt;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC89 = 0;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC = 1;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEADA83 = 2;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC_PLUS_PLUS = 3;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGECOBOL74 = 4;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGECOBOL85 = 5;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEFORTRAN77 = 6;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEFORTRAN90 = 7;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEPASCAL83 = 8;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEMODULA2 = 9;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEJAVA = 10;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC99 = 11;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEADA95 = 12;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEFORTRAN95 = 13;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEPLI = 14;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEOBJC = 15;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEOBJC_PLUS_PLUS = 16;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEUPC = 17;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGED = 18;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEPYTHON = 19;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEOPENCL = 20;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEGO = 21;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEMODULA3 = 22;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEHASKELL = 23;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC_PLUS_PLUS_03 = 24;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC_PLUS_PLUS_11 = 25;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEOCAML = 26;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGERUST = 27;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC11 = 28;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGESWIFT = 29;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEJULIA = 30;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEDYLAN = 31;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC_PLUS_PLUS_14 = 32;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEFORTRAN03 = 33;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEFORTRAN08 = 34;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGERENDERSCRIPT = 35;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEBLISS = 36;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEKOTLIN = 37;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEZIG = 38;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGECRYSTAL = 39;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC_PLUS_PLUS_17 = 40;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC_PLUS_PLUS_20 = 41;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC17 = 42;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEFORTRAN18 = 43;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEADA2005 = 44;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEADA2012 = 45;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEHIP = 46;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEASSEMBLY = 47;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEC_SHARP = 48;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEMOJO = 49;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEGLSL = 50;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEGLSL_ES = 51;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEHLSL = 52;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEOPENCL_CPP = 53;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGECPP_FOR_OPENCL = 54;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGESYCL = 55;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGERUBY = 56;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEMOVE = 57;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEHYLO = 58;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEMETAL = 59;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEMIPS_ASSEMBLER = 60;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEGOOGLE_RENDERSCRIPT = 61;
const LLVMDWARFSourceLanguage DWARFSOURCELANGUAGEBORLAND_DELPHI = 62;

typedef LLVMDWARFEmissionKind = inline CUInt;
const LLVMDWARFEmissionKind DWARFEMISSIONNONE = 0;
const LLVMDWARFEmissionKind DWARFEMISSIONFULL = 1;
const LLVMDWARFEmissionKind DWARFEMISSIONLINETABLESONLY = 2;
const CUInt MDSTRINGMETADATAKIND = 0;
const CUInt CONSTANTASMETADATAMETADATAKIND = 1;
const CUInt LOCALASMETADATAMETADATAKIND = 2;
const CUInt DISTINCTMDOPERANDPLACEHOLDERMETADATAKIND = 3;
const CUInt MDTUPLEMETADATAKIND = 4;
const CUInt DILOCATIONMETADATAKIND = 5;
const CUInt DIEXPRESSIONMETADATAKIND = 6;
const CUInt DIGLOBALVARIABLEEXPRESSIONMETADATAKIND = 7;
const CUInt GENERICDINODEMETADATAKIND = 8;
const CUInt DISUBRANGEMETADATAKIND = 9;
const CUInt DIENUMERATORMETADATAKIND = 10;
const CUInt DIBASICTYPEMETADATAKIND = 11;
const CUInt DIDERIVEDTYPEMETADATAKIND = 12;
const CUInt DICOMPOSITETYPEMETADATAKIND = 13;
const CUInt DISUBROUTINETYPEMETADATAKIND = 14;
const CUInt DIFILEMETADATAKIND = 15;
const CUInt DICOMPILEUNITMETADATAKIND = 16;
const CUInt DISUBPROGRAMMETADATAKIND = 17;
const CUInt DILEXICALBLOCKMETADATAKIND = 18;
const CUInt DILEXICALBLOCKFILEMETADATAKIND = 19;
const CUInt DINAMESPACEMETADATAKIND = 20;
const CUInt DIMODULEMETADATAKIND = 21;
const CUInt DITEMPLATETYPEPARAMETERMETADATAKIND = 22;
const CUInt DITEMPLATEVALUEPARAMETERMETADATAKIND = 23;
const CUInt DIGLOBALVARIABLEMETADATAKIND = 24;
const CUInt DILOCALVARIABLEMETADATAKIND = 25;
const CUInt DILABELMETADATAKIND = 26;
const CUInt DIOBJCPROPERTYMETADATAKIND = 27;
const CUInt DIIMPORTEDENTITYMETADATAKIND = 28;
const CUInt DIMACROMETADATAKIND = 29;
const CUInt DIMACROFILEMETADATAKIND = 30;
const CUInt DICOMMONBLOCKMETADATAKIND = 31;
const CUInt DISTRINGTYPEMETADATAKIND = 32;
const CUInt DIGENERICSUBRANGEMETADATAKIND = 33;
const CUInt DIARGLISTMETADATAKIND = 34;
const CUInt DIASSIGNIDMETADATAKIND = 35;

alias LLVMMetadataKind = CUInt;

alias LLVMDWARFTypeEncoding = CUInt;

typedef LLVMDWARFMacinfoRecordType = inline CUInt;
const LLVMDWARFMacinfoRecordType DWARFMACINFORECORDTYPEDEFINE = 0x01;
const LLVMDWARFMacinfoRecordType DWARFMACINFORECORDTYPEMACRO = 0x02;
const LLVMDWARFMacinfoRecordType DWARFMACINFORECORDTYPESTARTFILE = 0x03;
const LLVMDWARFMacinfoRecordType DWARFMACINFORECORDTYPEENDFILE = 0x04;
const LLVMDWARFMacinfoRecordType DWARFMACINFORECORDTYPEVENDOREXT = 0xff;

fn CUInt debug_metadata_version()
@extern("LLVMDebugMetadataVersion");

fn CUInt get_module_debug_metadata_version(
  LLVMModuleRef module_)
@extern("LLVMGetModuleDebugMetadataVersion");

fn LLVMBool strip_module_debug_info(
  LLVMModuleRef module_)
@extern("LLVMStripModuleDebugInfo");

fn LLVMDIBuilderRef create_di_builder_disallow_unresolved(
  LLVMModuleRef m)
@extern("LLVMCreateDIBuilderDisallowUnresolved");

fn LLVMDIBuilderRef create_di_builder(
  LLVMModuleRef m)
@extern("LLVMCreateDIBuilder");

fn void dispose_di_builder(
  LLVMDIBuilderRef builder)
@extern("LLVMDisposeDIBuilder");

fn void di_builder_finalize(
  LLVMDIBuilderRef builder)
@extern("LLVMDIBuilderFinalize");

fn void di_builder_finalize_subprogram(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef subprogram)
@extern("LLVMDIBuilderFinalizeSubprogram");

fn LLVMMetadataRef di_builder_create_compile_unit(
  LLVMDIBuilderRef builder, 
  LLVMDWARFSourceLanguage lang, 
  LLVMMetadataRef file_ref, 
  CChar* producer, 
  usz producer_len, 
  LLVMBool is_optimized, 
  CChar* flags, 
  usz flags_len, 
  CUInt runtime_ver, 
  CChar* split_name, 
  usz split_name_len, 
  LLVMDWARFEmissionKind kind, 
  CUInt dwo_id, 
  LLVMBool split_debug_inlining, 
  LLVMBool debug_info_for_profiling, 
  CChar* sys_root, 
  usz sys_root_len, 
  CChar* sdk, 
  usz sdk_len)
@extern("LLVMDIBuilderCreateCompileUnit");

fn LLVMMetadataRef di_builder_create_file(
  LLVMDIBuilderRef builder, 
  CChar* filename, 
  usz filename_len, 
  CChar* directory, 
  usz directory_len)
@extern("LLVMDIBuilderCreateFile");

fn LLVMMetadataRef di_builder_create_module(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef parent_scope, 
  CChar* name, 
  usz name_len, 
  CChar* config_macros, 
  usz config_macros_len, 
  CChar* include_path, 
  usz include_path_len, 
  CChar* api_notes_file, 
  usz api_notes_file_len)
@extern("LLVMDIBuilderCreateModule");

fn LLVMMetadataRef di_builder_create_name_space(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef parent_scope, 
  CChar* name, 
  usz name_len, 
  LLVMBool export_symbols)
@extern("LLVMDIBuilderCreateNameSpace");

fn LLVMMetadataRef di_builder_create_function(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  CChar* linkage_name, 
  usz linkage_name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef ty, 
  LLVMBool is_local_to_unit, 
  LLVMBool is_definition, 
  CUInt scope_line, 
  LLVMDIFlags flags, 
  LLVMBool is_optimized)
@extern("LLVMDIBuilderCreateFunction");

fn LLVMMetadataRef di_builder_create_lexical_block(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef file, 
  CUInt line, 
  CUInt column)
@extern("LLVMDIBuilderCreateLexicalBlock");

fn LLVMMetadataRef di_builder_create_lexical_block_file(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef file, 
  CUInt discriminator)
@extern("LLVMDIBuilderCreateLexicalBlockFile");

fn LLVMMetadataRef di_builder_create_imported_module_from_namespace(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef ns, 
  LLVMMetadataRef file, 
  CUInt line)
@extern("LLVMDIBuilderCreateImportedModuleFromNamespace");

fn LLVMMetadataRef di_builder_create_imported_module_from_alias(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef imported_entity, 
  LLVMMetadataRef file, 
  CUInt line, 
  LLVMMetadataRef* elements, 
  CUInt num_elements)
@extern("LLVMDIBuilderCreateImportedModuleFromAlias");

fn LLVMMetadataRef di_builder_create_imported_module_from_module(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef m, 
  LLVMMetadataRef file, 
  CUInt line, 
  LLVMMetadataRef* elements, 
  CUInt num_elements)
@extern("LLVMDIBuilderCreateImportedModuleFromModule");

fn LLVMMetadataRef di_builder_create_imported_declaration(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef decl, 
  LLVMMetadataRef file, 
  CUInt line, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef* elements, 
  CUInt num_elements)
@extern("LLVMDIBuilderCreateImportedDeclaration");

fn LLVMMetadataRef di_builder_create_debug_location(
  LLVMContextRef ctx, 
  CUInt line, 
  CUInt column, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef inlined_at)
@extern("LLVMDIBuilderCreateDebugLocation");

fn CUInt di_location_get_line(
  LLVMMetadataRef location)
@extern("LLVMDILocationGetLine");

fn CUInt di_location_get_column(
  LLVMMetadataRef location)
@extern("LLVMDILocationGetColumn");

fn LLVMMetadataRef di_location_get_scope(
  LLVMMetadataRef location)
@extern("LLVMDILocationGetScope");

fn LLVMMetadataRef di_location_get_inlined_at(
  LLVMMetadataRef location)
@extern("LLVMDILocationGetInlinedAt");

fn LLVMMetadataRef di_scope_get_file(
  LLVMMetadataRef scope)
@extern("LLVMDIScopeGetFile");

fn CChar* di_file_get_directory(
  LLVMMetadataRef file, 
  CUInt* len)
@extern("LLVMDIFileGetDirectory");

fn CChar* di_file_get_filename(
  LLVMMetadataRef file, 
  CUInt* len)
@extern("LLVMDIFileGetFilename");

fn CChar* di_file_get_source(
  LLVMMetadataRef file, 
  CUInt* len)
@extern("LLVMDIFileGetSource");

fn LLVMMetadataRef di_builder_get_or_create_type_array(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef* data, 
  usz num_elements)
@extern("LLVMDIBuilderGetOrCreateTypeArray");

fn LLVMMetadataRef di_builder_create_subroutine_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef file, 
  LLVMMetadataRef* parameter_types, 
  CUInt num_parameter_types, 
  LLVMDIFlags flags)
@extern("LLVMDIBuilderCreateSubroutineType");

fn LLVMMetadataRef di_builder_create_macro(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef parent_macro_file, 
  CUInt line, 
  LLVMDWARFMacinfoRecordType record_type, 
  CChar* name, 
  usz name_len, 
  CChar* value, 
  usz value_len)
@extern("LLVMDIBuilderCreateMacro");

fn LLVMMetadataRef di_builder_create_temp_macro_file(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef parent_macro_file, 
  CUInt line, 
  LLVMMetadataRef file)
@extern("LLVMDIBuilderCreateTempMacroFile");

fn LLVMMetadataRef di_builder_create_enumerator(
  LLVMDIBuilderRef builder, 
  CChar* name, 
  usz name_len, 
  long value, 
  LLVMBool is_unsigned)
@extern("LLVMDIBuilderCreateEnumerator");

fn LLVMMetadataRef di_builder_create_enumeration_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  ulong size_in_bits, 
  uint align_in_bits, 
  LLVMMetadataRef* elements, 
  CUInt num_elements, 
  LLVMMetadataRef class_ty)
@extern("LLVMDIBuilderCreateEnumerationType");

fn LLVMMetadataRef di_builder_create_union_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  ulong size_in_bits, 
  uint align_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef* elements, 
  CUInt num_elements, 
  CUInt run_time_lang, 
  CChar* unique_id, 
  usz unique_id_len)
@extern("LLVMDIBuilderCreateUnionType");

fn LLVMMetadataRef di_builder_create_array_type(
  LLVMDIBuilderRef builder, 
  ulong size, 
  uint align_in_bits, 
  LLVMMetadataRef ty, 
  LLVMMetadataRef* subscripts, 
  CUInt num_subscripts)
@extern("LLVMDIBuilderCreateArrayType");

fn LLVMMetadataRef di_builder_create_vector_type(
  LLVMDIBuilderRef builder, 
  ulong size, 
  uint align_in_bits, 
  LLVMMetadataRef ty, 
  LLVMMetadataRef* subscripts, 
  CUInt num_subscripts)
@extern("LLVMDIBuilderCreateVectorType");

fn LLVMMetadataRef di_builder_create_unspecified_type(
  LLVMDIBuilderRef builder, 
  CChar* name, 
  usz name_len)
@extern("LLVMDIBuilderCreateUnspecifiedType");

fn LLVMMetadataRef di_builder_create_basic_type(
  LLVMDIBuilderRef builder, 
  CChar* name, 
  usz name_len, 
  ulong size_in_bits, 
  LLVMDWARFTypeEncoding encoding, 
  LLVMDIFlags flags)
@extern("LLVMDIBuilderCreateBasicType");

fn LLVMMetadataRef di_builder_create_pointer_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef pointee_ty, 
  ulong size_in_bits, 
  uint align_in_bits, 
  CUInt address_space, 
  CChar* name, 
  usz name_len)
@extern("LLVMDIBuilderCreatePointerType");

fn LLVMMetadataRef di_builder_create_struct_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  ulong size_in_bits, 
  uint align_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef derived_from, 
  LLVMMetadataRef* elements, 
  CUInt num_elements, 
  CUInt run_time_lang, 
  LLVMMetadataRef v_table_holder, 
  CChar* unique_id, 
  usz unique_id_len)
@extern("LLVMDIBuilderCreateStructType");

fn LLVMMetadataRef di_builder_create_member_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  ulong size_in_bits, 
  uint align_in_bits, 
  ulong offset_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef ty)
@extern("LLVMDIBuilderCreateMemberType");

fn LLVMMetadataRef di_builder_create_static_member_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  LLVMMetadataRef type, 
  LLVMDIFlags flags, 
  LLVMValueRef constant_val, 
  uint align_in_bits)
@extern("LLVMDIBuilderCreateStaticMemberType");

fn LLVMMetadataRef di_builder_create_member_pointer_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef pointee_type, 
  LLVMMetadataRef class_type, 
  ulong size_in_bits, 
  uint align_in_bits, 
  LLVMDIFlags flags)
@extern("LLVMDIBuilderCreateMemberPointerType");

fn LLVMMetadataRef di_builder_create_obj_ci_var(
  LLVMDIBuilderRef builder, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  ulong size_in_bits, 
  uint align_in_bits, 
  ulong offset_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef ty, 
  LLVMMetadataRef property_node)
@extern("LLVMDIBuilderCreateObjCIVar");

fn LLVMMetadataRef di_builder_create_obj_c_property(
  LLVMDIBuilderRef builder, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  CChar* getter_name, 
  usz getter_name_len, 
  CChar* setter_name, 
  usz setter_name_len, 
  CUInt property_attributes, 
  LLVMMetadataRef ty)
@extern("LLVMDIBuilderCreateObjCProperty");

fn LLVMMetadataRef di_builder_create_object_pointer_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef type, 
  LLVMBool implicit)
@extern("LLVMDIBuilderCreateObjectPointerType");

fn LLVMMetadataRef di_builder_create_qualified_type(
  LLVMDIBuilderRef builder, 
  CUInt tag, 
  LLVMMetadataRef type)
@extern("LLVMDIBuilderCreateQualifiedType");

fn LLVMMetadataRef di_builder_create_reference_type(
  LLVMDIBuilderRef builder, 
  CUInt tag, 
  LLVMMetadataRef type)
@extern("LLVMDIBuilderCreateReferenceType");

fn LLVMMetadataRef di_builder_create_null_ptr_type(
  LLVMDIBuilderRef builder)
@extern("LLVMDIBuilderCreateNullPtrType");

fn LLVMMetadataRef di_builder_create_typedef(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef type, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef scope, 
  uint align_in_bits)
@extern("LLVMDIBuilderCreateTypedef");

fn LLVMMetadataRef di_builder_create_inheritance(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef ty, 
  LLVMMetadataRef base_ty, 
  ulong base_offset, 
  uint vb_ptr_offset, 
  LLVMDIFlags flags)
@extern("LLVMDIBuilderCreateInheritance");

fn LLVMMetadataRef di_builder_create_forward_decl(
  LLVMDIBuilderRef builder, 
  CUInt tag, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef file, 
  CUInt line, 
  CUInt runtime_lang, 
  ulong size_in_bits, 
  uint align_in_bits, 
  CChar* unique_identifier, 
  usz unique_identifier_len)
@extern("LLVMDIBuilderCreateForwardDecl");

fn LLVMMetadataRef di_builder_create_replaceable_composite_type(
  LLVMDIBuilderRef builder, 
  CUInt tag, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef file, 
  CUInt line, 
  CUInt runtime_lang, 
  ulong size_in_bits, 
  uint align_in_bits, 
  LLVMDIFlags flags, 
  CChar* unique_identifier, 
  usz unique_identifier_len)
@extern("LLVMDIBuilderCreateReplaceableCompositeType");

fn LLVMMetadataRef di_builder_create_bit_field_member_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  ulong size_in_bits, 
  ulong offset_in_bits, 
  ulong storage_offset_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef type)
@extern("LLVMDIBuilderCreateBitFieldMemberType");

fn LLVMMetadataRef di_builder_create_class_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  ulong size_in_bits, 
  uint align_in_bits, 
  ulong offset_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef derived_from, 
  LLVMMetadataRef* elements, 
  CUInt num_elements, 
  LLVMMetadataRef v_table_holder, 
  LLVMMetadataRef template_params_node, 
  CChar* unique_identifier, 
  usz unique_identifier_len)
@extern("LLVMDIBuilderCreateClassType");

fn LLVMMetadataRef di_builder_create_artificial_type(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef type)
@extern("LLVMDIBuilderCreateArtificialType");

fn CChar* di_type_get_name(
  LLVMMetadataRef d_type, 
  usz* length)
@extern("LLVMDITypeGetName");

fn ulong di_type_get_size_in_bits(
  LLVMMetadataRef d_type)
@extern("LLVMDITypeGetSizeInBits");

fn ulong di_type_get_offset_in_bits(
  LLVMMetadataRef d_type)
@extern("LLVMDITypeGetOffsetInBits");

fn uint di_type_get_align_in_bits(
  LLVMMetadataRef d_type)
@extern("LLVMDITypeGetAlignInBits");

fn CUInt di_type_get_line(
  LLVMMetadataRef d_type)
@extern("LLVMDITypeGetLine");

fn LLVMDIFlags di_type_get_flags(
  LLVMMetadataRef d_type)
@extern("LLVMDITypeGetFlags");

fn LLVMMetadataRef di_builder_get_or_create_subrange(
  LLVMDIBuilderRef builder, 
  long lower_bound, 
  long count)
@extern("LLVMDIBuilderGetOrCreateSubrange");

fn LLVMMetadataRef di_builder_get_or_create_array(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef* data, 
  usz num_elements)
@extern("LLVMDIBuilderGetOrCreateArray");

fn LLVMMetadataRef di_builder_create_expression(
  LLVMDIBuilderRef builder, 
  ulong* addr, 
  usz length)
@extern("LLVMDIBuilderCreateExpression");

fn LLVMMetadataRef di_builder_create_constant_value_expression(
  LLVMDIBuilderRef builder, 
  ulong value)
@extern("LLVMDIBuilderCreateConstantValueExpression");

fn LLVMMetadataRef di_builder_create_global_variable_expression(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  CChar* linkage, 
  usz link_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef ty, 
  LLVMBool local_to_unit, 
  LLVMMetadataRef expr, 
  LLVMMetadataRef decl, 
  uint align_in_bits)
@extern("LLVMDIBuilderCreateGlobalVariableExpression");

fn ushort get_di_node_tag(
  LLVMMetadataRef md)
@extern("LLVMGetDINodeTag");

fn LLVMMetadataRef di_global_variable_expression_get_variable(
  LLVMMetadataRef gve)
@extern("LLVMDIGlobalVariableExpressionGetVariable");

fn LLVMMetadataRef di_global_variable_expression_get_expression(
  LLVMMetadataRef gve)
@extern("LLVMDIGlobalVariableExpressionGetExpression");

fn LLVMMetadataRef di_variable_get_file(
  LLVMMetadataRef var_)
@extern("LLVMDIVariableGetFile");

fn LLVMMetadataRef di_variable_get_scope(
  LLVMMetadataRef var_)
@extern("LLVMDIVariableGetScope");

fn CUInt di_variable_get_line(
  LLVMMetadataRef var_)
@extern("LLVMDIVariableGetLine");

fn LLVMMetadataRef temporary_md_node(
  LLVMContextRef ctx, 
  LLVMMetadataRef* data, 
  usz num_elements)
@extern("LLVMTemporaryMDNode");

fn void dispose_temporary_md_node(
  LLVMMetadataRef temp_node)
@extern("LLVMDisposeTemporaryMDNode");

fn void metadata_replace_all_uses_with(
  LLVMMetadataRef temp_target_metadata, 
  LLVMMetadataRef replacement)
@extern("LLVMMetadataReplaceAllUsesWith");

fn LLVMMetadataRef di_builder_create_temp_global_variable_fwd_decl(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  CChar* linkage, 
  usz lnk_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef ty, 
  LLVMBool local_to_unit, 
  LLVMMetadataRef decl, 
  uint align_in_bits)
@extern("LLVMDIBuilderCreateTempGlobalVariableFwdDecl");

fn LLVMDbgRecordRef di_builder_insert_declare_record_before(
  LLVMDIBuilderRef builder, 
  LLVMValueRef storage, 
  LLVMMetadataRef var_info, 
  LLVMMetadataRef expr, 
  LLVMMetadataRef debug_loc, 
  LLVMValueRef instr)
@extern("LLVMDIBuilderInsertDeclareRecordBefore");

fn LLVMDbgRecordRef di_builder_insert_declare_record_at_end(
  LLVMDIBuilderRef builder, 
  LLVMValueRef storage, 
  LLVMMetadataRef var_info, 
  LLVMMetadataRef expr, 
  LLVMMetadataRef debug_loc, 
  LLVMBasicBlockRef block)
@extern("LLVMDIBuilderInsertDeclareRecordAtEnd");

fn LLVMDbgRecordRef di_builder_insert_dbg_value_record_before(
  LLVMDIBuilderRef builder, 
  LLVMValueRef val, 
  LLVMMetadataRef var_info, 
  LLVMMetadataRef expr, 
  LLVMMetadataRef debug_loc, 
  LLVMValueRef instr)
@extern("LLVMDIBuilderInsertDbgValueRecordBefore");

fn LLVMDbgRecordRef di_builder_insert_dbg_value_record_at_end(
  LLVMDIBuilderRef builder, 
  LLVMValueRef val, 
  LLVMMetadataRef var_info, 
  LLVMMetadataRef expr, 
  LLVMMetadataRef debug_loc, 
  LLVMBasicBlockRef block)
@extern("LLVMDIBuilderInsertDbgValueRecordAtEnd");

fn LLVMMetadataRef di_builder_create_auto_variable(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef ty, 
  LLVMBool always_preserve, 
  LLVMDIFlags flags, 
  uint align_in_bits)
@extern("LLVMDIBuilderCreateAutoVariable");

fn LLVMMetadataRef di_builder_create_parameter_variable(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  CUInt arg_no, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef ty, 
  LLVMBool always_preserve, 
  LLVMDIFlags flags)
@extern("LLVMDIBuilderCreateParameterVariable");

fn LLVMMetadataRef get_subprogram(
  LLVMValueRef func)
@extern("LLVMGetSubprogram");

fn void set_subprogram(
  LLVMValueRef func, 
  LLVMMetadataRef sp)
@extern("LLVMSetSubprogram");

fn CUInt di_subprogram_get_line(
  LLVMMetadataRef subprogram)
@extern("LLVMDISubprogramGetLine");

fn LLVMMetadataRef instruction_get_debug_loc(
  LLVMValueRef inst)
@extern("LLVMInstructionGetDebugLoc");

fn void instruction_set_debug_loc(
  LLVMValueRef inst, 
  LLVMMetadataRef loc)
@extern("LLVMInstructionSetDebugLoc");

fn LLVMMetadataRef di_builder_create_label(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef context, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMBool always_preserve)
@extern("LLVMDIBuilderCreateLabel");

fn LLVMDbgRecordRef di_builder_insert_label_before(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef label_info, 
  LLVMMetadataRef location, 
  LLVMValueRef insert_before)
@extern("LLVMDIBuilderInsertLabelBefore");

fn LLVMDbgRecordRef di_builder_insert_label_at_end(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef label_info, 
  LLVMMetadataRef location, 
  LLVMBasicBlockRef insert_at_end)
@extern("LLVMDIBuilderInsertLabelAtEnd");

fn LLVMMetadataKind get_metadata_kind(
  LLVMMetadataRef metadata)
@extern("LLVMGetMetadataKind");

alias LLVMDisasmContextRef = void*;

alias LLVMOpInfoCallback = fn CInt(
  void* dis_info, 
  ulong pc, 
  ulong offset, 
  ulong op_size, 
  ulong inst_size, 
  CInt tag_type, 
  void* tag_buf);

struct LLVMOpInfoSymbol1 {
  ulong present;
  CChar* name;
  ulong value;
}

struct LLVMOpInfo1 {
  LLVMOpInfoSymbol1 add_symbol;
  LLVMOpInfoSymbol1 subtract_symbol;
  ulong value;
  ulong variant_kind;
}

alias LLVMSymbolLookupCallback = fn CChar*(
  void* dis_info, 
  ulong reference_value, 
  ulong* reference_type, 
  ulong reference_pc, 
  CChar** reference_name);

fn LLVMDisasmContextRef create_disasm(
  CChar* triple_name, 
  void* dis_info, 
  CInt tag_type, 
  LLVMOpInfoCallback get_op_info, 
  LLVMSymbolLookupCallback symbol_look_up)
@extern("LLVMCreateDisasm");

fn LLVMDisasmContextRef create_disasm_cpu(
  CChar* triple, 
  CChar* cpu, 
  void* dis_info, 
  CInt tag_type, 
  LLVMOpInfoCallback get_op_info, 
  LLVMSymbolLookupCallback symbol_look_up)
@extern("LLVMCreateDisasmCPU");

fn LLVMDisasmContextRef create_disasm_cpu_features(
  CChar* triple, 
  CChar* cpu, 
  CChar* features, 
  void* dis_info, 
  CInt tag_type, 
  LLVMOpInfoCallback get_op_info, 
  LLVMSymbolLookupCallback symbol_look_up)
@extern("LLVMCreateDisasmCPUFeatures");

fn CInt set_disasm_options(
  LLVMDisasmContextRef dc, 
  ulong options)
@extern("LLVMSetDisasmOptions");

fn void disasm_dispose(
  LLVMDisasmContextRef dc)
@extern("LLVMDisasmDispose");

fn usz disasm_instruction(
  LLVMDisasmContextRef dc, 
  char* bytes, 
  ulong bytes_size, 
  ulong pc, 
  CChar* out_string, 
  usz out_string_size)
@extern("LLVMDisasmInstruction");

alias LLVMErrorRef = void*;

alias LLVMErrorTypeId = void*;

fn LLVMErrorTypeId get_error_type_id(
  LLVMErrorRef err)
@extern("LLVMGetErrorTypeId");

fn void consume_error(
  LLVMErrorRef err)
@extern("LLVMConsumeError");

fn void cant_fail(
  LLVMErrorRef err)
@extern("LLVMCantFail");

fn CChar* get_error_message(
  LLVMErrorRef err)
@extern("LLVMGetErrorMessage");

fn void dispose_error_message(
  CChar* err_msg)
@extern("LLVMDisposeErrorMessage");

fn LLVMErrorTypeId get_string_error_type_id()
@extern("LLVMGetStringErrorTypeId");

fn LLVMErrorRef create_string_error(
  CChar* err_msg)
@extern("LLVMCreateStringError");

typedef LLVMByteOrdering = inline CUInt;
const LLVMByteOrdering BIGENDIAN = 0;
const LLVMByteOrdering LITTLEENDIAN = 1;

alias LLVMTargetDataRef = void*;

alias LLVMTargetLibraryInfoRef = void*;

fn void initialize_aarch64_target_info()
@extern("LLVMInitializeAArch64TargetInfo");

fn void initialize_amdgpu_target_info()
@extern("LLVMInitializeAMDGPUTargetInfo");

fn void initialize_arm_target_info()
@extern("LLVMInitializeARMTargetInfo");

fn void initialize_avr_target_info()
@extern("LLVMInitializeAVRTargetInfo");

fn void initialize_bpf_target_info()
@extern("LLVMInitializeBPFTargetInfo");

fn void initialize_hexagon_target_info()
@extern("LLVMInitializeHexagonTargetInfo");

fn void initialize_lanai_target_info()
@extern("LLVMInitializeLanaiTargetInfo");

fn void initialize_loong_arch_target_info()
@extern("LLVMInitializeLoongArchTargetInfo");

fn void initialize_mips_target_info()
@extern("LLVMInitializeMipsTargetInfo");

fn void initialize_msp430_target_info()
@extern("LLVMInitializeMSP430TargetInfo");

fn void initialize_nvptx_target_info()
@extern("LLVMInitializeNVPTXTargetInfo");

fn void initialize_power_pc_target_info()
@extern("LLVMInitializePowerPCTargetInfo");

fn void initialize_riscv_target_info()
@extern("LLVMInitializeRISCVTargetInfo");

fn void initialize_sparc_target_info()
@extern("LLVMInitializeSparcTargetInfo");

fn void initialize_spirv_target_info()
@extern("LLVMInitializeSPIRVTargetInfo");

fn void initialize_system_z_target_info()
@extern("LLVMInitializeSystemZTargetInfo");

fn void initialize_ve_target_info()
@extern("LLVMInitializeVETargetInfo");

fn void initialize_web_assembly_target_info()
@extern("LLVMInitializeWebAssemblyTargetInfo");

fn void initialize_x86_target_info()
@extern("LLVMInitializeX86TargetInfo");

fn void initialize_xcore_target_info()
@extern("LLVMInitializeXCoreTargetInfo");

fn void initialize_aarch64_target()
@extern("LLVMInitializeAArch64Target");

fn void initialize_amdgpu_target()
@extern("LLVMInitializeAMDGPUTarget");

fn void initialize_arm_target()
@extern("LLVMInitializeARMTarget");

fn void initialize_avr_target()
@extern("LLVMInitializeAVRTarget");

fn void initialize_bpf_target()
@extern("LLVMInitializeBPFTarget");

fn void initialize_hexagon_target()
@extern("LLVMInitializeHexagonTarget");

fn void initialize_lanai_target()
@extern("LLVMInitializeLanaiTarget");

fn void initialize_loong_arch_target()
@extern("LLVMInitializeLoongArchTarget");

fn void initialize_mips_target()
@extern("LLVMInitializeMipsTarget");

fn void initialize_msp430_target()
@extern("LLVMInitializeMSP430Target");

fn void initialize_nvptx_target()
@extern("LLVMInitializeNVPTXTarget");

fn void initialize_power_pc_target()
@extern("LLVMInitializePowerPCTarget");

fn void initialize_riscv_target()
@extern("LLVMInitializeRISCVTarget");

fn void initialize_sparc_target()
@extern("LLVMInitializeSparcTarget");

fn void initialize_spirv_target()
@extern("LLVMInitializeSPIRVTarget");

fn void initialize_system_z_target()
@extern("LLVMInitializeSystemZTarget");

fn void initialize_ve_target()
@extern("LLVMInitializeVETarget");

fn void initialize_web_assembly_target()
@extern("LLVMInitializeWebAssemblyTarget");

fn void initialize_x86_target()
@extern("LLVMInitializeX86Target");

fn void initialize_xcore_target()
@extern("LLVMInitializeXCoreTarget");

fn void initialize_aarch64_target_mc()
@extern("LLVMInitializeAArch64TargetMC");

fn void initialize_amdgpu_target_mc()
@extern("LLVMInitializeAMDGPUTargetMC");

fn void initialize_arm_target_mc()
@extern("LLVMInitializeARMTargetMC");

fn void initialize_avr_target_mc()
@extern("LLVMInitializeAVRTargetMC");

fn void initialize_bpf_target_mc()
@extern("LLVMInitializeBPFTargetMC");

fn void initialize_hexagon_target_mc()
@extern("LLVMInitializeHexagonTargetMC");

fn void initialize_lanai_target_mc()
@extern("LLVMInitializeLanaiTargetMC");

fn void initialize_loong_arch_target_mc()
@extern("LLVMInitializeLoongArchTargetMC");

fn void initialize_mips_target_mc()
@extern("LLVMInitializeMipsTargetMC");

fn void initialize_msp430_target_mc()
@extern("LLVMInitializeMSP430TargetMC");

fn void initialize_nvptx_target_mc()
@extern("LLVMInitializeNVPTXTargetMC");

fn void initialize_power_pc_target_mc()
@extern("LLVMInitializePowerPCTargetMC");

fn void initialize_riscv_target_mc()
@extern("LLVMInitializeRISCVTargetMC");

fn void initialize_sparc_target_mc()
@extern("LLVMInitializeSparcTargetMC");

fn void initialize_spirv_target_mc()
@extern("LLVMInitializeSPIRVTargetMC");

fn void initialize_system_z_target_mc()
@extern("LLVMInitializeSystemZTargetMC");

fn void initialize_ve_target_mc()
@extern("LLVMInitializeVETargetMC");

fn void initialize_web_assembly_target_mc()
@extern("LLVMInitializeWebAssemblyTargetMC");

fn void initialize_x86_target_mc()
@extern("LLVMInitializeX86TargetMC");

fn void initialize_xcore_target_mc()
@extern("LLVMInitializeXCoreTargetMC");

fn void initialize_aarch64_asm_printer()
@extern("LLVMInitializeAArch64AsmPrinter");

fn void initialize_amdgpu_asm_printer()
@extern("LLVMInitializeAMDGPUAsmPrinter");

fn void initialize_arm_asm_printer()
@extern("LLVMInitializeARMAsmPrinter");

fn void initialize_avr_asm_printer()
@extern("LLVMInitializeAVRAsmPrinter");

fn void initialize_bpf_asm_printer()
@extern("LLVMInitializeBPFAsmPrinter");

fn void initialize_hexagon_asm_printer()
@extern("LLVMInitializeHexagonAsmPrinter");

fn void initialize_lanai_asm_printer()
@extern("LLVMInitializeLanaiAsmPrinter");

fn void initialize_loong_arch_asm_printer()
@extern("LLVMInitializeLoongArchAsmPrinter");

fn void initialize_mips_asm_printer()
@extern("LLVMInitializeMipsAsmPrinter");

fn void initialize_msp430_asm_printer()
@extern("LLVMInitializeMSP430AsmPrinter");

fn void initialize_nvptx_asm_printer()
@extern("LLVMInitializeNVPTXAsmPrinter");

fn void initialize_power_pc_asm_printer()
@extern("LLVMInitializePowerPCAsmPrinter");

fn void initialize_riscv_asm_printer()
@extern("LLVMInitializeRISCVAsmPrinter");

fn void initialize_sparc_asm_printer()
@extern("LLVMInitializeSparcAsmPrinter");

fn void initialize_spirv_asm_printer()
@extern("LLVMInitializeSPIRVAsmPrinter");

fn void initialize_system_z_asm_printer()
@extern("LLVMInitializeSystemZAsmPrinter");

fn void initialize_ve_asm_printer()
@extern("LLVMInitializeVEAsmPrinter");

fn void initialize_web_assembly_asm_printer()
@extern("LLVMInitializeWebAssemblyAsmPrinter");

fn void initialize_x86_asm_printer()
@extern("LLVMInitializeX86AsmPrinter");

fn void initialize_xcore_asm_printer()
@extern("LLVMInitializeXCoreAsmPrinter");

fn void initialize_aarch64_asm_parser()
@extern("LLVMInitializeAArch64AsmParser");

fn void initialize_amdgpu_asm_parser()
@extern("LLVMInitializeAMDGPUAsmParser");

fn void initialize_arm_asm_parser()
@extern("LLVMInitializeARMAsmParser");

fn void initialize_avr_asm_parser()
@extern("LLVMInitializeAVRAsmParser");

fn void initialize_bpf_asm_parser()
@extern("LLVMInitializeBPFAsmParser");

fn void initialize_hexagon_asm_parser()
@extern("LLVMInitializeHexagonAsmParser");

fn void initialize_lanai_asm_parser()
@extern("LLVMInitializeLanaiAsmParser");

fn void initialize_loong_arch_asm_parser()
@extern("LLVMInitializeLoongArchAsmParser");

fn void initialize_mips_asm_parser()
@extern("LLVMInitializeMipsAsmParser");

fn void initialize_msp430_asm_parser()
@extern("LLVMInitializeMSP430AsmParser");

fn void initialize_power_pc_asm_parser()
@extern("LLVMInitializePowerPCAsmParser");

fn void initialize_riscv_asm_parser()
@extern("LLVMInitializeRISCVAsmParser");

fn void initialize_sparc_asm_parser()
@extern("LLVMInitializeSparcAsmParser");

fn void initialize_system_z_asm_parser()
@extern("LLVMInitializeSystemZAsmParser");

fn void initialize_ve_asm_parser()
@extern("LLVMInitializeVEAsmParser");

fn void initialize_web_assembly_asm_parser()
@extern("LLVMInitializeWebAssemblyAsmParser");

fn void initialize_x86_asm_parser()
@extern("LLVMInitializeX86AsmParser");

fn void initialize_aarch64_disassembler()
@extern("LLVMInitializeAArch64Disassembler");

fn void initialize_amdgpu_disassembler()
@extern("LLVMInitializeAMDGPUDisassembler");

fn void initialize_arm_disassembler()
@extern("LLVMInitializeARMDisassembler");

fn void initialize_avr_disassembler()
@extern("LLVMInitializeAVRDisassembler");

fn void initialize_bpf_disassembler()
@extern("LLVMInitializeBPFDisassembler");

fn void initialize_hexagon_disassembler()
@extern("LLVMInitializeHexagonDisassembler");

fn void initialize_lanai_disassembler()
@extern("LLVMInitializeLanaiDisassembler");

fn void initialize_loong_arch_disassembler()
@extern("LLVMInitializeLoongArchDisassembler");

fn void initialize_mips_disassembler()
@extern("LLVMInitializeMipsDisassembler");

fn void initialize_msp430_disassembler()
@extern("LLVMInitializeMSP430Disassembler");

fn void initialize_power_pc_disassembler()
@extern("LLVMInitializePowerPCDisassembler");

fn void initialize_riscv_disassembler()
@extern("LLVMInitializeRISCVDisassembler");

fn void initialize_sparc_disassembler()
@extern("LLVMInitializeSparcDisassembler");

fn void initialize_system_z_disassembler()
@extern("LLVMInitializeSystemZDisassembler");

fn void initialize_ve_disassembler()
@extern("LLVMInitializeVEDisassembler");

fn void initialize_web_assembly_disassembler()
@extern("LLVMInitializeWebAssemblyDisassembler");

fn void initialize_x86_disassembler()
@extern("LLVMInitializeX86Disassembler");

fn void initialize_xcore_disassembler()
@extern("LLVMInitializeXCoreDisassembler");

fn void initialize_all_target_infos()
@extern("LLVMInitializeAllTargetInfos");

fn void initialize_all_targets()
@extern("LLVMInitializeAllTargets");

fn void initialize_all_target_m_cs()
@extern("LLVMInitializeAllTargetMCs");

fn void initialize_all_asm_printers()
@extern("LLVMInitializeAllAsmPrinters");

fn void initialize_all_asm_parsers()
@extern("LLVMInitializeAllAsmParsers");

fn void initialize_all_disassemblers()
@extern("LLVMInitializeAllDisassemblers");

fn LLVMBool initialize_native_target()
@extern("LLVMInitializeNativeTarget");

fn LLVMBool initialize_native_asm_parser()
@extern("LLVMInitializeNativeAsmParser");

fn LLVMBool initialize_native_asm_printer()
@extern("LLVMInitializeNativeAsmPrinter");

fn LLVMBool initialize_native_disassembler()
@extern("LLVMInitializeNativeDisassembler");

fn LLVMTargetDataRef get_module_data_layout(
  LLVMModuleRef m)
@extern("LLVMGetModuleDataLayout");

fn void set_module_data_layout(
  LLVMModuleRef m, 
  LLVMTargetDataRef dl)
@extern("LLVMSetModuleDataLayout");

fn LLVMTargetDataRef create_target_data(
  CChar* string_rep)
@extern("LLVMCreateTargetData");

fn void dispose_target_data(
  LLVMTargetDataRef td)
@extern("LLVMDisposeTargetData");

fn void add_target_library_info(
  LLVMTargetLibraryInfoRef tli, 
  LLVMPassManagerRef pm)
@extern("LLVMAddTargetLibraryInfo");

fn CChar* copy_string_rep_of_target_data(
  LLVMTargetDataRef td)
@extern("LLVMCopyStringRepOfTargetData");

fn LLVMByteOrdering byte_order(
  LLVMTargetDataRef td)
@extern("LLVMByteOrder");

fn CUInt pointer_size(
  LLVMTargetDataRef td)
@extern("LLVMPointerSize");

fn CUInt pointer_size_for_as(
  LLVMTargetDataRef td, 
  CUInt as)
@extern("LLVMPointerSizeForAS");

fn LLVMTypeRef int_ptr_type(
  LLVMTargetDataRef td)
@extern("LLVMIntPtrType");

fn LLVMTypeRef int_ptr_type_for_as(
  LLVMTargetDataRef td, 
  CUInt as)
@extern("LLVMIntPtrTypeForAS");

fn LLVMTypeRef int_ptr_type_in_context(
  LLVMContextRef c, 
  LLVMTargetDataRef td)
@extern("LLVMIntPtrTypeInContext");

fn LLVMTypeRef int_ptr_type_for_as_in_context(
  LLVMContextRef c, 
  LLVMTargetDataRef td, 
  CUInt as)
@extern("LLVMIntPtrTypeForASInContext");

fn CULongLong size_of_type_in_bits(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMSizeOfTypeInBits");

fn CULongLong store_size_of_type(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMStoreSizeOfType");

fn CULongLong abi_size_of_type(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMABISizeOfType");

fn CUInt abi_alignment_of_type(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMABIAlignmentOfType");

fn CUInt call_frame_alignment_of_type(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMCallFrameAlignmentOfType");

fn CUInt preferred_alignment_of_type(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMPreferredAlignmentOfType");

fn CUInt preferred_alignment_of_global(
  LLVMTargetDataRef td, 
  LLVMValueRef global_var)
@extern("LLVMPreferredAlignmentOfGlobal");

fn CUInt element_at_offset(
  LLVMTargetDataRef td, 
  LLVMTypeRef struct_ty, 
  CULongLong offset)
@extern("LLVMElementAtOffset");

fn CULongLong offset_of_element(
  LLVMTargetDataRef td, 
  LLVMTypeRef struct_ty, 
  CUInt element)
@extern("LLVMOffsetOfElement");

alias LLVMTargetMachineOptionsRef = void*;

alias LLVMTargetMachineRef = void*;

alias LLVMTargetRef = void*;

typedef LLVMCodeGenOptLevel = inline CUInt;
const LLVMCodeGenOptLevel CODEGENLEVELNONE = 0;
const LLVMCodeGenOptLevel CODEGENLEVELLESS = 1;
const LLVMCodeGenOptLevel CODEGENLEVELDEFAULT = 2;
const LLVMCodeGenOptLevel CODEGENLEVELAGGRESSIVE = 3;

typedef LLVMRelocMode = inline CUInt;
const LLVMRelocMode RELOCDEFAULT = 0;
const LLVMRelocMode RELOCSTATIC = 1;
const LLVMRelocMode RELOCPIC = 2;
const LLVMRelocMode RELOCDYNAMICNOPIC = 3;
const LLVMRelocMode RELOCROPI = 4;
const LLVMRelocMode RELOCRWPI = 5;
const LLVMRelocMode RELOCROPI_RWPI = 6;

typedef LLVMCodeModel = inline CUInt;
const LLVMCodeModel CODEMODELDEFAULT = 0;
const LLVMCodeModel CODEMODELJITDEFAULT = 1;
const LLVMCodeModel CODEMODELTINY = 2;
const LLVMCodeModel CODEMODELSMALL = 3;
const LLVMCodeModel CODEMODELKERNEL = 4;
const LLVMCodeModel CODEMODELMEDIUM = 5;
const LLVMCodeModel CODEMODELLARGE = 6;

typedef LLVMCodeGenFileType = inline CUInt;
const LLVMCodeGenFileType ASSEMBLYFILE = 0;
const LLVMCodeGenFileType OBJECTFILE = 1;

typedef LLVMGlobalISelAbortMode = inline CUInt;
const LLVMGlobalISelAbortMode GLOBALISELABORTENABLE = 0;
const LLVMGlobalISelAbortMode GLOBALISELABORTDISABLE = 1;
const LLVMGlobalISelAbortMode GLOBALISELABORTDISABLEWITHDIAG = 2;

fn LLVMTargetRef get_first_target()
@extern("LLVMGetFirstTarget");

fn LLVMTargetRef get_next_target(
  LLVMTargetRef t)
@extern("LLVMGetNextTarget");

fn LLVMTargetRef get_target_from_name(
  CChar* name)
@extern("LLVMGetTargetFromName");

fn LLVMBool get_target_from_triple(
  CChar* triple, 
  LLVMTargetRef* t, 
  CChar** error_message)
@extern("LLVMGetTargetFromTriple");

fn CChar* get_target_name(
  LLVMTargetRef t)
@extern("LLVMGetTargetName");

fn CChar* get_target_description(
  LLVMTargetRef t)
@extern("LLVMGetTargetDescription");

fn LLVMBool target_has_jit(
  LLVMTargetRef t)
@extern("LLVMTargetHasJIT");

fn LLVMBool target_has_target_machine(
  LLVMTargetRef t)
@extern("LLVMTargetHasTargetMachine");

fn LLVMBool target_has_asm_backend(
  LLVMTargetRef t)
@extern("LLVMTargetHasAsmBackend");

fn LLVMTargetMachineOptionsRef create_target_machine_options()
@extern("LLVMCreateTargetMachineOptions");

fn void dispose_target_machine_options(
  LLVMTargetMachineOptionsRef options)
@extern("LLVMDisposeTargetMachineOptions");

fn void target_machine_options_set_cpu(
  LLVMTargetMachineOptionsRef options, 
  CChar* cpu)
@extern("LLVMTargetMachineOptionsSetCPU");

fn void target_machine_options_set_features(
  LLVMTargetMachineOptionsRef options, 
  CChar* features)
@extern("LLVMTargetMachineOptionsSetFeatures");

fn void target_machine_options_set_abi(
  LLVMTargetMachineOptionsRef options, 
  CChar* abi)
@extern("LLVMTargetMachineOptionsSetABI");

fn void target_machine_options_set_code_gen_opt_level(
  LLVMTargetMachineOptionsRef options, 
  LLVMCodeGenOptLevel level)
@extern("LLVMTargetMachineOptionsSetCodeGenOptLevel");

fn void target_machine_options_set_reloc_mode(
  LLVMTargetMachineOptionsRef options, 
  LLVMRelocMode reloc)
@extern("LLVMTargetMachineOptionsSetRelocMode");

fn void target_machine_options_set_code_model(
  LLVMTargetMachineOptionsRef options, 
  LLVMCodeModel code_model)
@extern("LLVMTargetMachineOptionsSetCodeModel");

fn LLVMTargetMachineRef create_target_machine_with_options(
  LLVMTargetRef t, 
  CChar* triple, 
  LLVMTargetMachineOptionsRef options)
@extern("LLVMCreateTargetMachineWithOptions");

fn LLVMTargetMachineRef create_target_machine(
  LLVMTargetRef t, 
  CChar* triple, 
  CChar* cpu, 
  CChar* features, 
  LLVMCodeGenOptLevel level, 
  LLVMRelocMode reloc, 
  LLVMCodeModel code_model)
@extern("LLVMCreateTargetMachine");

fn void dispose_target_machine(
  LLVMTargetMachineRef t)
@extern("LLVMDisposeTargetMachine");

fn LLVMTargetRef get_target_machine_target(
  LLVMTargetMachineRef t)
@extern("LLVMGetTargetMachineTarget");

fn CChar* get_target_machine_triple(
  LLVMTargetMachineRef t)
@extern("LLVMGetTargetMachineTriple");

fn CChar* get_target_machine_cpu(
  LLVMTargetMachineRef t)
@extern("LLVMGetTargetMachineCPU");

fn CChar* get_target_machine_feature_string(
  LLVMTargetMachineRef t)
@extern("LLVMGetTargetMachineFeatureString");

fn LLVMTargetDataRef create_target_data_layout(
  LLVMTargetMachineRef t)
@extern("LLVMCreateTargetDataLayout");

fn void set_target_machine_asm_verbosity(
  LLVMTargetMachineRef t, 
  LLVMBool verbose_asm)
@extern("LLVMSetTargetMachineAsmVerbosity");

fn void set_target_machine_fast_i_sel(
  LLVMTargetMachineRef t, 
  LLVMBool enable)
@extern("LLVMSetTargetMachineFastISel");

fn void set_target_machine_global_i_sel(
  LLVMTargetMachineRef t, 
  LLVMBool enable)
@extern("LLVMSetTargetMachineGlobalISel");

fn void set_target_machine_global_i_sel_abort(
  LLVMTargetMachineRef t, 
  LLVMGlobalISelAbortMode mode)
@extern("LLVMSetTargetMachineGlobalISelAbort");

fn void set_target_machine_machine_outliner(
  LLVMTargetMachineRef t, 
  LLVMBool enable)
@extern("LLVMSetTargetMachineMachineOutliner");

fn LLVMBool target_machine_emit_to_file(
  LLVMTargetMachineRef t, 
  LLVMModuleRef m, 
  CChar* filename, 
  LLVMCodeGenFileType codegen, 
  CChar** error_message)
@extern("LLVMTargetMachineEmitToFile");

fn LLVMBool target_machine_emit_to_memory_buffer(
  LLVMTargetMachineRef t, 
  LLVMModuleRef m, 
  LLVMCodeGenFileType codegen, 
  CChar** error_message, 
  LLVMMemoryBufferRef* out_mem_buf)
@extern("LLVMTargetMachineEmitToMemoryBuffer");

fn CChar* get_default_target_triple()
@extern("LLVMGetDefaultTargetTriple");

fn CChar* normalize_target_triple(
  CChar* triple)
@extern("LLVMNormalizeTargetTriple");

fn CChar* get_host_cpu_name()
@extern("LLVMGetHostCPUName");

fn CChar* get_host_cpu_features()
@extern("LLVMGetHostCPUFeatures");

fn void add_analysis_passes(
  LLVMTargetMachineRef t, 
  LLVMPassManagerRef pm)
@extern("LLVMAddAnalysisPasses");

fn void link_in_mcjit()
@extern("LLVMLinkInMCJIT");

fn void link_in_interpreter()
@extern("LLVMLinkInInterpreter");

alias LLVMGenericValueRef = void*;

alias LLVMExecutionEngineRef = void*;

alias LLVMMCJITMemoryManagerRef = void*;

struct LLVMMCJITCompilerOptions {
  CUInt opt_level;
  LLVMCodeModel code_model;
  LLVMBool no_frame_pointer_elim;
  LLVMBool enable_fast_i_sel;
  LLVMMCJITMemoryManagerRef mcjmm;
}

fn LLVMGenericValueRef create_generic_value_of_int(
  LLVMTypeRef ty, 
  CULongLong n, 
  LLVMBool is_signed)
@extern("LLVMCreateGenericValueOfInt");

fn LLVMGenericValueRef create_generic_value_of_pointer(
  void* p)
@extern("LLVMCreateGenericValueOfPointer");

fn LLVMGenericValueRef create_generic_value_of_float(
  LLVMTypeRef ty, 
  double n)
@extern("LLVMCreateGenericValueOfFloat");

fn CUInt generic_value_int_width(
  LLVMGenericValueRef gen_val_ref)
@extern("LLVMGenericValueIntWidth");

fn CULongLong generic_value_to_int(
  LLVMGenericValueRef gen_val, 
  LLVMBool is_signed)
@extern("LLVMGenericValueToInt");

fn void* generic_value_to_pointer(
  LLVMGenericValueRef gen_val)
@extern("LLVMGenericValueToPointer");

fn double generic_value_to_float(
  LLVMTypeRef ty_ref, 
  LLVMGenericValueRef gen_val)
@extern("LLVMGenericValueToFloat");

fn void dispose_generic_value(
  LLVMGenericValueRef gen_val)
@extern("LLVMDisposeGenericValue");

fn LLVMBool create_execution_engine_for_module(
  LLVMExecutionEngineRef* out_ee, 
  LLVMModuleRef m, 
  CChar** out_error)
@extern("LLVMCreateExecutionEngineForModule");

fn LLVMBool create_interpreter_for_module(
  LLVMExecutionEngineRef* out_interp, 
  LLVMModuleRef m, 
  CChar** out_error)
@extern("LLVMCreateInterpreterForModule");

fn LLVMBool create_jit_compiler_for_module(
  LLVMExecutionEngineRef* out_jit, 
  LLVMModuleRef m, 
  CUInt opt_level, 
  CChar** out_error)
@extern("LLVMCreateJITCompilerForModule");

fn void initialize_mcjit_compiler_options(
  LLVMMCJITCompilerOptions* options, 
  usz size_of_options)
@extern("LLVMInitializeMCJITCompilerOptions");

fn LLVMBool create_mcjit_compiler_for_module(
  LLVMExecutionEngineRef* out_jit, 
  LLVMModuleRef m, 
  LLVMMCJITCompilerOptions* options, 
  usz size_of_options, 
  CChar** out_error)
@extern("LLVMCreateMCJITCompilerForModule");

fn void dispose_execution_engine(
  LLVMExecutionEngineRef ee)
@extern("LLVMDisposeExecutionEngine");

fn void run_static_constructors(
  LLVMExecutionEngineRef ee)
@extern("LLVMRunStaticConstructors");

fn void run_static_destructors(
  LLVMExecutionEngineRef ee)
@extern("LLVMRunStaticDestructors");

fn CInt run_function_as_main(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef f, 
  CUInt arg_c, 
  CChar** arg_v, 
  CChar** env_p)
@extern("LLVMRunFunctionAsMain");

fn LLVMGenericValueRef run_function(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef f, 
  CUInt num_args, 
  LLVMGenericValueRef* args)
@extern("LLVMRunFunction");

fn void free_machine_code_for_function(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef f)
@extern("LLVMFreeMachineCodeForFunction");

fn void add_module(
  LLVMExecutionEngineRef ee, 
  LLVMModuleRef m)
@extern("LLVMAddModule");

fn LLVMBool remove_module(
  LLVMExecutionEngineRef ee, 
  LLVMModuleRef m, 
  LLVMModuleRef* out_mod, 
  CChar** out_error)
@extern("LLVMRemoveModule");

fn LLVMBool find_function(
  LLVMExecutionEngineRef ee, 
  CChar* name, 
  LLVMValueRef* out_fn)
@extern("LLVMFindFunction");

fn void* recompile_and_relink_function(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef fn_)
@extern("LLVMRecompileAndRelinkFunction");

fn LLVMTargetDataRef get_execution_engine_target_data(
  LLVMExecutionEngineRef ee)
@extern("LLVMGetExecutionEngineTargetData");

fn LLVMTargetMachineRef get_execution_engine_target_machine(
  LLVMExecutionEngineRef ee)
@extern("LLVMGetExecutionEngineTargetMachine");

fn void add_global_mapping(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef global, 
  void* addr)
@extern("LLVMAddGlobalMapping");

fn void* get_pointer_to_global(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef global)
@extern("LLVMGetPointerToGlobal");

fn ulong get_global_value_address(
  LLVMExecutionEngineRef ee, 
  CChar* name)
@extern("LLVMGetGlobalValueAddress");

fn ulong get_function_address(
  LLVMExecutionEngineRef ee, 
  CChar* name)
@extern("LLVMGetFunctionAddress");

fn LLVMBool execution_engine_get_err_msg(
  LLVMExecutionEngineRef ee, 
  CChar** out_error)
@extern("LLVMExecutionEngineGetErrMsg");

alias LLVMMemoryManagerAllocateCodeSectionCallback = fn char*(
  void* opaque, 
  uptr size, 
  CUInt alignment, 
  CUInt section_id, 
  CChar* section_name);

alias LLVMMemoryManagerAllocateDataSectionCallback = fn char*(
  void* opaque, 
  uptr size, 
  CUInt alignment, 
  CUInt section_id, 
  CChar* section_name, 
  LLVMBool is_read_only);

alias LLVMMemoryManagerFinalizeMemoryCallback = fn LLVMBool(
  void* opaque, 
  CChar** err_msg);

alias LLVMMemoryManagerDestroyCallback = fn void(
  void* opaque);

fn LLVMMCJITMemoryManagerRef create_simple_mcjit_memory_manager(
  void* opaque, 
  LLVMMemoryManagerAllocateCodeSectionCallback allocate_code_section, 
  LLVMMemoryManagerAllocateDataSectionCallback allocate_data_section, 
  LLVMMemoryManagerFinalizeMemoryCallback finalize_memory, 
  LLVMMemoryManagerDestroyCallback destroy)
@extern("LLVMCreateSimpleMCJITMemoryManager");

fn void dispose_mcjit_memory_manager(
  LLVMMCJITMemoryManagerRef mm)
@extern("LLVMDisposeMCJITMemoryManager");

fn LLVMJITEventListenerRef create_gdb_registration_listener()
@extern("LLVMCreateGDBRegistrationListener");

fn LLVMJITEventListenerRef create_intel_jit_event_listener()
@extern("LLVMCreateIntelJITEventListener");

fn LLVMJITEventListenerRef create_o_profile_jit_event_listener()
@extern("LLVMCreateOProfileJITEventListener");

fn LLVMJITEventListenerRef create_perf_jit_event_listener()
@extern("LLVMCreatePerfJITEventListener");

fn LLVMBool parse_ir_in_context(
  LLVMContextRef context_ref, 
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_m, 
  CChar** out_message)
@extern("LLVMParseIRInContext");

alias LLVMOrcJITTargetAddress = ulong;

alias LLVMOrcExecutorAddress = ulong;

typedef LLVMJITSymbolGenericFlags = inline CUInt;
const LLVMJITSymbolGenericFlags JITSYMBOLGENERICFLAGSNONE = 0;
const LLVMJITSymbolGenericFlags JITSYMBOLGENERICFLAGSEXPORTED = 1U<<0;
const LLVMJITSymbolGenericFlags JITSYMBOLGENERICFLAGSWEAK = 1U<<1;
const LLVMJITSymbolGenericFlags JITSYMBOLGENERICFLAGSCALLABLE = 1U<<2;
const LLVMJITSymbolGenericFlags JITSYMBOLGENERICFLAGSMATERIALIZATIONSIDEEFFECTSONLY = 1U<<3;

alias LLVMJITSymbolTargetFlags = char;

struct LLVMJITSymbolFlags {
  char generic_flags;
  char target_flags;
}

struct LLVMJITEvaluatedSymbol {
  LLVMOrcExecutorAddress address;
  LLVMJITSymbolFlags flags;
}

alias LLVMOrcExecutionSessionRef = void*;

alias LLVMOrcErrorReporterFunction = fn void(
  void* ctx, 
  LLVMErrorRef err);

alias LLVMOrcSymbolStringPoolRef = void*;

alias LLVMOrcSymbolStringPoolEntryRef = void*;

struct LLVMOrcCSymbolFlagsMapPair {
  LLVMOrcSymbolStringPoolEntryRef name;
  LLVMJITSymbolFlags flags;
}

alias LLVMOrcCSymbolFlagsMapPairs = LLVMOrcCSymbolFlagsMapPair*;

struct LLVMOrcCSymbolMapPair {
  LLVMOrcSymbolStringPoolEntryRef name;
  LLVMJITEvaluatedSymbol sym;
}

alias LLVMOrcCSymbolMapPairs = LLVMOrcCSymbolMapPair*;

struct LLVMOrcCSymbolAliasMapEntry {
  LLVMOrcSymbolStringPoolEntryRef name;
  LLVMJITSymbolFlags flags;
}

struct LLVMOrcCSymbolAliasMapPair {
  LLVMOrcSymbolStringPoolEntryRef name;
  LLVMOrcCSymbolAliasMapEntry entry;
}

alias LLVMOrcCSymbolAliasMapPairs = LLVMOrcCSymbolAliasMapPair*;

alias LLVMOrcJITDylibRef = void*;

struct LLVMOrcCSymbolsList {
  LLVMOrcSymbolStringPoolEntryRef* symbols;
  usz length;
}

struct LLVMOrcCDependenceMapPair {
  LLVMOrcJITDylibRef jd;
  LLVMOrcCSymbolsList names;
}

alias LLVMOrcCDependenceMapPairs = LLVMOrcCDependenceMapPair*;

struct LLVMOrcCSymbolDependenceGroup {
  LLVMOrcCSymbolsList symbols;
  LLVMOrcCDependenceMapPairs dependencies;
  usz num_dependencies;
}

typedef LLVMOrcLookupKind = inline CUInt;
const LLVMOrcLookupKind ORCLOOKUPKINDSTATIC = 0;
const LLVMOrcLookupKind ORCLOOKUPKINDDLSYM = 1;

typedef LLVMOrcJITDylibLookupFlags = inline CUInt;
const LLVMOrcJITDylibLookupFlags ORCJITDYLIBLOOKUPFLAGSMATCHEXPORTEDSYMBOLSONLY = 0;
const LLVMOrcJITDylibLookupFlags ORCJITDYLIBLOOKUPFLAGSMATCHALLSYMBOLS = 1;

struct LLVMOrcCJITDylibSearchOrderElement {
  LLVMOrcJITDylibRef jd;
  LLVMOrcJITDylibLookupFlags jd_lookup_flags;
}

alias LLVMOrcCJITDylibSearchOrder = LLVMOrcCJITDylibSearchOrderElement*;

typedef LLVMOrcSymbolLookupFlags = inline CUInt;
const LLVMOrcSymbolLookupFlags ORCSYMBOLLOOKUPFLAGSREQUIREDSYMBOL = 0;
const LLVMOrcSymbolLookupFlags ORCSYMBOLLOOKUPFLAGSWEAKLYREFERENCEDSYMBOL = 1;

struct LLVMOrcCLookupSetElement {
  LLVMOrcSymbolStringPoolEntryRef name;
  LLVMOrcSymbolLookupFlags lookup_flags;
}

alias LLVMOrcCLookupSet = LLVMOrcCLookupSetElement*;

alias LLVMOrcMaterializationUnitRef = void*;

alias LLVMOrcMaterializationResponsibilityRef = void*;

alias LLVMOrcMaterializationUnitMaterializeFunction = fn void(
  void* ctx, 
  LLVMOrcMaterializationResponsibilityRef mr);

alias LLVMOrcMaterializationUnitDiscardFunction = fn void(
  void* ctx, 
  LLVMOrcJITDylibRef jd, 
  LLVMOrcSymbolStringPoolEntryRef symbol);

alias LLVMOrcMaterializationUnitDestroyFunction = fn void(
  void* ctx);

alias LLVMOrcResourceTrackerRef = void*;

alias LLVMOrcDefinitionGeneratorRef = void*;

alias LLVMOrcLookupStateRef = void*;

alias LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction = fn LLVMErrorRef(
  LLVMOrcDefinitionGeneratorRef generator_obj, 
  void* ctx, 
  LLVMOrcLookupStateRef* lookup_state, 
  LLVMOrcLookupKind kind, 
  LLVMOrcJITDylibRef jd, 
  LLVMOrcJITDylibLookupFlags jd_lookup_flags, 
  LLVMOrcCLookupSet lookup_set, 
  usz lookup_set_size);

alias LLVMOrcDisposeCAPIDefinitionGeneratorFunction = fn void(
  void* ctx);

alias LLVMOrcSymbolPredicate = fn CInt(
  void* ctx, 
  LLVMOrcSymbolStringPoolEntryRef sym);

alias LLVMOrcThreadSafeContextRef = void*;

alias LLVMOrcThreadSafeModuleRef = void*;

alias LLVMOrcGenericIRModuleOperationFunction = fn LLVMErrorRef(
  void* ctx, 
  LLVMModuleRef m);

alias LLVMOrcJITTargetMachineBuilderRef = void*;

alias LLVMOrcObjectLayerRef = void*;

alias LLVMOrcObjectLinkingLayerRef = void*;

alias LLVMOrcIRTransformLayerRef = void*;

alias LLVMOrcIRTransformLayerTransformFunction = fn LLVMErrorRef(
  void* ctx, 
  LLVMOrcThreadSafeModuleRef* mod_in_out, 
  LLVMOrcMaterializationResponsibilityRef mr);

alias LLVMOrcObjectTransformLayerRef = void*;

alias LLVMOrcObjectTransformLayerTransformFunction = fn LLVMErrorRef(
  void* ctx, 
  LLVMMemoryBufferRef* obj_in_out);

alias LLVMOrcIndirectStubsManagerRef = void*;

alias LLVMOrcLazyCallThroughManagerRef = void*;

alias LLVMOrcDumpObjectsRef = void*;

fn void orc_execution_session_set_error_reporter(
  LLVMOrcExecutionSessionRef es, 
  LLVMOrcErrorReporterFunction report_error, 
  void* ctx)
@extern("LLVMOrcExecutionSessionSetErrorReporter");

fn LLVMOrcSymbolStringPoolRef orc_execution_session_get_symbol_string_pool(
  LLVMOrcExecutionSessionRef es)
@extern("LLVMOrcExecutionSessionGetSymbolStringPool");

fn void orc_symbol_string_pool_clear_dead_entries(
  LLVMOrcSymbolStringPoolRef ssp)
@extern("LLVMOrcSymbolStringPoolClearDeadEntries");

fn LLVMOrcSymbolStringPoolEntryRef orc_execution_session_intern(
  LLVMOrcExecutionSessionRef es, 
  CChar* name)
@extern("LLVMOrcExecutionSessionIntern");

alias LLVMOrcExecutionSessionLookupHandleResultFunction = fn void(
  LLVMErrorRef err, 
  LLVMOrcCSymbolMapPairs result, 
  usz num_pairs, 
  void* ctx);

fn void orc_execution_session_lookup(
  LLVMOrcExecutionSessionRef es, 
  LLVMOrcLookupKind k, 
  LLVMOrcCJITDylibSearchOrder search_order, 
  usz search_order_size, 
  LLVMOrcCLookupSet symbols, 
  usz symbols_size, 
  LLVMOrcExecutionSessionLookupHandleResultFunction handle_result, 
  void* ctx)
@extern("LLVMOrcExecutionSessionLookup");

fn void orc_retain_symbol_string_pool_entry(
  LLVMOrcSymbolStringPoolEntryRef s)
@extern("LLVMOrcRetainSymbolStringPoolEntry");

fn void orc_release_symbol_string_pool_entry(
  LLVMOrcSymbolStringPoolEntryRef s)
@extern("LLVMOrcReleaseSymbolStringPoolEntry");

fn CChar* orc_symbol_string_pool_entry_str(
  LLVMOrcSymbolStringPoolEntryRef s)
@extern("LLVMOrcSymbolStringPoolEntryStr");

fn void orc_release_resource_tracker(
  LLVMOrcResourceTrackerRef rt)
@extern("LLVMOrcReleaseResourceTracker");

fn void orc_resource_tracker_transfer_to(
  LLVMOrcResourceTrackerRef src_rt, 
  LLVMOrcResourceTrackerRef dst_rt)
@extern("LLVMOrcResourceTrackerTransferTo");

fn LLVMErrorRef orc_resource_tracker_remove(
  LLVMOrcResourceTrackerRef rt)
@extern("LLVMOrcResourceTrackerRemove");

fn void orc_dispose_definition_generator(
  LLVMOrcDefinitionGeneratorRef dg)
@extern("LLVMOrcDisposeDefinitionGenerator");

fn void orc_dispose_materialization_unit(
  LLVMOrcMaterializationUnitRef mu)
@extern("LLVMOrcDisposeMaterializationUnit");

fn LLVMOrcMaterializationUnitRef orc_create_custom_materialization_unit(
  CChar* name, 
  void* ctx, 
  LLVMOrcCSymbolFlagsMapPairs syms, 
  usz num_syms, 
  LLVMOrcSymbolStringPoolEntryRef init_sym, 
  LLVMOrcMaterializationUnitMaterializeFunction materialize, 
  LLVMOrcMaterializationUnitDiscardFunction discard, 
  LLVMOrcMaterializationUnitDestroyFunction destroy)
@extern("LLVMOrcCreateCustomMaterializationUnit");

fn LLVMOrcMaterializationUnitRef orc_absolute_symbols(
  LLVMOrcCSymbolMapPairs syms, 
  usz num_pairs)
@extern("LLVMOrcAbsoluteSymbols");

fn LLVMOrcMaterializationUnitRef orc_lazy_reexports(
  LLVMOrcLazyCallThroughManagerRef lctm, 
  LLVMOrcIndirectStubsManagerRef ism, 
  LLVMOrcJITDylibRef source_ref, 
  LLVMOrcCSymbolAliasMapPairs callable_aliases, 
  usz num_pairs)
@extern("LLVMOrcLazyReexports");

fn void orc_dispose_materialization_responsibility(
  LLVMOrcMaterializationResponsibilityRef mr)
@extern("LLVMOrcDisposeMaterializationResponsibility");

fn LLVMOrcJITDylibRef orc_materialization_responsibility_get_target_dylib(
  LLVMOrcMaterializationResponsibilityRef mr)
@extern("LLVMOrcMaterializationResponsibilityGetTargetDylib");

fn LLVMOrcExecutionSessionRef orc_materialization_responsibility_get_execution_session(
  LLVMOrcMaterializationResponsibilityRef mr)
@extern("LLVMOrcMaterializationResponsibilityGetExecutionSession");

fn LLVMOrcCSymbolFlagsMapPairs orc_materialization_responsibility_get_symbols(
  LLVMOrcMaterializationResponsibilityRef mr, 
  usz* num_pairs)
@extern("LLVMOrcMaterializationResponsibilityGetSymbols");

fn void orc_dispose_c_symbol_flags_map(
  LLVMOrcCSymbolFlagsMapPairs pairs)
@extern("LLVMOrcDisposeCSymbolFlagsMap");

fn LLVMOrcSymbolStringPoolEntryRef orc_materialization_responsibility_get_initializer_symbol(
  LLVMOrcMaterializationResponsibilityRef mr)
@extern("LLVMOrcMaterializationResponsibilityGetInitializerSymbol");

fn LLVMOrcSymbolStringPoolEntryRef* orc_materialization_responsibility_get_requested_symbols(
  LLVMOrcMaterializationResponsibilityRef mr, 
  usz* num_symbols)
@extern("LLVMOrcMaterializationResponsibilityGetRequestedSymbols");

fn void orc_dispose_symbols(
  LLVMOrcSymbolStringPoolEntryRef* symbols)
@extern("LLVMOrcDisposeSymbols");

fn LLVMErrorRef orc_materialization_responsibility_notify_resolved(
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcCSymbolMapPairs symbols, 
  usz num_pairs)
@extern("LLVMOrcMaterializationResponsibilityNotifyResolved");

fn LLVMErrorRef orc_materialization_responsibility_notify_emitted(
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcCSymbolDependenceGroup* symbol_dep_groups, 
  usz num_symbol_dep_groups)
@extern("LLVMOrcMaterializationResponsibilityNotifyEmitted");

fn LLVMErrorRef orc_materialization_responsibility_define_materializing(
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcCSymbolFlagsMapPairs pairs, 
  usz num_pairs)
@extern("LLVMOrcMaterializationResponsibilityDefineMaterializing");

fn void orc_materialization_responsibility_fail_materialization(
  LLVMOrcMaterializationResponsibilityRef mr)
@extern("LLVMOrcMaterializationResponsibilityFailMaterialization");

fn LLVMErrorRef orc_materialization_responsibility_replace(
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcMaterializationUnitRef mu)
@extern("LLVMOrcMaterializationResponsibilityReplace");

fn LLVMErrorRef orc_materialization_responsibility_delegate(
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcSymbolStringPoolEntryRef* symbols, 
  usz num_symbols, 
  LLVMOrcMaterializationResponsibilityRef* result)
@extern("LLVMOrcMaterializationResponsibilityDelegate");

fn LLVMOrcJITDylibRef orc_execution_session_create_bare_jit_dylib(
  LLVMOrcExecutionSessionRef es, 
  CChar* name)
@extern("LLVMOrcExecutionSessionCreateBareJITDylib");

fn LLVMErrorRef orc_execution_session_create_jit_dylib(
  LLVMOrcExecutionSessionRef es, 
  LLVMOrcJITDylibRef* result, 
  CChar* name)
@extern("LLVMOrcExecutionSessionCreateJITDylib");

fn LLVMOrcJITDylibRef orc_execution_session_get_jit_dylib_by_name(
  LLVMOrcExecutionSessionRef es, 
  CChar* name)
@extern("LLVMOrcExecutionSessionGetJITDylibByName");

fn LLVMOrcResourceTrackerRef orc_jit_dylib_create_resource_tracker(
  LLVMOrcJITDylibRef jd)
@extern("LLVMOrcJITDylibCreateResourceTracker");

fn LLVMOrcResourceTrackerRef orc_jit_dylib_get_default_resource_tracker(
  LLVMOrcJITDylibRef jd)
@extern("LLVMOrcJITDylibGetDefaultResourceTracker");

fn LLVMErrorRef orc_jit_dylib_define(
  LLVMOrcJITDylibRef jd, 
  LLVMOrcMaterializationUnitRef mu)
@extern("LLVMOrcJITDylibDefine");

fn LLVMErrorRef orc_jit_dylib_clear(
  LLVMOrcJITDylibRef jd)
@extern("LLVMOrcJITDylibClear");

fn void orc_jit_dylib_add_generator(
  LLVMOrcJITDylibRef jd, 
  LLVMOrcDefinitionGeneratorRef dg)
@extern("LLVMOrcJITDylibAddGenerator");

fn LLVMOrcDefinitionGeneratorRef orc_create_custom_capi_definition_generator(
  LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction f, 
  void* ctx, 
  LLVMOrcDisposeCAPIDefinitionGeneratorFunction dispose)
@extern("LLVMOrcCreateCustomCAPIDefinitionGenerator");

fn void orc_lookup_state_continue_lookup(
  LLVMOrcLookupStateRef s, 
  LLVMErrorRef err)
@extern("LLVMOrcLookupStateContinueLookup");

fn LLVMErrorRef orc_create_dynamic_library_search_generator_for_process(
  LLVMOrcDefinitionGeneratorRef* result, 
  CChar global_prefx, 
  LLVMOrcSymbolPredicate filter, 
  void* filter_ctx)
@extern("LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess");

fn LLVMErrorRef orc_create_dynamic_library_search_generator_for_path(
  LLVMOrcDefinitionGeneratorRef* result, 
  CChar* file_name, 
  CChar global_prefix, 
  LLVMOrcSymbolPredicate filter, 
  void* filter_ctx)
@extern("LLVMOrcCreateDynamicLibrarySearchGeneratorForPath");

fn LLVMErrorRef orc_create_static_library_search_generator_for_path(
  LLVMOrcDefinitionGeneratorRef* result, 
  LLVMOrcObjectLayerRef obj_layer, 
  CChar* file_name, 
  CChar* target_triple)
@extern("LLVMOrcCreateStaticLibrarySearchGeneratorForPath");

fn LLVMOrcThreadSafeContextRef orc_create_new_thread_safe_context()
@extern("LLVMOrcCreateNewThreadSafeContext");

fn LLVMContextRef orc_thread_safe_context_get_context(
  LLVMOrcThreadSafeContextRef ts_ctx)
@extern("LLVMOrcThreadSafeContextGetContext");

fn void orc_dispose_thread_safe_context(
  LLVMOrcThreadSafeContextRef ts_ctx)
@extern("LLVMOrcDisposeThreadSafeContext");

fn LLVMOrcThreadSafeModuleRef orc_create_new_thread_safe_module(
  LLVMModuleRef m, 
  LLVMOrcThreadSafeContextRef ts_ctx)
@extern("LLVMOrcCreateNewThreadSafeModule");

fn void orc_dispose_thread_safe_module(
  LLVMOrcThreadSafeModuleRef tsm)
@extern("LLVMOrcDisposeThreadSafeModule");

fn LLVMErrorRef orc_thread_safe_module_with_module_do(
  LLVMOrcThreadSafeModuleRef tsm, 
  LLVMOrcGenericIRModuleOperationFunction f, 
  void* ctx)
@extern("LLVMOrcThreadSafeModuleWithModuleDo");

fn LLVMErrorRef orc_jit_target_machine_builder_detect_host(
  LLVMOrcJITTargetMachineBuilderRef* result)
@extern("LLVMOrcJITTargetMachineBuilderDetectHost");

fn LLVMOrcJITTargetMachineBuilderRef orc_jit_target_machine_builder_create_from_target_machine(
  LLVMTargetMachineRef tm)
@extern("LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine");

fn void orc_dispose_jit_target_machine_builder(
  LLVMOrcJITTargetMachineBuilderRef jtmb)
@extern("LLVMOrcDisposeJITTargetMachineBuilder");

fn CChar* orc_jit_target_machine_builder_get_target_triple(
  LLVMOrcJITTargetMachineBuilderRef jtmb)
@extern("LLVMOrcJITTargetMachineBuilderGetTargetTriple");

fn void orc_jit_target_machine_builder_set_target_triple(
  LLVMOrcJITTargetMachineBuilderRef jtmb, 
  CChar* target_triple)
@extern("LLVMOrcJITTargetMachineBuilderSetTargetTriple");

fn LLVMErrorRef orc_object_layer_add_object_file(
  LLVMOrcObjectLayerRef obj_layer, 
  LLVMOrcJITDylibRef jd, 
  LLVMMemoryBufferRef obj_buffer)
@extern("LLVMOrcObjectLayerAddObjectFile");

fn LLVMErrorRef orc_object_layer_add_object_file_with_rt(
  LLVMOrcObjectLayerRef obj_layer, 
  LLVMOrcResourceTrackerRef rt, 
  LLVMMemoryBufferRef obj_buffer)
@extern("LLVMOrcObjectLayerAddObjectFileWithRT");

fn void orc_object_layer_emit(
  LLVMOrcObjectLayerRef obj_layer, 
  LLVMOrcMaterializationResponsibilityRef r, 
  LLVMMemoryBufferRef obj_buffer)
@extern("LLVMOrcObjectLayerEmit");

fn void orc_dispose_object_layer(
  LLVMOrcObjectLayerRef obj_layer)
@extern("LLVMOrcDisposeObjectLayer");

fn void orc_ir_transform_layer_emit(
  LLVMOrcIRTransformLayerRef ir_transform_layer, 
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcThreadSafeModuleRef tsm)
@extern("LLVMOrcIRTransformLayerEmit");

fn void orc_ir_transform_layer_set_transform(
  LLVMOrcIRTransformLayerRef ir_transform_layer, 
  LLVMOrcIRTransformLayerTransformFunction transform_function, 
  void* ctx)
@extern("LLVMOrcIRTransformLayerSetTransform");

fn void orc_object_transform_layer_set_transform(
  LLVMOrcObjectTransformLayerRef obj_transform_layer, 
  LLVMOrcObjectTransformLayerTransformFunction transform_function, 
  void* ctx)
@extern("LLVMOrcObjectTransformLayerSetTransform");

fn LLVMOrcIndirectStubsManagerRef orc_create_local_indirect_stubs_manager(
  CChar* target_triple)
@extern("LLVMOrcCreateLocalIndirectStubsManager");

fn void orc_dispose_indirect_stubs_manager(
  LLVMOrcIndirectStubsManagerRef ism)
@extern("LLVMOrcDisposeIndirectStubsManager");

fn LLVMErrorRef orc_create_local_lazy_call_through_manager(
  CChar* target_triple, 
  LLVMOrcExecutionSessionRef es, 
  LLVMOrcJITTargetAddress error_handler_addr, 
  LLVMOrcLazyCallThroughManagerRef* lctm)
@extern("LLVMOrcCreateLocalLazyCallThroughManager");

fn void orc_dispose_lazy_call_through_manager(
  LLVMOrcLazyCallThroughManagerRef lctm)
@extern("LLVMOrcDisposeLazyCallThroughManager");

fn LLVMOrcDumpObjectsRef orc_create_dump_objects(
  CChar* dump_dir, 
  CChar* identifier_override)
@extern("LLVMOrcCreateDumpObjects");

fn void orc_dispose_dump_objects(
  LLVMOrcDumpObjectsRef dump_objects)
@extern("LLVMOrcDisposeDumpObjects");

fn LLVMErrorRef orc_dump_objects__call_operator(
  LLVMOrcDumpObjectsRef dump_objects, 
  LLVMMemoryBufferRef* obj_buffer)
@extern("LLVMOrcDumpObjects_CallOperator");

alias LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction = fn LLVMOrcObjectLayerRef(
  void* ctx, 
  LLVMOrcExecutionSessionRef es, 
  CChar* triple);

alias LLVMOrcLLJITBuilderRef = void*;

alias LLVMOrcLLJITRef = void*;

fn LLVMOrcLLJITBuilderRef orc_create_lljit_builder()
@extern("LLVMOrcCreateLLJITBuilder");

fn void orc_dispose_lljit_builder(
  LLVMOrcLLJITBuilderRef builder)
@extern("LLVMOrcDisposeLLJITBuilder");

fn void orc_lljit_builder_set_jit_target_machine_builder(
  LLVMOrcLLJITBuilderRef builder, 
  LLVMOrcJITTargetMachineBuilderRef jtmb)
@extern("LLVMOrcLLJITBuilderSetJITTargetMachineBuilder");

fn void orc_lljit_builder_set_object_linking_layer_creator(
  LLVMOrcLLJITBuilderRef builder, 
  LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction f, 
  void* ctx)
@extern("LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator");

fn LLVMErrorRef orc_create_lljit(
  LLVMOrcLLJITRef* result, 
  LLVMOrcLLJITBuilderRef builder)
@extern("LLVMOrcCreateLLJIT");

fn LLVMErrorRef orc_dispose_lljit(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcDisposeLLJIT");

fn LLVMOrcExecutionSessionRef orc_lljit_get_execution_session(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetExecutionSession");

fn LLVMOrcJITDylibRef orc_lljit_get_main_jit_dylib(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetMainJITDylib");

fn CChar* orc_lljit_get_triple_string(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetTripleString");

fn CChar orc_lljit_get_global_prefix(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetGlobalPrefix");

fn LLVMOrcSymbolStringPoolEntryRef orc_lljit_mangle_and_intern(
  LLVMOrcLLJITRef j, 
  CChar* unmangled_name)
@extern("LLVMOrcLLJITMangleAndIntern");

fn LLVMErrorRef orc_lljit_add_object_file(
  LLVMOrcLLJITRef j, 
  LLVMOrcJITDylibRef jd, 
  LLVMMemoryBufferRef obj_buffer)
@extern("LLVMOrcLLJITAddObjectFile");

fn LLVMErrorRef orc_lljit_add_object_file_with_rt(
  LLVMOrcLLJITRef j, 
  LLVMOrcResourceTrackerRef rt, 
  LLVMMemoryBufferRef obj_buffer)
@extern("LLVMOrcLLJITAddObjectFileWithRT");

fn LLVMErrorRef orc_lljit_add_llvmir_module(
  LLVMOrcLLJITRef j, 
  LLVMOrcJITDylibRef jd, 
  LLVMOrcThreadSafeModuleRef tsm)
@extern("LLVMOrcLLJITAddLLVMIRModule");

fn LLVMErrorRef orc_lljit_add_llvmir_module_with_rt(
  LLVMOrcLLJITRef j, 
  LLVMOrcResourceTrackerRef jd, 
  LLVMOrcThreadSafeModuleRef tsm)
@extern("LLVMOrcLLJITAddLLVMIRModuleWithRT");

fn LLVMErrorRef orc_lljit_lookup(
  LLVMOrcLLJITRef j, 
  LLVMOrcExecutorAddress* result, 
  CChar* name)
@extern("LLVMOrcLLJITLookup");

fn LLVMOrcObjectLayerRef orc_lljit_get_obj_linking_layer(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetObjLinkingLayer");

fn LLVMOrcObjectTransformLayerRef orc_lljit_get_obj_transform_layer(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetObjTransformLayer");

fn LLVMOrcIRTransformLayerRef orc_lljit_get_ir_transform_layer(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetIRTransformLayer");

fn CChar* orc_lljit_get_data_layout_str(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetDataLayoutStr");

fn LLVMErrorRef orc_lljit_enable_debug_support(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITEnableDebugSupport");

typedef LLVMLinkerMode = inline CUInt;
const LLVMLinkerMode LINKERDESTROYSOURCE = 0;
const LLVMLinkerMode LINKERPRESERVESOURCE_REMOVED = 1;

fn LLVMBool link_modules_2(
  LLVMModuleRef dest, 
  LLVMModuleRef src)
@extern("LLVMLinkModules2");

alias LLVMSectionIteratorRef = void*;

alias LLVMSymbolIteratorRef = void*;

alias LLVMRelocationIteratorRef = void*;

typedef LLVMBinaryType = inline CUInt;
const LLVMBinaryType BINARYTYPEARCHIVE = 0;
const LLVMBinaryType BINARYTYPEMACHOUNIVERSALBINARY = 1;
const LLVMBinaryType BINARYTYPECOFFIMPORTFILE = 2;
const LLVMBinaryType BINARYTYPEIR = 3;
const LLVMBinaryType BINARYTYPEWINRES = 4;
const LLVMBinaryType BINARYTYPECOFF = 5;
const LLVMBinaryType BINARYTYPEELF32L = 6;
const LLVMBinaryType BINARYTYPEELF32B = 7;
const LLVMBinaryType BINARYTYPEELF64L = 8;
const LLVMBinaryType BINARYTYPEELF64B = 9;
const LLVMBinaryType BINARYTYPEMACHO32L = 10;
const LLVMBinaryType BINARYTYPEMACHO32B = 11;
const LLVMBinaryType BINARYTYPEMACHO64L = 12;
const LLVMBinaryType BINARYTYPEMACHO64B = 13;
const LLVMBinaryType BINARYTYPEWASM = 14;
const LLVMBinaryType BINARYTYPEOFFLOAD = 15;

fn LLVMBinaryRef create_binary(
  LLVMMemoryBufferRef mem_buf, 
  LLVMContextRef context, 
  CChar** error_message)
@extern("LLVMCreateBinary");

fn void dispose_binary(
  LLVMBinaryRef br)
@extern("LLVMDisposeBinary");

fn LLVMMemoryBufferRef binary_copy_memory_buffer(
  LLVMBinaryRef br)
@extern("LLVMBinaryCopyMemoryBuffer");

fn LLVMBinaryType binary_get_type(
  LLVMBinaryRef br)
@extern("LLVMBinaryGetType");

fn LLVMBinaryRef mach_o_universal_binary_copy_object_for_arch(
  LLVMBinaryRef br, 
  CChar* arch, 
  usz arch_len, 
  CChar** error_message)
@extern("LLVMMachOUniversalBinaryCopyObjectForArch");

fn LLVMSectionIteratorRef object_file_copy_section_iterator(
  LLVMBinaryRef br)
@extern("LLVMObjectFileCopySectionIterator");

fn LLVMBool object_file_is_section_iterator_at_end(
  LLVMBinaryRef br, 
  LLVMSectionIteratorRef si)
@extern("LLVMObjectFileIsSectionIteratorAtEnd");

fn LLVMSymbolIteratorRef object_file_copy_symbol_iterator(
  LLVMBinaryRef br)
@extern("LLVMObjectFileCopySymbolIterator");

fn LLVMBool object_file_is_symbol_iterator_at_end(
  LLVMBinaryRef br, 
  LLVMSymbolIteratorRef si)
@extern("LLVMObjectFileIsSymbolIteratorAtEnd");

fn void dispose_section_iterator(
  LLVMSectionIteratorRef si)
@extern("LLVMDisposeSectionIterator");

fn void move_to_next_section(
  LLVMSectionIteratorRef si)
@extern("LLVMMoveToNextSection");

fn void move_to_containing_section(
  LLVMSectionIteratorRef sect, 
  LLVMSymbolIteratorRef sym)
@extern("LLVMMoveToContainingSection");

fn void dispose_symbol_iterator(
  LLVMSymbolIteratorRef si)
@extern("LLVMDisposeSymbolIterator");

fn void move_to_next_symbol(
  LLVMSymbolIteratorRef si)
@extern("LLVMMoveToNextSymbol");

fn CChar* get_section_name(
  LLVMSectionIteratorRef si)
@extern("LLVMGetSectionName");

fn ulong get_section_size(
  LLVMSectionIteratorRef si)
@extern("LLVMGetSectionSize");

fn CChar* get_section_contents(
  LLVMSectionIteratorRef si)
@extern("LLVMGetSectionContents");

fn ulong get_section_address(
  LLVMSectionIteratorRef si)
@extern("LLVMGetSectionAddress");

fn LLVMBool get_section_contains_symbol(
  LLVMSectionIteratorRef si, 
  LLVMSymbolIteratorRef sym)
@extern("LLVMGetSectionContainsSymbol");

fn LLVMRelocationIteratorRef get_relocations(
  LLVMSectionIteratorRef section)
@extern("LLVMGetRelocations");

fn void dispose_relocation_iterator(
  LLVMRelocationIteratorRef ri)
@extern("LLVMDisposeRelocationIterator");

fn LLVMBool is_relocation_iterator_at_end(
  LLVMSectionIteratorRef section, 
  LLVMRelocationIteratorRef ri)
@extern("LLVMIsRelocationIteratorAtEnd");

fn void move_to_next_relocation(
  LLVMRelocationIteratorRef ri)
@extern("LLVMMoveToNextRelocation");

fn CChar* get_symbol_name(
  LLVMSymbolIteratorRef si)
@extern("LLVMGetSymbolName");

fn ulong get_symbol_address(
  LLVMSymbolIteratorRef si)
@extern("LLVMGetSymbolAddress");

fn ulong get_symbol_size(
  LLVMSymbolIteratorRef si)
@extern("LLVMGetSymbolSize");

fn ulong get_relocation_offset(
  LLVMRelocationIteratorRef ri)
@extern("LLVMGetRelocationOffset");

fn LLVMSymbolIteratorRef get_relocation_symbol(
  LLVMRelocationIteratorRef ri)
@extern("LLVMGetRelocationSymbol");

fn ulong get_relocation_type(
  LLVMRelocationIteratorRef ri)
@extern("LLVMGetRelocationType");

fn CChar* get_relocation_type_name(
  LLVMRelocationIteratorRef ri)
@extern("LLVMGetRelocationTypeName");

fn CChar* get_relocation_value_string(
  LLVMRelocationIteratorRef ri)
@extern("LLVMGetRelocationValueString");

alias LLVMObjectFileRef = void*;

fn LLVMObjectFileRef create_object_file(
  LLVMMemoryBufferRef mem_buf)
@extern("LLVMCreateObjectFile");

fn void dispose_object_file(
  LLVMObjectFileRef object_file)
@extern("LLVMDisposeObjectFile");

fn LLVMSectionIteratorRef get_sections(
  LLVMObjectFileRef object_file)
@extern("LLVMGetSections");

fn LLVMBool is_section_iterator_at_end(
  LLVMObjectFileRef object_file, 
  LLVMSectionIteratorRef si)
@extern("LLVMIsSectionIteratorAtEnd");

fn LLVMSymbolIteratorRef get_symbols(
  LLVMObjectFileRef object_file)
@extern("LLVMGetSymbols");

fn LLVMBool is_symbol_iterator_at_end(
  LLVMObjectFileRef object_file, 
  LLVMSymbolIteratorRef si)
@extern("LLVMIsSymbolIteratorAtEnd");

alias LLVMMemoryManagerCreateContextCallback = fn void*(
  void* ctx_ctx);

alias LLVMMemoryManagerNotifyTerminatingCallback = fn void(
  void* ctx_ctx);

fn LLVMOrcObjectLayerRef orc_create_rt_dyld_object_linking_layer_with_section_memory_manager(
  LLVMOrcExecutionSessionRef es)
@extern("LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager");

fn LLVMOrcObjectLayerRef orc_create_rt_dyld_object_linking_layer_with_mcjit_memory_manager_like_callbacks(
  LLVMOrcExecutionSessionRef es, 
  void* create_context_ctx, 
  LLVMMemoryManagerCreateContextCallback create_context, 
  LLVMMemoryManagerNotifyTerminatingCallback notify_terminating, 
  LLVMMemoryManagerAllocateCodeSectionCallback allocate_code_section, 
  LLVMMemoryManagerAllocateDataSectionCallback allocate_data_section, 
  LLVMMemoryManagerFinalizeMemoryCallback finalize_memory, 
  LLVMMemoryManagerDestroyCallback destroy)
@extern("LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks");

fn void orc_rt_dyld_object_linking_layer_register_jit_event_listener(
  LLVMOrcObjectLayerRef rt_dyld_obj_linking_layer, 
  LLVMJITEventListenerRef listener)
@extern("LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener");

typedef LLVMRemarkType = inline CUInt;
const LLVMRemarkType REMARKTYPEUNKNOWN = 0;
const LLVMRemarkType REMARKTYPEPASSED = 1;
const LLVMRemarkType REMARKTYPEMISSED = 2;
const LLVMRemarkType REMARKTYPEANALYSIS = 3;
const LLVMRemarkType REMARKTYPEANALYSISFPCOMMUTE = 4;
const LLVMRemarkType REMARKTYPEANALYSISALIASING = 5;
const LLVMRemarkType REMARKTYPEFAILURE = 6;

alias LLVMRemarkStringRef = void*;

fn CChar* remark_string_get_data(
  LLVMRemarkStringRef string)
@extern("LLVMRemarkStringGetData");

fn uint remark_string_get_len(
  LLVMRemarkStringRef string)
@extern("LLVMRemarkStringGetLen");

alias LLVMRemarkDebugLocRef = void*;

fn LLVMRemarkStringRef remark_debug_loc_get_source_file_path(
  LLVMRemarkDebugLocRef dl)
@extern("LLVMRemarkDebugLocGetSourceFilePath");

fn uint remark_debug_loc_get_source_line(
  LLVMRemarkDebugLocRef dl)
@extern("LLVMRemarkDebugLocGetSourceLine");

fn uint remark_debug_loc_get_source_column(
  LLVMRemarkDebugLocRef dl)
@extern("LLVMRemarkDebugLocGetSourceColumn");

alias LLVMRemarkArgRef = void*;

fn LLVMRemarkStringRef remark_arg_get_key(
  LLVMRemarkArgRef arg)
@extern("LLVMRemarkArgGetKey");

fn LLVMRemarkStringRef remark_arg_get_value(
  LLVMRemarkArgRef arg)
@extern("LLVMRemarkArgGetValue");

fn LLVMRemarkDebugLocRef remark_arg_get_debug_loc(
  LLVMRemarkArgRef arg)
@extern("LLVMRemarkArgGetDebugLoc");

alias LLVMRemarkEntryRef = void*;

fn void remark_entry_dispose(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryDispose");

fn LLVMRemarkType remark_entry_get_type(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetType");

fn LLVMRemarkStringRef remark_entry_get_pass_name(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetPassName");

fn LLVMRemarkStringRef remark_entry_get_remark_name(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetRemarkName");

fn LLVMRemarkStringRef remark_entry_get_function_name(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetFunctionName");

fn LLVMRemarkDebugLocRef remark_entry_get_debug_loc(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetDebugLoc");

fn ulong remark_entry_get_hotness(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetHotness");

fn uint remark_entry_get_num_args(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetNumArgs");

fn LLVMRemarkArgRef remark_entry_get_first_arg(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetFirstArg");

fn LLVMRemarkArgRef remark_entry_get_next_arg(
  LLVMRemarkArgRef it, 
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetNextArg");

alias LLVMRemarkParserRef = void*;

fn LLVMRemarkParserRef remark_parser_create_yaml(
  void* buf, 
  ulong size)
@extern("LLVMRemarkParserCreateYAML");

fn LLVMRemarkParserRef remark_parser_create_bitstream(
  void* buf, 
  ulong size)
@extern("LLVMRemarkParserCreateBitstream");

fn LLVMRemarkEntryRef remark_parser_get_next(
  LLVMRemarkParserRef parser)
@extern("LLVMRemarkParserGetNext");

fn LLVMBool remark_parser_has_error(
  LLVMRemarkParserRef parser)
@extern("LLVMRemarkParserHasError");

fn CChar* remark_parser_get_error_message(
  LLVMRemarkParserRef parser)
@extern("LLVMRemarkParserGetErrorMessage");

fn void remark_parser_dispose(
  LLVMRemarkParserRef parser)
@extern("LLVMRemarkParserDispose");

fn uint remark_version()
@extern("LLVMRemarkVersion");

fn LLVMBool load_library_permanently(
  CChar* filename)
@extern("LLVMLoadLibraryPermanently");

fn void parse_command_line_options(
  CInt argc, 
  CChar** argv, 
  CChar* overview)
@extern("LLVMParseCommandLineOptions");

fn void* search_for_address_of_symbol(
  CChar* symbol_name)
@extern("LLVMSearchForAddressOfSymbol");

fn void add_symbol(
  CChar* symbol_name, 
  void* symbol_value)
@extern("LLVMAddSymbol");

struct LlvmBlake3ChunkState {
  uint[8] cv;
  ulong chunk_counter;
  char[64] buf;
  char buf_len;
  char blocks_compressed;
  char flags;
}

struct LlvmBlake3Hasher {
  uint[8] key;
  LlvmBlake3ChunkState chunk;
  char cv_stack_len;
  char[1760] cv_stack;
}

fn CChar* blake3_version()
@extern("llvm_blake3_version");

fn void blake3_hasher_init(
  LlvmBlake3Hasher* self)
@extern("llvm_blake3_hasher_init");

fn void blake3_hasher_init_keyed(
  LlvmBlake3Hasher* self, 
  char[32]* key)
@extern("llvm_blake3_hasher_init_keyed");

fn void blake3_hasher_init_derive_key(
  LlvmBlake3Hasher* self, 
  CChar* context)
@extern("llvm_blake3_hasher_init_derive_key");

fn void blake3_hasher_init_derive_key_raw(
  LlvmBlake3Hasher* self, 
  void* context, 
  usz context_len)
@extern("llvm_blake3_hasher_init_derive_key_raw");

fn void blake3_hasher_update(
  LlvmBlake3Hasher* self, 
  void* input, 
  usz input_len)
@extern("llvm_blake3_hasher_update");

fn void blake3_hasher_finalize(
  LlvmBlake3Hasher* self, 
  char* out, 
  usz out_len)
@extern("llvm_blake3_hasher_finalize");

fn void blake3_hasher_finalize_seek(
  LlvmBlake3Hasher* self, 
  ulong seek, 
  char* out, 
  usz out_len)
@extern("llvm_blake3_hasher_finalize_seek");

fn void blake3_hasher_reset(
  LlvmBlake3Hasher* self)
@extern("llvm_blake3_hasher_reset");

alias LtoBoolT = bool;

typedef LtoSymbolAttributes = inline CUInt;
const LtoSymbolAttributes LTO_SYMBOL_ALIGNMENT_MASK = 0x0000001F;
const LtoSymbolAttributes LTO_SYMBOL_PERMISSIONS_MASK = 0x000000E0;
const LtoSymbolAttributes LTO_SYMBOL_PERMISSIONS_CODE = 0x000000A0;
const LtoSymbolAttributes LTO_SYMBOL_PERMISSIONS_DATA = 0x000000C0;
const LtoSymbolAttributes LTO_SYMBOL_PERMISSIONS_RODATA = 0x00000080;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_MASK = 0x00000700;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_REGULAR = 0x00000100;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_TENTATIVE = 0x00000200;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_WEAK = 0x00000300;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_UNDEFINED = 0x00000400;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_WEAKUNDEF = 0x00000500;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_MASK = 0x00003800;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_INTERNAL = 0x00000800;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_HIDDEN = 0x00001000;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_PROTECTED = 0x00002000;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_DEFAULT = 0x00001800;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_DEFAULT_CAN_BE_HIDDEN = 0x00002800;
const LtoSymbolAttributes LTO_SYMBOL_COMDAT = 0x00004000;
const LtoSymbolAttributes LTO_SYMBOL_ALIAS = 0x00008000;

typedef LtoDebugModel = inline CUInt;
const LtoDebugModel LTO_DEBUG_MODEL_NONE = 0;
const LtoDebugModel LTO_DEBUG_MODEL_DWARF = 1;

typedef LtoCodegenModel = inline CUInt;
const LtoCodegenModel LTO_CODEGEN_PIC_MODEL_STATIC = 0;
const LtoCodegenModel LTO_CODEGEN_PIC_MODEL_DYNAMIC = 1;
const LtoCodegenModel LTO_CODEGEN_PIC_MODEL_DYNAMIC_NO_PIC = 2;
const LtoCodegenModel LTO_CODEGEN_PIC_MODEL_DEFAULT = 3;

alias LtoModuleT = void*;

alias LtoCodeGenT = void*;

alias ThinltoCodeGenT = void*;

fn CChar* lto_get_version()
@extern("lto_get_version");

fn CChar* lto_get_error_message()
@extern("lto_get_error_message");

fn LtoBoolT lto_module_is_object_file(
  CChar* path)
@extern("lto_module_is_object_file");

fn LtoBoolT lto_module_is_object_file_for_target(
  CChar* path, 
  CChar* target_triple_prefix)
@extern("lto_module_is_object_file_for_target");

fn LtoBoolT lto_module_has_objc_category(
  void* mem, 
  usz length)
@extern("lto_module_has_objc_category");

fn LtoBoolT lto_module_is_object_file_in_memory(
  void* mem, 
  usz length)
@extern("lto_module_is_object_file_in_memory");

fn LtoBoolT lto_module_is_object_file_in_memory_for_target(
  void* mem, 
  usz length, 
  CChar* target_triple_prefix)
@extern("lto_module_is_object_file_in_memory_for_target");

fn LtoModuleT lto_module_create(
  CChar* path)
@extern("lto_module_create");

fn LtoModuleT lto_module_create_from_memory(
  void* mem, 
  usz length)
@extern("lto_module_create_from_memory");

fn LtoModuleT lto_module_create_from_memory_with_path(
  void* mem, 
  usz length, 
  CChar* path)
@extern("lto_module_create_from_memory_with_path");

fn LtoModuleT lto_module_create_in_local_context(
  void* mem, 
  usz length, 
  CChar* path)
@extern("lto_module_create_in_local_context");

fn LtoModuleT lto_module_create_in_codegen_context(
  void* mem, 
  usz length, 
  CChar* path, 
  LtoCodeGenT cg)
@extern("lto_module_create_in_codegen_context");

fn LtoModuleT lto_module_create_from_fd(
  CInt fd, 
  CChar* path, 
  usz file_size)
@extern("lto_module_create_from_fd");

fn LtoModuleT lto_module_create_from_fd_at_offset(
  CInt fd, 
  CChar* path, 
  usz file_size, 
  usz map_size, 
  isz offset)
@extern("lto_module_create_from_fd_at_offset");

fn void lto_module_dispose(
  LtoModuleT mod)
@extern("lto_module_dispose");

fn CChar* lto_module_get_target_triple(
  LtoModuleT mod)
@extern("lto_module_get_target_triple");

fn void lto_module_set_target_triple(
  LtoModuleT mod, 
  CChar* triple)
@extern("lto_module_set_target_triple");

fn CUInt lto_module_get_num_symbols(
  LtoModuleT mod)
@extern("lto_module_get_num_symbols");

fn CChar* lto_module_get_symbol_name(
  LtoModuleT mod, 
  CUInt index)
@extern("lto_module_get_symbol_name");

fn LtoSymbolAttributes lto_module_get_symbol_attribute(
  LtoModuleT mod, 
  CUInt index)
@extern("lto_module_get_symbol_attribute");

fn CChar* lto_module_get_linkeropts(
  LtoModuleT mod)
@extern("lto_module_get_linkeropts");

fn LtoBoolT lto_module_get_macho_cputype(
  LtoModuleT mod, 
  CUInt* out_cputype, 
  CUInt* out_cpusubtype)
@extern("lto_module_get_macho_cputype");

fn LtoBoolT lto_module_has_ctor_dtor(
  LtoModuleT mod)
@extern("lto_module_has_ctor_dtor");

typedef LtoCodegenDiagnosticSeverityT = inline CUInt;
const LtoCodegenDiagnosticSeverityT LTO_DS_ERROR = 0;
const LtoCodegenDiagnosticSeverityT LTO_DS_WARNING = 1;
const LtoCodegenDiagnosticSeverityT LTO_DS_REMARK = 3;
const LtoCodegenDiagnosticSeverityT LTO_DS_NOTE = 2;

alias LtoDiagnosticHandlerT = fn void(
  LtoCodegenDiagnosticSeverityT severity, 
  CChar* diag, 
  void* ctxt);

fn void lto_codegen_set_diagnostic_handler(
  LtoCodeGenT, 
  LtoDiagnosticHandlerT, 
  void*)
@extern("lto_codegen_set_diagnostic_handler");

fn LtoCodeGenT lto_codegen_create()
@extern("lto_codegen_create");

fn LtoCodeGenT lto_codegen_create_in_local_context()
@extern("lto_codegen_create_in_local_context");

fn void lto_codegen_dispose(
  LtoCodeGenT)
@extern("lto_codegen_dispose");

fn LtoBoolT lto_codegen_add_module(
  LtoCodeGenT cg, 
  LtoModuleT mod)
@extern("lto_codegen_add_module");

fn void lto_codegen_set_module(
  LtoCodeGenT cg, 
  LtoModuleT mod)
@extern("lto_codegen_set_module");

fn LtoBoolT lto_codegen_set_debug_model(
  LtoCodeGenT cg, 
  LtoDebugModel)
@extern("lto_codegen_set_debug_model");

fn LtoBoolT lto_codegen_set_pic_model(
  LtoCodeGenT cg, 
  LtoCodegenModel)
@extern("lto_codegen_set_pic_model");

fn void lto_codegen_set_cpu(
  LtoCodeGenT cg, 
  CChar* cpu)
@extern("lto_codegen_set_cpu");

fn void lto_codegen_set_assembler_path(
  LtoCodeGenT cg, 
  CChar* path)
@extern("lto_codegen_set_assembler_path");

fn void lto_codegen_set_assembler_args(
  LtoCodeGenT cg, 
  CChar** args, 
  CInt nargs)
@extern("lto_codegen_set_assembler_args");

fn void lto_codegen_add_must_preserve_symbol(
  LtoCodeGenT cg, 
  CChar* symbol)
@extern("lto_codegen_add_must_preserve_symbol");

fn LtoBoolT lto_codegen_write_merged_modules(
  LtoCodeGenT cg, 
  CChar* path)
@extern("lto_codegen_write_merged_modules");

fn void* lto_codegen_compile(
  LtoCodeGenT cg, 
  usz* length)
@extern("lto_codegen_compile");

fn LtoBoolT lto_codegen_compile_to_file(
  LtoCodeGenT cg, 
  CChar** name)
@extern("lto_codegen_compile_to_file");

fn LtoBoolT lto_codegen_optimize(
  LtoCodeGenT cg)
@extern("lto_codegen_optimize");

fn void* lto_codegen_compile_optimized(
  LtoCodeGenT cg, 
  usz* length)
@extern("lto_codegen_compile_optimized");

fn CUInt lto_api_version()
@extern("lto_api_version");

fn void lto_set_debug_options(
  CChar** options, 
  CInt number)
@extern("lto_set_debug_options");

fn void lto_codegen_debug_options(
  LtoCodeGenT cg, 
  CChar*)
@extern("lto_codegen_debug_options");

fn void lto_codegen_debug_options_array(
  LtoCodeGenT cg, 
  CChar**, 
  CInt number)
@extern("lto_codegen_debug_options_array");

fn void lto_initialize_disassembler()
@extern("lto_initialize_disassembler");

fn void lto_codegen_set_should_internalize(
  LtoCodeGenT cg, 
  LtoBoolT should_internalize)
@extern("lto_codegen_set_should_internalize");

fn void lto_codegen_set_should_embed_uselists(
  LtoCodeGenT cg, 
  LtoBoolT should_embed_uselists)
@extern("lto_codegen_set_should_embed_uselists");

alias LtoInputT = void*;

fn LtoInputT lto_input_create(
  void* buffer, 
  usz buffer_size, 
  CChar* path)
@extern("lto_input_create");

fn void lto_input_dispose(
  LtoInputT input)
@extern("lto_input_dispose");

fn CUInt lto_input_get_num_dependent_libraries(
  LtoInputT input)
@extern("lto_input_get_num_dependent_libraries");

fn CChar* lto_input_get_dependent_library(
  LtoInputT input, 
  usz index, 
  usz* size)
@extern("lto_input_get_dependent_library");

fn CChar** lto_runtime_lib_symbols_list(
  usz* size)
@extern("lto_runtime_lib_symbols_list");

struct LTOObjectBuffer {
  CChar* buffer;
  usz size;
}

fn ThinltoCodeGenT thinlto_create_codegen()
@extern("thinlto_create_codegen");

fn void thinlto_codegen_dispose(
  ThinltoCodeGenT cg)
@extern("thinlto_codegen_dispose");

fn void thinlto_codegen_add_module(
  ThinltoCodeGenT cg, 
  CChar* identifier, 
  CChar* data, 
  CInt length)
@extern("thinlto_codegen_add_module");

fn void thinlto_codegen_process(
  ThinltoCodeGenT cg)
@extern("thinlto_codegen_process");

fn CUInt thinlto_module_get_num_objects(
  ThinltoCodeGenT cg)
@extern("thinlto_module_get_num_objects");

fn LTOObjectBuffer thinlto_module_get_object(
  ThinltoCodeGenT cg, 
  CUInt index)
@extern("thinlto_module_get_object");

fn CUInt thinlto_module_get_num_object_files(
  ThinltoCodeGenT cg)
@extern("thinlto_module_get_num_object_files");

fn CChar* thinlto_module_get_object_file(
  ThinltoCodeGenT cg, 
  CUInt index)
@extern("thinlto_module_get_object_file");

fn LtoBoolT thinlto_codegen_set_pic_model(
  ThinltoCodeGenT cg, 
  LtoCodegenModel)
@extern("thinlto_codegen_set_pic_model");

fn void thinlto_codegen_set_savetemps_dir(
  ThinltoCodeGenT cg, 
  CChar* save_temps_dir)
@extern("thinlto_codegen_set_savetemps_dir");

fn void thinlto_set_generated_objects_dir(
  ThinltoCodeGenT cg, 
  CChar* save_temps_dir)
@extern("thinlto_set_generated_objects_dir");

fn void thinlto_codegen_set_cpu(
  ThinltoCodeGenT cg, 
  CChar* cpu)
@extern("thinlto_codegen_set_cpu");

fn void thinlto_codegen_disable_codegen(
  ThinltoCodeGenT cg, 
  LtoBoolT disable)
@extern("thinlto_codegen_disable_codegen");

fn void thinlto_codegen_set_codegen_only(
  ThinltoCodeGenT cg, 
  LtoBoolT codegen_only)
@extern("thinlto_codegen_set_codegen_only");

fn void thinlto_debug_options(
  CChar** options, 
  CInt number)
@extern("thinlto_debug_options");

fn LtoBoolT lto_module_is_thinlto(
  LtoModuleT mod)
@extern("lto_module_is_thinlto");

fn void thinlto_codegen_add_must_preserve_symbol(
  ThinltoCodeGenT cg, 
  CChar* name, 
  CInt length)
@extern("thinlto_codegen_add_must_preserve_symbol");

fn void thinlto_codegen_add_cross_referenced_symbol(
  ThinltoCodeGenT cg, 
  CChar* name, 
  CInt length)
@extern("thinlto_codegen_add_cross_referenced_symbol");

fn void thinlto_codegen_set_cache_dir(
  ThinltoCodeGenT cg, 
  CChar* cache_dir)
@extern("thinlto_codegen_set_cache_dir");

fn void thinlto_codegen_set_cache_pruning_interval(
  ThinltoCodeGenT cg, 
  CInt interval)
@extern("thinlto_codegen_set_cache_pruning_interval");

fn void thinlto_codegen_set_final_cache_size_relative_to_available_space(
  ThinltoCodeGenT cg, 
  CUInt percentage)
@extern("thinlto_codegen_set_final_cache_size_relative_to_available_space");

fn void thinlto_codegen_set_cache_entry_expiration(
  ThinltoCodeGenT cg, 
  CUInt expiration)
@extern("thinlto_codegen_set_cache_entry_expiration");

fn void thinlto_codegen_set_cache_size_bytes(
  ThinltoCodeGenT cg, 
  CUInt max_size_bytes)
@extern("thinlto_codegen_set_cache_size_bytes");

fn void thinlto_codegen_set_cache_size_megabytes(
  ThinltoCodeGenT cg, 
  CUInt max_size_megabytes)
@extern("thinlto_codegen_set_cache_size_megabytes");

fn void thinlto_codegen_set_cache_size_files(
  ThinltoCodeGenT cg, 
  CUInt max_size_files)
@extern("thinlto_codegen_set_cache_size_files");
