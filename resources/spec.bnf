file           ::= link* pkg statement*
link           ::= KW_LINK LT IDENTIFIER GT SEMICOLON
pkg            ::= KW_PKG path SEMICOLON
path           ::= IDENTIFIER (PERIOD IDENTIFIER)*
statement      ::= use | def | ext | const | macro | struct
use            ::= KW_USE path SEMICOLON
def            ::= KW_VAR? KW_DEF type IDENTIFIER parameters body
type           ::= tuple_type | IDENTIFIER
parameters     ::= LPAREN (parameter (COMMA parameter)*)? RPAREN
parameter      ::= KW_VAR? type? IDENTIFIER
body           ::= LBRACE body_statement* RBRACE
body_statement ::= if | var | for | while | return | switch | (identifier SEMICOLON)
identifier     ::= call | access | reassign | inc | IDENTIFIER
ext            ::= KW_VAR? KW_EXT type IDENTIFIER parameters (KW_AS IDENTIFIER)? SEMICOLON
struct         ::= KW_STRUCT IDENTIFIER struct_fields
struct_fields  ::= LBRACE struct_field* RBRACE
struct_field   ::= type IDENTIFIER SEMICOLON
var            ::= KW_VAR type IDENTIFIER (COMMA IDENTIFIER)* EQUALS expression SEMICOLON
expression     ::= term ((PLUS | MINUS | STAR | SLASH | IS_EQUAL | NOT_EQUAL | GTE | LTE | GT | LT | AND | OR) term)*
term           ::= CHAR | FLOAT | init | DOUBLE | STRING | (LPAREN expression RPAREN) | BOOLEAN | INTEGER | identifier
init           ::= LBRACE (init_value (COMMA init_value)*)? RBRACE
init_value     ::= (PERIOD IDENTIFIER EQUALS)? expression
tuple_type     ::= LPAREN (type (COMMA type)*)? RPAREN
call           ::= IDENTIFIER arguments
arguments      ::= LPAREN (expression (COMMA expression)*)? RPAREN
access         ::= IDENTIFIER PERIOD identifier
while          ::= KW_WHILE LPAREN expression RPAREN body
reassign       ::= IDENTIFIER EQUALS expression
for            ::= KW_FOR LPAREN var expression SEMICOLON expression RPAREN body
inc            ::= IDENTIFIER (PLUS | MINUS | BANG){2}
return         ::= KW_RETURN (expression (COMMA expression))? SEMICOLON
if             ::= KW_IF LPAREN expression RPAREN body (KW_ELSE (if | body))?
switch         ::= KW_SWITCH LPAREN expression RPAREN LBRACE case* RBRACE
case           ::= KW_CASE expression COLON body_statement*
const          ::= KW_CONST type IDENTIFIER EQUALS expression SEMICOLON
macro          ::= KW_VAR? KW_MACRO type IDENTIFIER parameters body
